// dllmain.cpp : DLL 애플리케이션의 진입점을 정의합니다.

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
 /* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
	struct SwigMovePointer {
		T *ptr;
		SwigMovePointer(T *p) : ptr(p) { }
		~SwigMovePointer() { delete ptr; }
		SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
	} pointer;
	SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
	SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
	SwigValueWrapper() : pointer(0) { }
	SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
	operator T&() const { return *pointer.ptr; }
	T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
	return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

 /* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(__GNUC__) && defined(_WIN32) && !defined(SWIG_PYTHON_NO_HYPOT_WORKAROUND)
 /* Workaround for '::hypot' has not been declared', see https://bugs.python.org/issue11566 */
# include <math.h>
#endif

#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG 1
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

 /* This should only be incremented when either the layout of swig_type_info changes,
	or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

	/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2
#define SWIG_POINTER_NO_NULL       0x4

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

	 if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
	   // success code
	 } else {
	   //fail code
	 }

   Now you can be more explicit:

	int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
	if (SWIG_IsOK(res)) {
	  // success code
	} else {
	  // fail code
	}

   which is the same really, but now you can also do

	Type *ptr;
	int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
	if (SWIG_IsOK(res)) {
	  // success code
	  if (SWIG_IsNewObj(res) {
		...
	delete *ptr;
	  } else {
		...
	  }
	} else {
	  // fail code
	}

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

	  int SWIG_ConvertPtr(obj, ptr,...) {
		if (<obj is ok>) {
		  if (<need new object>) {
			*ptr = <ptr to new allocated object>;
			return SWIG_NEWOBJ;
		  } else {
			*ptr = <ptr to old object>;
			return SWIG_OLDOBJ;
		  }
		} else {
		  return SWIG_BADOBJ;
		}
	  }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

	   int food(double)
	   int fooi(int);

   and you call

	  food(1)   // cast rank '1'  (1 -> 1.0)
	  fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
	return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
	return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

	typedef void *(*swig_converter_func)(void *, int *);
	typedef struct swig_type_info *(*swig_dycast_func)(void **);

	/* Structure to store information on one type */
	typedef struct swig_type_info {
		const char             *name;			/* mangled name of this type */
		const char             *str;			/* human readable name of this type */
		swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
		struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
		void                   *clientdata;		/* language specific type data */
		int                    owndata;		/* flag if the structure owns the clientdata */
	} swig_type_info;

	/* Structure to store a type and conversion function used for casting */
	typedef struct swig_cast_info {
		swig_type_info         *type;			/* pointer to type that is equivalent to this type */
		swig_converter_func     converter;		/* function to cast the void pointers */
		struct swig_cast_info  *next;			/* pointer to next cast in linked list */
		struct swig_cast_info  *prev;			/* pointer to the previous cast */
	} swig_cast_info;

	/* Structure used to store module information
	 * Each module generates one structure like this, and the runtime collects
	 * all of these structures and stores them in a circularly linked list.*/
	typedef struct swig_module_info {
		swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
		size_t                 size;		        /* Number of types in this module */
		struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
		swig_type_info         **type_initial;	/* Array of initially generated type structures */
		swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
		void                    *clientdata;		/* Language specific module data */
	} swig_module_info;

	/*
	  Compare two type names skipping the space characters, therefore
	  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

	  Return 0 when the two name types are equivalent, as in
	  strncmp, but skipping ' '.
	*/
	SWIGRUNTIME int
		SWIG_TypeNameComp(const char *f1, const char *l1,
			const char *f2, const char *l2) {
		for (; (f1 != l1) && (f2 != l2); ++f1, ++f2) {
			while ((*f1 == ' ') && (f1 != l1)) ++f1;
			while ((*f2 == ' ') && (f2 != l2)) ++f2;
			if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
		}
		return (int)((l1 - f1) - (l2 - f2));
	}

	/*
	  Check type equivalence in a name list like <name1>|<name2>|...
	  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
	*/
	SWIGRUNTIME int
		SWIG_TypeCmp(const char *nb, const char *tb) {
		int equiv = 1;
		const char* te = tb + strlen(tb);
		const char* ne = nb;
		while (equiv != 0 && *ne) {
			for (nb = ne; *ne; ++ne) {
				if (*ne == '|') break;
			}
			equiv = SWIG_TypeNameComp(nb, ne, tb, te);
			if (*ne) ++ne;
		}
		return equiv;
	}

	/*
	  Check type equivalence in a name list like <name1>|<name2>|...
	  Return 0 if not equal, 1 if equal
	*/
	SWIGRUNTIME int
		SWIG_TypeEquiv(const char *nb, const char *tb) {
		return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
	}

	/*
	  Check the typename
	*/
	SWIGRUNTIME swig_cast_info *
		SWIG_TypeCheck(const char *c, swig_type_info *ty) {
		if (ty) {
			swig_cast_info *iter = ty->cast;
			while (iter) {
				if (strcmp(iter->type->name, c) == 0) {
					if (iter == ty->cast)
						return iter;
					/* Move iter to the top of the linked list */
					iter->prev->next = iter->next;
					if (iter->next)
						iter->next->prev = iter->prev;
					iter->next = ty->cast;
					iter->prev = 0;
					if (ty->cast) ty->cast->prev = iter;
					ty->cast = iter;
					return iter;
				}
				iter = iter->next;
			}
		}
		return 0;
	}

	/*
	  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
	*/
	SWIGRUNTIME swig_cast_info *
		SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
		if (ty) {
			swig_cast_info *iter = ty->cast;
			while (iter) {
				if (iter->type == from) {
					if (iter == ty->cast)
						return iter;
					/* Move iter to the top of the linked list */
					iter->prev->next = iter->next;
					if (iter->next)
						iter->next->prev = iter->prev;
					iter->next = ty->cast;
					iter->prev = 0;
					if (ty->cast) ty->cast->prev = iter;
					ty->cast = iter;
					return iter;
				}
				iter = iter->next;
			}
		}
		return 0;
	}

	/*
	  Cast a pointer up an inheritance hierarchy
	*/
	SWIGRUNTIMEINLINE void *
		SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
		return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
	}

	/*
	   Dynamic pointer casting. Down an inheritance hierarchy
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
		swig_type_info *lastty = ty;
		if (!ty || !ty->dcast) return ty;
		while (ty && (ty->dcast)) {
			ty = (*ty->dcast)(ptr);
			if (ty) lastty = ty;
		}
		return lastty;
	}

	/*
	  Return the name associated with this type
	*/
	SWIGRUNTIMEINLINE const char *
		SWIG_TypeName(const swig_type_info *ty) {
		return ty->name;
	}

	/*
	  Return the pretty name associated with this type,
	  that is an unmangled type name in a form presentable to the user.
	*/
	SWIGRUNTIME const char *
		SWIG_TypePrettyName(const swig_type_info *type) {
		/* The "str" field contains the equivalent pretty names of the
		   type, separated by vertical-bar characters.  We choose
		   to print the last name, as it is often (?) the most
		   specific. */
		if (!type) return NULL;
		if (type->str != NULL) {
			const char *last_name = type->str;
			const char *s;
			for (s = type->str; *s; s++)
				if (*s == '|') last_name = s + 1;
			return last_name;
		}
		else
			return type->name;
	}

	/*
	   Set the clientdata field for a type
	*/
	SWIGRUNTIME void
		SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
		swig_cast_info *cast = ti->cast;
		/* if (ti->clientdata == clientdata) return; */
		ti->clientdata = clientdata;

		while (cast) {
			if (!cast->converter) {
				swig_type_info *tc = cast->type;
				if (!tc->clientdata) {
					SWIG_TypeClientData(tc, clientdata);
				}
			}
			cast = cast->next;
		}
	}
	SWIGRUNTIME void
		SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
		SWIG_TypeClientData(ti, clientdata);
		ti->owndata = 1;
	}

	/*
	  Search for a swig_type_info structure only by mangled name
	  Search is a O(log #types)

	  We start searching at module start, and finish searching when start == end.
	  Note: if start == end at the beginning of the function, we go all the way around
	  the circular list.
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_MangledTypeQueryModule(swig_module_info *start,
			swig_module_info *end,
			const char *name) {
		swig_module_info *iter = start;
		do {
			if (iter->size) {
				size_t l = 0;
				size_t r = iter->size - 1;
				do {
					/* since l+r >= 0, we can (>> 1) instead (/ 2) */
					size_t i = (l + r) >> 1;
					const char *iname = iter->types[i]->name;
					if (iname) {
						int compare = strcmp(name, iname);
						if (compare == 0) {
							return iter->types[i];
						}
						else if (compare < 0) {
							if (i) {
								r = i - 1;
							}
							else {
								break;
							}
						}
						else if (compare > 0) {
							l = i + 1;
						}
					}
					else {
						break; /* should never happen */
					}
				} while (l <= r);
			}
			iter = iter->next;
		} while (iter != end);
		return 0;
	}

	/*
	  Search for a swig_type_info structure for either a mangled name or a human readable name.
	  It first searches the mangled names of the types, which is a O(log #types)
	  If a type is not found it then searches the human readable names, which is O(#types).

	  We start searching at module start, and finish searching when start == end.
	  Note: if start == end at the beginning of the function, we go all the way around
	  the circular list.
	*/
	SWIGRUNTIME swig_type_info *
		SWIG_TypeQueryModule(swig_module_info *start,
			swig_module_info *end,
			const char *name) {
		/* STEP 1: Search the name field using binary search */
		swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
		if (ret) {
			return ret;
		}
		else {
			/* STEP 2: If the type hasn't been found, do a complete search
			   of the str field (the human readable name) */
			swig_module_info *iter = start;
			do {
				size_t i = 0;
				for (; i < iter->size; ++i) {
					if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
						return iter->types[i];
				}
				iter = iter->next;
			} while (iter != end);
		}

		/* neither found a match */
		return 0;
	}

	/*
	   Pack binary data into a string
	*/
	SWIGRUNTIME char *
		SWIG_PackData(char *c, void *ptr, size_t sz) {
		static const char hex[17] = "0123456789abcdef";
		const unsigned char *u = (unsigned char *)ptr;
		const unsigned char *eu = u + sz;
		for (; u != eu; ++u) {
			unsigned char uu = *u;
			*(c++) = hex[(uu & 0xf0) >> 4];
			*(c++) = hex[uu & 0xf];
		}
		return c;
	}

	/*
	   Unpack binary data from a string
	*/
	SWIGRUNTIME const char *
		SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
		unsigned char *u = (unsigned char *)ptr;
		const unsigned char *eu = u + sz;
		for (; u != eu; ++u) {
			char d = *(c++);
			unsigned char uu;
			if ((d >= '0') && (d <= '9'))
				uu = (unsigned char)((d - '0') << 4);
			else if ((d >= 'a') && (d <= 'f'))
				uu = (unsigned char)((d - ('a' - 10)) << 4);
			else
				return (char *)0;
			d = *(c++);
			if ((d >= '0') && (d <= '9'))
				uu |= (unsigned char)(d - '0');
			else if ((d >= 'a') && (d <= 'f'))
				uu |= (unsigned char)(d - ('a' - 10));
			else
				return (char *)0;
			*u = uu;
		}
		return c;
	}

	/*
	   Pack 'void *' into a string buffer.
	*/
	SWIGRUNTIME char *
		SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
		char *r = buff;
		if ((2 * sizeof(void *) + 2) > bsz) return 0;
		*(r++) = '_';
		r = SWIG_PackData(r, &ptr, sizeof(void *));
		if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
		strcpy(r, name);
		return buff;
	}

	SWIGRUNTIME const char *
		SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
		if (*c != '_') {
			if (strcmp(c, "NULL") == 0) {
				*ptr = (void *)0;
				return name;
			}
			else {
				return 0;
			}
		}
		return SWIG_UnpackData(++c, ptr, sizeof(void *));
	}

	SWIGRUNTIME char *
		SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
		char *r = buff;
		size_t lname = (name ? strlen(name) : 0);
		if ((2 * sz + 2 + lname) > bsz) return 0;
		*(r++) = '_';
		r = SWIG_PackData(r, ptr, sz);
		if (lname) {
			strncpy(r, name, lname + 1);
		}
		else {
			*r = 0;
		}
		return buff;
	}

	SWIGRUNTIME const char *
		SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
		if (*c != '_') {
			if (strcmp(c, "NULL") == 0) {
				memset(ptr, 0, sz);
				return name;
			}
			else {
				return 0;
			}
		}
		return SWIG_UnpackData(++c, ptr, sz);
	}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03030000
	return (char *)PyUnicode_AsUTF8(str);
#elif PY_VERSION_HEX >= 0x03000000
	char *newstr = 0;
	str = PyUnicode_AsUTF8String(str);
	if (str) {
		char *cstr;
		Py_ssize_t len;
		if (PyBytes_AsStringAndSize(str, &cstr, &len) != -1) {
			newstr = (char *)malloc(len + 1);
			if (newstr)
				memcpy(newstr, cstr, len + 1);
		}
		Py_XDECREF(str);
	}
	return newstr;
#else
	return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03030000 || PY_VERSION_HEX < 0x03000000
#  define SWIG_Python_str_DelForPy3(x)
#else
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
	return PyUnicode_FromString(c);
#else
	return PyString_FromString(c);
#endif
}

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

// SWIGPY_USE_CAPSULE is no longer used within SWIG itself, but some user
// interface files check for it.
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ("swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
	PyObject* type = 0;
	switch (code) {
	case SWIG_MemoryError:
		type = PyExc_MemoryError;
		break;
	case SWIG_IOError:
		type = PyExc_IOError;
		break;
	case SWIG_RuntimeError:
		type = PyExc_RuntimeError;
		break;
	case SWIG_IndexError:
		type = PyExc_IndexError;
		break;
	case SWIG_TypeError:
		type = PyExc_TypeError;
		break;
	case SWIG_DivisionByZero:
		type = PyExc_ZeroDivisionError;
		break;
	case SWIG_OverflowError:
		type = PyExc_OverflowError;
		break;
	case SWIG_SyntaxError:
		type = PyExc_SyntaxError;
		break;
	case SWIG_ValueError:
		type = PyExc_ValueError;
		break;
	case SWIG_SystemError:
		type = PyExc_SystemError;
		break;
	case SWIG_AttributeError:
		type = PyExc_AttributeError;
		break;
	default:
		type = PyExc_RuntimeError;
	}
	return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
	PyObject *type = 0;
	PyObject *value = 0;
	PyObject *traceback = 0;

	if (PyErr_Occurred())
		PyErr_Fetch(&type, &value, &traceback);
	if (value) {
		PyObject *old_str = PyObject_Str(value);
		const char *tmp = SWIG_Python_str_AsChar(old_str);
		PyErr_Clear();
		Py_XINCREF(type);
		if (tmp)
			PyErr_Format(type, "%s %s", tmp, mesg);
		else
			PyErr_Format(type, "%s", mesg);
		SWIG_Python_str_DelForPy3(tmp);
		Py_DECREF(old_str);
		Py_DECREF(value);
	}
	else {
		PyErr_SetString(PyExc_RuntimeError, mesg);
	}
}

SWIGRUNTIME int
SWIG_Python_TypeErrorOccurred(PyObject *obj)
{
	PyObject *error;
	if (obj)
		return 0;
	error = PyErr_Occurred();
	return error && PyErr_GivenExceptionMatches(error, PyExc_TypeError);
}

SWIGRUNTIME void
SWIG_Python_RaiseOrModifyTypeError(const char *message)
{
	if (SWIG_Python_TypeErrorOccurred(NULL)) {
		/* Use existing TypeError to preserve stacktrace and enhance with given message */
		PyObject *newvalue;
		PyObject *type = NULL, *value = NULL, *traceback = NULL;
		PyErr_Fetch(&type, &value, &traceback);
#if PY_VERSION_HEX >= 0x03000000
		newvalue = PyUnicode_FromFormat("%S\nAdditional information:\n%s", value, message);
#else
		newvalue = PyString_FromFormat("%s\nAdditional information:\n%s", PyString_AsString(value), message);
#endif
		Py_XDECREF(value);
		PyErr_Restore(type, newvalue, traceback);
	}
	else {
		/* Raise TypeError using given message */
		PyErr_SetString(PyExc_TypeError, message);
	}
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    define SWIG_PYTHON_USE_GIL
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
class SWIG_Python_Thread_Block {
	bool status;
	PyGILState_STATE state;
public:
	void end() { if (status) { PyGILState_Release(state); status = false; } }
	SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
	~SWIG_Python_Thread_Block() { end(); }
};
class SWIG_Python_Thread_Allow {
	bool status;
	PyThreadState *save;
public:
	void end() { if (status) { PyEval_RestoreThread(save); status = false; } }
	SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
	~SWIG_Python_Thread_Allow() { end(); }
};
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

	/* -----------------------------------------------------------------------------
	 * Constant declarations
	 * ----------------------------------------------------------------------------- */

	 /* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
	typedef struct swig_const_info {
		int type;
		const char *name;
		long lvalue;
		double dvalue;
		void   *pvalue;
		swig_type_info **ptype;
	} swig_const_info;

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

#if PY_VERSION_HEX < 0x02070000 /* 2.7.0 */
# error "This version of SWIG only supports Python >= 2.7"
#endif

#if PY_VERSION_HEX >= 0x03000000 && PY_VERSION_HEX < 0x03020000
# error "This version of SWIG only supports Python 3 >= 3.2"
#endif

 /* Common SWIG API */

 /* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetObject(errtype, obj);
	Py_DECREF(obj);
	SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
	SWIG_PYTHON_THREAD_BEGIN_BLOCK;
	PyErr_SetString(errtype, msg);
	SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
	PyObject *s = PyString_InternFromString(key);
	PyList_Append(seq, s);
	Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {
	PyDict_SetItemString(d, name, obj);
	Py_DECREF(obj);
	if (public_interface)
		SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {
	PyDict_SetItemString(d, name, obj);
	Py_DECREF(obj);
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
	if (!result) {
		result = obj;
	}
	else if (result == Py_None) {
		Py_DECREF(result);
		result = obj;
	}
	else {
		if (!PyList_Check(result)) {
			PyObject *o2 = result;
			result = PyList_New(1);
			PyList_SetItem(result, 0, o2);
		}
		PyList_Append(result, obj);
		Py_DECREF(obj);
	}
	return result;
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
	if (!args) {
		if (!min && !max) {
			return 1;
		}
		else {
			PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none",
				name, (min == max ? "" : "at least "), (int)min);
			return 0;
		}
	}
	if (!PyTuple_Check(args)) {
		if (min <= 1 && max >= 1) {
			Py_ssize_t i;
			objs[0] = args;
			for (i = 1; i < max; ++i) {
				objs[i] = 0;
			}
			return 2;
		}
		PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
		return 0;
	}
	else {
		Py_ssize_t l = PyTuple_GET_SIZE(args);
		if (l < min) {
			PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d",
				name, (min == max ? "" : "at least "), (int)min, (int)l);
			return 0;
		}
		else if (l > max) {
			PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d",
				name, (min == max ? "" : "at most "), (int)max, (int)l);
			return 0;
		}
		else {
			Py_ssize_t i;
			for (i = 0; i < l; ++i) {
				objs[i] = PyTuple_GET_ITEM(args, i);
			}
			for (; l < max; ++l) {
				objs[l] = 0;
			}
			return i + 1;
		}
	}
}

SWIGINTERN int
SWIG_Python_CheckNoKeywords(PyObject *kwargs, const char *name) {
	int no_kwargs = 1;
	if (kwargs) {
		assert(PyDict_Check(kwargs));
		if (PyDict_Size(kwargs) > 0) {
			PyErr_Format(PyExc_TypeError, "%s() does not take keyword arguments", name);
			no_kwargs = 0;
		}
	}
	return no_kwargs;
}

/* A functor is a function object with one single object argument */
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

 /* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

	/* The python void return value */

	SWIGRUNTIMEINLINE PyObject *
		SWIG_Py_Void(void)
	{
		PyObject *none = Py_None;
		Py_INCREF(none);
		return none;
	}

	/* SwigPyClientData */

	typedef struct {
		PyObject *klass;
		PyObject *newraw;
		PyObject *newargs;
		PyObject *destroy;
		int delargs;
		int implicitconv;
		PyTypeObject *pytype;
	} SwigPyClientData;

	SWIGRUNTIMEINLINE int
		SWIG_Python_CheckImplicit(swig_type_info *ty)
	{
		SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
		int fail = data ? data->implicitconv : 0;
		if (fail)
			PyErr_SetString(PyExc_TypeError, "Implicit conversion is prohibited for explicit constructors.");
		return fail;
	}

	SWIGRUNTIMEINLINE PyObject *
		SWIG_Python_ExceptionType(swig_type_info *desc) {
		SwigPyClientData *data = desc ? (SwigPyClientData *)desc->clientdata : 0;
		PyObject *klass = data ? data->klass : 0;
		return (klass ? klass : PyExc_RuntimeError);
	}


	SWIGRUNTIME SwigPyClientData *
		SwigPyClientData_New(PyObject* obj)
	{
		if (!obj) {
			return 0;
		}
		else {
			SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
			/* the klass element */
			data->klass = obj;
			Py_INCREF(data->klass);
			/* the newraw method and newargs arguments used to create a new raw instance */
			if (PyClass_Check(obj)) {
				data->newraw = 0;
				data->newargs = obj;
				Py_INCREF(obj);
			}
			else {
				data->newraw = PyObject_GetAttrString(data->klass, "__new__");
				if (data->newraw) {
					Py_INCREF(data->newraw);
					data->newargs = PyTuple_New(1);
					PyTuple_SetItem(data->newargs, 0, obj);
				}
				else {
					data->newargs = obj;
				}
				Py_INCREF(data->newargs);
			}
			/* the destroy method, aka as the C++ delete method */
			data->destroy = PyObject_GetAttrString(data->klass, "__swig_destroy__");
			if (PyErr_Occurred()) {
				PyErr_Clear();
				data->destroy = 0;
			}
			if (data->destroy) {
				int flags;
				Py_INCREF(data->destroy);
				flags = PyCFunction_GET_FLAGS(data->destroy);
				data->delargs = !(flags & (METH_O));
			}
			else {
				data->delargs = 0;
			}
			data->implicitconv = 0;
			data->pytype = 0;
			return data;
		}
	}

	SWIGRUNTIME void
		SwigPyClientData_Del(SwigPyClientData *data) {
		Py_XDECREF(data->newraw);
		Py_XDECREF(data->newargs);
		Py_XDECREF(data->destroy);
	}

	/* =============== SwigPyObject =====================*/

	typedef struct {
		PyObject_HEAD
			void *ptr;
		swig_type_info *ty;
		int own;
		PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
		PyObject *dict;
#endif
	} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

	SWIGRUNTIME PyObject *
		SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
	{
		SwigPyObject *sobj = (SwigPyObject *)v;

		if (!sobj->dict)
			sobj->dict = PyDict_New();

		Py_INCREF(sobj->dict);
		return sobj->dict;
	}

#endif

	SWIGRUNTIME PyObject *
		SwigPyObject_long(SwigPyObject *v)
	{
		return PyLong_FromVoidPtr(v->ptr);
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_format(const char* fmt, SwigPyObject *v)
	{
		PyObject *res = NULL;
		PyObject *args = PyTuple_New(1);
		if (args) {
			if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
				PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
				if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
					res = PyUnicode_Format(ofmt, args);
#else
					res = PyString_Format(ofmt, args);
#endif
					Py_DECREF(ofmt);
				}
				Py_DECREF(args);
			}
		}
		return res;
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_oct(SwigPyObject *v)
	{
		return SwigPyObject_format("%o", v);
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_hex(SwigPyObject *v)
	{
		return SwigPyObject_format("%x", v);
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_repr(SwigPyObject *v)
	{
		const char *name = SWIG_TypePrettyName(v->ty);
		PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
		if (v->next) {
			PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# if PY_VERSION_HEX >= 0x03000000
			PyObject *joined = PyUnicode_Concat(repr, nrep);
			Py_DecRef(repr);
			Py_DecRef(nrep);
			repr = joined;
# else
			PyString_ConcatAndDel(&repr, nrep);
# endif
		}
		return repr;
	}

	/* We need a version taking two PyObject* parameters so it's a valid
	 * PyCFunction to use in swigobject_methods[]. */
	SWIGRUNTIME PyObject *
		SwigPyObject_repr2(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
	{
		return SwigPyObject_repr((SwigPyObject*)v);
	}

	SWIGRUNTIME int
		SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
	{
		void *i = v->ptr;
		void *j = w->ptr;
		return (i < j) ? -1 : ((i > j) ? 1 : 0);
	}

	/* Added for Python 3.x, would it also be useful for Python 2.x? */
	SWIGRUNTIME PyObject*
		SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
	{
		PyObject* res;
		if (op != Py_EQ && op != Py_NE) {
			Py_INCREF(Py_NotImplemented);
			return Py_NotImplemented;
		}
		res = PyBool_FromLong((SwigPyObject_compare(v, w) == 0) == (op == Py_EQ) ? 1 : 0);
		return res;
	}


	SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
	static swig_type_info *SwigPyObject_stype = 0;
	SWIGRUNTIME PyTypeObject*
		SwigPyObject_type(void) {
		SwigPyClientData *cd;
		assert(SwigPyObject_stype);
		cd = (SwigPyClientData*)SwigPyObject_stype->clientdata;
		assert(cd);
		assert(cd->pytype);
		return cd->pytype;
	}
#else
	SWIGRUNTIME PyTypeObject*
		SwigPyObject_type(void) {
		static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
		return type;
	}
#endif

	SWIGRUNTIMEINLINE int
		SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
		PyTypeObject *target_tp = SwigPyObject_type();
		if (PyType_IsSubtype(op->ob_type, target_tp))
			return 1;
		return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
		return (Py_TYPE(op) == SwigPyObject_type())
			|| (strcmp(Py_TYPE(op)->tp_name, "SwigPyObject") == 0);
#endif
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

	SWIGRUNTIME void
		SwigPyObject_dealloc(PyObject *v)
	{
		SwigPyObject *sobj = (SwigPyObject *)v;
		PyObject *next = sobj->next;
		if (sobj->own == SWIG_POINTER_OWN) {
			swig_type_info *ty = sobj->ty;
			SwigPyClientData *data = ty ? (SwigPyClientData *)ty->clientdata : 0;
			PyObject *destroy = data ? data->destroy : 0;
			if (destroy) {
				/* destroy is always a VARARGS method */
				PyObject *res;

				/* PyObject_CallFunction() has the potential to silently drop
				   the active exception.  In cases of unnamed temporary
				   variable or where we just finished iterating over a generator
				   StopIteration will be active right now, and this needs to
				   remain true upon return from SwigPyObject_dealloc.  So save
				   and restore. */

				PyObject *type = NULL, *value = NULL, *traceback = NULL;
				PyErr_Fetch(&type, &value, &traceback);

				if (data->delargs) {
					/* we need to create a temporary object to carry the destroy operation */
					PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
					res = SWIG_Python_CallFunctor(destroy, tmp);
					Py_DECREF(tmp);
				}
				else {
					PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
					PyObject *mself = PyCFunction_GET_SELF(destroy);
					res = ((*meth)(mself, v));
				}
				if (!res)
					PyErr_WriteUnraisable(destroy);

				PyErr_Restore(type, value, traceback);

				Py_XDECREF(res);
			}
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
			else {
				const char *name = SWIG_TypePrettyName(ty);
				printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
			}
#endif
		}
		Py_XDECREF(next);
		PyObject_DEL(v);
	}

	SWIGRUNTIME PyObject*
		SwigPyObject_append(PyObject* v, PyObject* next)
	{
		SwigPyObject *sobj = (SwigPyObject *)v;
		if (!SwigPyObject_Check(next)) {
			PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
			return NULL;
		}
		sobj->next = next;
		Py_INCREF(next);
		return SWIG_Py_Void();
	}

	SWIGRUNTIME PyObject*
		SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
	{
		SwigPyObject *sobj = (SwigPyObject *)v;
		if (sobj->next) {
			Py_INCREF(sobj->next);
			return sobj->next;
		}
		else {
			return SWIG_Py_Void();
		}
	}

	SWIGINTERN PyObject*
		SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
	{
		SwigPyObject *sobj = (SwigPyObject *)v;
		sobj->own = 0;
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject*
		SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
	{
		SwigPyObject *sobj = (SwigPyObject *)v;
		sobj->own = SWIG_POINTER_OWN;
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject*
		SwigPyObject_own(PyObject *v, PyObject *args)
	{
		PyObject *val = 0;
		if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) {
			return NULL;
		}
		else {
			SwigPyObject *sobj = (SwigPyObject *)v;
			PyObject *obj = PyBool_FromLong(sobj->own);
			if (val) {
				if (PyObject_IsTrue(val)) {
					SwigPyObject_acquire(v, args);
				}
				else {
					SwigPyObject_disown(v, args);
				}
			}
			return obj;
		}
	}

	static PyMethodDef
		swigobject_methods[] = {
		  {"disown",  SwigPyObject_disown,  METH_NOARGS,  "releases ownership of the pointer"},
		  {"acquire", SwigPyObject_acquire, METH_NOARGS,  "acquires ownership of the pointer"},
		  {"own",     SwigPyObject_own,     METH_VARARGS, "returns/sets ownership of the pointer"},
		  {"append",  SwigPyObject_append,  METH_O,       "appends another 'this' object"},
		  {"next",    SwigPyObject_next,    METH_NOARGS,  "returns the next 'this' object"},
		  {"__repr__",SwigPyObject_repr2,   METH_NOARGS,  "returns object representation"},
		  {0, 0, 0, 0}
	};

	SWIGRUNTIME PyTypeObject*
		SwigPyObject_TypeOnce(void) {
		static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

		static PyNumberMethods SwigPyObject_as_number = {
		  (binaryfunc)0, /*nb_add*/
		  (binaryfunc)0, /*nb_subtract*/
		  (binaryfunc)0, /*nb_multiply*/
		  /* nb_divide removed in Python 3 */
	  #if PY_VERSION_HEX < 0x03000000
		  (binaryfunc)0, /*nb_divide*/
	  #endif
		  (binaryfunc)0, /*nb_remainder*/
		  (binaryfunc)0, /*nb_divmod*/
		  (ternaryfunc)0,/*nb_power*/
		  (unaryfunc)0,  /*nb_negative*/
		  (unaryfunc)0,  /*nb_positive*/
		  (unaryfunc)0,  /*nb_absolute*/
		  (inquiry)0,    /*nb_nonzero*/
		  0,		   /*nb_invert*/
		  0,		   /*nb_lshift*/
		  0,		   /*nb_rshift*/
		  0,		   /*nb_and*/
		  0,		   /*nb_xor*/
		  0,		   /*nb_or*/
	  #if PY_VERSION_HEX < 0x03000000
		  0,   /*nb_coerce*/
	  #endif
		  (unaryfunc)SwigPyObject_long, /*nb_int*/
	  #if PY_VERSION_HEX < 0x03000000
		  (unaryfunc)SwigPyObject_long, /*nb_long*/
	  #else
		  0, /*nb_reserved*/
	  #endif
		  (unaryfunc)0,                 /*nb_float*/
	  #if PY_VERSION_HEX < 0x03000000
		  (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
		  (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
	  #endif
	  #if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
		  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
	  #elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
		  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
	  #else
		  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
	  #endif
		};

		static PyTypeObject swigpyobject_type;
		static int type_init = 0;
		if (!type_init) {
			const PyTypeObject tmp = {
		#if PY_VERSION_HEX >= 0x03000000
			  PyVarObject_HEAD_INIT(NULL, 0)
		#else
			  PyObject_HEAD_INIT(NULL)
			  0,                                    /* ob_size */
		#endif
			  "SwigPyObject",                       /* tp_name */
			  sizeof(SwigPyObject),                 /* tp_basicsize */
			  0,                                    /* tp_itemsize */
			  (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
			  0,                                    /* tp_print */
			  (getattrfunc)0,                       /* tp_getattr */
			  (setattrfunc)0,                       /* tp_setattr */
		#if PY_VERSION_HEX >= 0x03000000
			  0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
		#else
			  (cmpfunc)SwigPyObject_compare,        /* tp_compare */
		#endif
			  (reprfunc)SwigPyObject_repr,          /* tp_repr */
			  &SwigPyObject_as_number,              /* tp_as_number */
			  0,                                    /* tp_as_sequence */
			  0,                                    /* tp_as_mapping */
			  (hashfunc)0,                          /* tp_hash */
			  (ternaryfunc)0,                       /* tp_call */
			  0,                                    /* tp_str */
			  PyObject_GenericGetAttr,              /* tp_getattro */
			  0,                                    /* tp_setattro */
			  0,                                    /* tp_as_buffer */
			  Py_TPFLAGS_DEFAULT,                   /* tp_flags */
			  swigobject_doc,                       /* tp_doc */
			  0,                                    /* tp_traverse */
			  0,                                    /* tp_clear */
			  (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
			  0,                                    /* tp_weaklistoffset */
			  0,                                    /* tp_iter */
			  0,                                    /* tp_iternext */
			  swigobject_methods,                   /* tp_methods */
			  0,                                    /* tp_members */
			  0,                                    /* tp_getset */
			  0,                                    /* tp_base */
			  0,                                    /* tp_dict */
			  0,                                    /* tp_descr_get */
			  0,                                    /* tp_descr_set */
			  0,                                    /* tp_dictoffset */
			  0,                                    /* tp_init */
			  0,                                    /* tp_alloc */
			  0,                                    /* tp_new */
			  0,                                    /* tp_free */
			  0,                                    /* tp_is_gc */
			  0,                                    /* tp_bases */
			  0,                                    /* tp_mro */
			  0,                                    /* tp_cache */
			  0,                                    /* tp_subclasses */
			  0,                                    /* tp_weaklist */
			  0,                                    /* tp_del */
			  0,                                    /* tp_version_tag */
		#if PY_VERSION_HEX >= 0x03040000
			  0,                                    /* tp_finalize */
		#endif
		#if PY_VERSION_HEX >= 0x03080000
			  0,                                    /* tp_vectorcall */
		#endif
		#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
			  0,                                    /* tp_print */
		#endif
		#ifdef COUNT_ALLOCS
			  0,                                    /* tp_allocs */
			  0,                                    /* tp_frees */
			  0,                                    /* tp_maxalloc */
			  0,                                    /* tp_prev */
			  0                                     /* tp_next */
		#endif
			};
			swigpyobject_type = tmp;
			type_init = 1;
			if (PyType_Ready(&swigpyobject_type) < 0)
				return NULL;
		}
		return &swigpyobject_type;
	}

	SWIGRUNTIME PyObject *
		SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
	{
		SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
		if (sobj) {
			sobj->ptr = ptr;
			sobj->ty = ty;
			sobj->own = own;
			sobj->next = 0;
		}
		return (PyObject *)sobj;
	}

	/* -----------------------------------------------------------------------------
	 * Implements a simple Swig Packed type, and use it instead of string
	 * ----------------------------------------------------------------------------- */

	typedef struct {
		PyObject_HEAD
			void *pack;
		swig_type_info *ty;
		size_t size;
	} SwigPyPacked;

	SWIGRUNTIME PyObject *
		SwigPyPacked_repr(SwigPyPacked *v)
	{
		char result[SWIG_BUFFER_SIZE];
		if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
			return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
		}
		else {
			return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
		}
	}

	SWIGRUNTIME PyObject *
		SwigPyPacked_str(SwigPyPacked *v)
	{
		char result[SWIG_BUFFER_SIZE];
		if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
			return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
		}
		else {
			return SWIG_Python_str_FromChar(v->ty->name);
		}
	}

	SWIGRUNTIME int
		SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
	{
		size_t i = v->size;
		size_t j = w->size;
		int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
		return s ? s : strncmp((const char *)v->pack, (const char *)w->pack, 2 * v->size);
	}

	SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

	SWIGRUNTIME PyTypeObject*
		SwigPyPacked_type(void) {
		static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
		return type;
	}

	SWIGRUNTIMEINLINE int
		SwigPyPacked_Check(PyObject *op) {
		return ((op)->ob_type == SwigPyPacked_TypeOnce())
			|| (strcmp((op)->ob_type->tp_name, "SwigPyPacked") == 0);
	}

	SWIGRUNTIME void
		SwigPyPacked_dealloc(PyObject *v)
	{
		if (SwigPyPacked_Check(v)) {
			SwigPyPacked *sobj = (SwigPyPacked *)v;
			free(sobj->pack);
		}
		PyObject_DEL(v);
	}

	SWIGRUNTIME PyTypeObject*
		SwigPyPacked_TypeOnce(void) {
		static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
		static PyTypeObject swigpypacked_type;
		static int type_init = 0;
		if (!type_init) {
			const PyTypeObject tmp = {
		#if PY_VERSION_HEX>=0x03000000
			  PyVarObject_HEAD_INIT(NULL, 0)
		#else
			  PyObject_HEAD_INIT(NULL)
			  0,                                    /* ob_size */
		#endif
			  "SwigPyPacked",                       /* tp_name */
			  sizeof(SwigPyPacked),                 /* tp_basicsize */
			  0,                                    /* tp_itemsize */
			  (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
			  0,                                    /* tp_print */
			  (getattrfunc)0,                       /* tp_getattr */
			  (setattrfunc)0,                       /* tp_setattr */
		#if PY_VERSION_HEX>=0x03000000
			  0, /* tp_reserved in 3.0.1 */
		#else
			  (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
		#endif
			  (reprfunc)SwigPyPacked_repr,          /* tp_repr */
			  0,                                    /* tp_as_number */
			  0,                                    /* tp_as_sequence */
			  0,                                    /* tp_as_mapping */
			  (hashfunc)0,                          /* tp_hash */
			  (ternaryfunc)0,                       /* tp_call */
			  (reprfunc)SwigPyPacked_str,           /* tp_str */
			  PyObject_GenericGetAttr,              /* tp_getattro */
			  0,                                    /* tp_setattro */
			  0,                                    /* tp_as_buffer */
			  Py_TPFLAGS_DEFAULT,                   /* tp_flags */
			  swigpacked_doc,                       /* tp_doc */
			  0,                                    /* tp_traverse */
			  0,                                    /* tp_clear */
			  0,                                    /* tp_richcompare */
			  0,                                    /* tp_weaklistoffset */
			  0,                                    /* tp_iter */
			  0,                                    /* tp_iternext */
			  0,                                    /* tp_methods */
			  0,                                    /* tp_members */
			  0,                                    /* tp_getset */
			  0,                                    /* tp_base */
			  0,                                    /* tp_dict */
			  0,                                    /* tp_descr_get */
			  0,                                    /* tp_descr_set */
			  0,                                    /* tp_dictoffset */
			  0,                                    /* tp_init */
			  0,                                    /* tp_alloc */
			  0,                                    /* tp_new */
			  0,                                    /* tp_free */
			  0,                                    /* tp_is_gc */
			  0,                                    /* tp_bases */
			  0,                                    /* tp_mro */
			  0,                                    /* tp_cache */
			  0,                                    /* tp_subclasses */
			  0,                                    /* tp_weaklist */
			  0,                                    /* tp_del */
			  0,                                    /* tp_version_tag */
		#if PY_VERSION_HEX >= 0x03040000
			  0,                                    /* tp_finalize */
		#endif
		#if PY_VERSION_HEX >= 0x03080000
			  0,                                    /* tp_vectorcall */
		#endif
		#if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
			  0,                                    /* tp_print */
		#endif
		#ifdef COUNT_ALLOCS
			  0,                                    /* tp_allocs */
			  0,                                    /* tp_frees */
			  0,                                    /* tp_maxalloc */
			  0,                                    /* tp_prev */
			  0                                     /* tp_next */
		#endif
			};
			swigpypacked_type = tmp;
			type_init = 1;
			if (PyType_Ready(&swigpypacked_type) < 0)
				return NULL;
		}
		return &swigpypacked_type;
	}

	SWIGRUNTIME PyObject *
		SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
	{
		SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
		if (sobj) {
			void *pack = malloc(size);
			if (pack) {
				memcpy(pack, ptr, size);
				sobj->pack = pack;
				sobj->ty = ty;
				sobj->size = size;
			}
			else {
				PyObject_DEL((PyObject *)sobj);
				sobj = 0;
			}
		}
		return (PyObject *)sobj;
	}

	SWIGRUNTIME swig_type_info *
		SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
	{
		if (SwigPyPacked_Check(obj)) {
			SwigPyPacked *sobj = (SwigPyPacked *)obj;
			if (sobj->size != size) return 0;
			memcpy(ptr, sobj->pack, size);
			return sobj->ty;
		}
		else {
			return 0;
		}
	}

	/* -----------------------------------------------------------------------------
	 * pointers/data manipulation
	 * ----------------------------------------------------------------------------- */

	static PyObject *Swig_This_global = NULL;

	SWIGRUNTIME PyObject *
		SWIG_This(void)
	{
		if (Swig_This_global == NULL)
			Swig_This_global = SWIG_Python_str_FromChar("this");
		return Swig_This_global;
	}

	/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

	/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

	SWIGRUNTIME SwigPyObject *
		SWIG_Python_GetSwigThis(PyObject *pyobj)
	{
		PyObject *obj;

		if (SwigPyObject_Check(pyobj))
			return (SwigPyObject *)pyobj;

#ifdef SWIGPYTHON_BUILTIN
		(void)obj;
# ifdef PyWeakref_CheckProxy
		if (PyWeakref_CheckProxy(pyobj)) {
			pyobj = PyWeakref_GET_OBJECT(pyobj);
			if (pyobj && SwigPyObject_Check(pyobj))
				return (SwigPyObject*)pyobj;
		}
# endif
		return NULL;
#else

		obj = 0;

#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
		if (PyInstance_Check(pyobj)) {
			obj = _PyInstance_Lookup(pyobj, SWIG_This());
		}
		else {
			PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
			if (dictptr != NULL) {
				PyObject *dict = *dictptr;
				obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
			}
			else {
#ifdef PyWeakref_CheckProxy
				if (PyWeakref_CheckProxy(pyobj)) {
					PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
					return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
				}
#endif
				obj = PyObject_GetAttr(pyobj, SWIG_This());
				if (obj) {
					Py_DECREF(obj);
				}
				else {
					if (PyErr_Occurred()) PyErr_Clear();
					return 0;
				}
			}
		}
#else
		obj = PyObject_GetAttr(pyobj, SWIG_This());
		if (obj) {
			Py_DECREF(obj);
		}
		else {
			if (PyErr_Occurred()) PyErr_Clear();
			return 0;
		}
#endif
		if (obj && !SwigPyObject_Check(obj)) {
			/* a PyObject is called 'this', try to get the 'real this'
			   SwigPyObject from it */
			return SWIG_Python_GetSwigThis(obj);
		}
		return (SwigPyObject *)obj;
#endif
	}

	/* Acquire a pointer value */

	SWIGRUNTIME int
		SWIG_Python_AcquirePtr(PyObject *obj, int own) {
		if (own == SWIG_POINTER_OWN) {
			SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
			if (sobj) {
				int oldown = sobj->own;
				sobj->own = own;
				return oldown;
			}
		}
		return 0;
	}

	/* Convert a pointer value */

	SWIGRUNTIME int
		SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
		int res;
		SwigPyObject *sobj;
		int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

		if (!obj)
			return SWIG_ERROR;
		if (obj == Py_None && !implicit_conv) {
			if (ptr)
				*ptr = 0;
			return (flags & SWIG_POINTER_NO_NULL) ? SWIG_NullReferenceError : SWIG_OK;
		}

		res = SWIG_ERROR;

		sobj = SWIG_Python_GetSwigThis(obj);
		if (own)
			*own = 0;
		while (sobj) {
			void *vptr = sobj->ptr;
			if (ty) {
				swig_type_info *to = sobj->ty;
				if (to == ty) {
					/* no type cast needed */
					if (ptr) *ptr = vptr;
					break;
				}
				else {
					swig_cast_info *tc = SWIG_TypeCheck(to->name, ty);
					if (!tc) {
						sobj = (SwigPyObject *)sobj->next;
					}
					else {
						if (ptr) {
							int newmemory = 0;
							*ptr = SWIG_TypeCast(tc, vptr, &newmemory);
							if (newmemory == SWIG_CAST_NEW_MEMORY) {
								assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
								if (own)
									*own = *own | SWIG_CAST_NEW_MEMORY;
							}
						}
						break;
					}
				}
			}
			else {
				if (ptr) *ptr = vptr;
				break;
			}
		}
		if (sobj) {
			if (own)
				*own = *own | sobj->own;
			if (flags & SWIG_POINTER_DISOWN) {
				sobj->own = 0;
			}
			res = SWIG_OK;
		}
		else {
			if (implicit_conv) {
				SwigPyClientData *data = ty ? (SwigPyClientData *)ty->clientdata : 0;
				if (data && !data->implicitconv) {
					PyObject *klass = data->klass;
					if (klass) {
						PyObject *impconv;
						data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
						impconv = SWIG_Python_CallFunctor(klass, obj);
						data->implicitconv = 0;
						if (PyErr_Occurred()) {
							PyErr_Clear();
							impconv = 0;
						}
						if (impconv) {
							SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
							if (iobj) {
								void *vptr;
								res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
								if (SWIG_IsOK(res)) {
									if (ptr) {
										*ptr = vptr;
										/* transfer the ownership to 'ptr' */
										iobj->own = 0;
										res = SWIG_AddCast(res);
										res = SWIG_AddNewMask(res);
									}
									else {
										res = SWIG_AddCast(res);
									}
								}
							}
							Py_DECREF(impconv);
						}
					}
				}
				if (!SWIG_IsOK(res) && obj == Py_None) {
					if (ptr)
						*ptr = 0;
					if (PyErr_Occurred())
						PyErr_Clear();
					res = SWIG_OK;
				}
			}
		}
		return res;
	}

	/* Convert a function ptr value */

	SWIGRUNTIME int
		SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
		if (!PyCFunction_Check(obj)) {
			return SWIG_ConvertPtr(obj, ptr, ty, 0);
		}
		else {
			void *vptr = 0;
			swig_cast_info *tc;

			/* here we get the method pointer for callbacks */
			const char *doc = (((PyCFunctionObject *)obj)->m_ml->ml_doc);
			const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
			if (desc)
				desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
			if (!desc)
				return SWIG_ERROR;
			tc = SWIG_TypeCheck(desc, ty);
			if (tc) {
				int newmemory = 0;
				*ptr = SWIG_TypeCast(tc, vptr, &newmemory);
				assert(!newmemory); /* newmemory handling not yet implemented */
			}
			else {
				return SWIG_ERROR;
			}
			return SWIG_OK;
		}
	}

	/* Convert a packed pointer value */

	SWIGRUNTIME int
		SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
		swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
		if (!to) return SWIG_ERROR;
		if (ty) {
			if (to != ty) {
				/* check type cast? */
				swig_cast_info *tc = SWIG_TypeCheck(to->name, ty);
				if (!tc) return SWIG_ERROR;
			}
		}
		return SWIG_OK;
	}

	/* -----------------------------------------------------------------------------
	 * Create a new pointer object
	 * ----------------------------------------------------------------------------- */

	 /*
	   Create a new instance object, without calling __init__, and set the
	   'this' attribute.
	 */

	SWIGRUNTIME PyObject*
		SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
	{
		PyObject *inst = 0;
		PyObject *newraw = data->newraw;
		if (newraw) {
			inst = PyObject_Call(newraw, data->newargs, NULL);
			if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
				PyObject **dictptr = _PyObject_GetDictPtr(inst);
				if (dictptr != NULL) {
					PyObject *dict = *dictptr;
					if (dict == NULL) {
						dict = PyDict_New();
						*dictptr = dict;
						PyDict_SetItem(dict, SWIG_This(), swig_this);
					}
				}
#else
				if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
					Py_DECREF(inst);
					inst = 0;
				}
#endif
			}
		}
		else {
#if PY_VERSION_HEX >= 0x03000000
			PyObject *empty_args = PyTuple_New(0);
			if (empty_args) {
				PyObject *empty_kwargs = PyDict_New();
				if (empty_kwargs) {
					inst = ((PyTypeObject *)data->newargs)->tp_new((PyTypeObject *)data->newargs, empty_args, empty_kwargs);
					Py_DECREF(empty_kwargs);
					if (inst) {
						if (PyObject_SetAttr(inst, SWIG_This(), swig_this) == -1) {
							Py_DECREF(inst);
							inst = 0;
						}
						else {
							Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
						}
					}
				}
				Py_DECREF(empty_args);
			}
#else
			PyObject *dict = PyDict_New();
			if (dict) {
				PyDict_SetItem(dict, SWIG_This(), swig_this);
				inst = PyInstance_NewRaw(data->newargs, dict);
				Py_DECREF(dict);
			}
#endif
		}
		return inst;
	}

	SWIGRUNTIME int
		SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
	{
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
		PyObject **dictptr = _PyObject_GetDictPtr(inst);
		if (dictptr != NULL) {
			PyObject *dict = *dictptr;
			if (dict == NULL) {
				dict = PyDict_New();
				*dictptr = dict;
			}
			return PyDict_SetItem(dict, SWIG_This(), swig_this);
		}
#endif
		return PyObject_SetAttr(inst, SWIG_This(), swig_this);
	}


	SWIGINTERN PyObject *
		SWIG_Python_InitShadowInstance(PyObject *args) {
		PyObject *obj[2];
		if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
			return NULL;
		}
		else {
			SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
			if (sthis) {
				SwigPyObject_append((PyObject*)sthis, obj[1]);
			}
			else {
				if (SWIG_Python_SetSwigThis(obj[0], obj[1]) != 0)
					return NULL;
			}
			return SWIG_Py_Void();
		}
	}

	/* Create a new pointer object */

	SWIGRUNTIME PyObject *
		SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
		SwigPyClientData *clientdata;
		PyObject * robj;
		int own;

		if (!ptr)
			return SWIG_Py_Void();

		clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
		own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
		if (clientdata && clientdata->pytype) {
			SwigPyObject *newobj;
			if (flags & SWIG_BUILTIN_TP_INIT) {
				newobj = (SwigPyObject*)self;
				if (newobj->ptr) {
					PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
					while (newobj->next)
						newobj = (SwigPyObject *)newobj->next;
					newobj->next = next_self;
					newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
					newobj->dict = 0;
#endif
				}
			}
			else {
				newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
				newobj->dict = 0;
#endif
			}
			if (newobj) {
				newobj->ptr = ptr;
				newobj->ty = type;
				newobj->own = own;
				newobj->next = 0;
				return (PyObject*)newobj;
			}
			return SWIG_Py_Void();
		}

		assert(!(flags & SWIG_BUILTIN_TP_INIT));

		robj = SwigPyObject_New(ptr, type, own);
		if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
			PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
			Py_DECREF(robj);
			robj = inst;
		}
		return robj;
	}

	/* Create a new packed object */

	SWIGRUNTIMEINLINE PyObject *
		SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
		return ptr ? SwigPyPacked_New((void *)ptr, sz, type) : SWIG_Py_Void();
	}

	/* -----------------------------------------------------------------------------*
	 *  Get type list
	 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
	void *SWIG_ReturnGlobalTypeList(void *);
#endif

	SWIGRUNTIME swig_module_info *
		SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
		static void *type_pointer = (void *)0;
		/* first check if module already created */
		if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
			type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
			type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
			if (PyErr_Occurred()) {
				PyErr_Clear();
				type_pointer = (void *)0;
			}
#endif
		}
		return (swig_module_info *)type_pointer;
	}

	SWIGRUNTIME void
		SWIG_Python_DestroyModule(PyObject *obj)
	{
		swig_module_info *swig_module = (swig_module_info *)PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
		swig_type_info **types = swig_module->types;
		size_t i;
		for (i = 0; i < swig_module->size; ++i) {
			swig_type_info *ty = types[i];
			if (ty->owndata) {
				SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
				if (data) SwigPyClientData_Del(data);
			}
		}
		Py_DECREF(SWIG_This());
		Swig_This_global = NULL;
	}

	SWIGRUNTIME void
		SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
		/* Add a dummy module object into sys.modules */
		PyObject *module = PyImport_AddModule("swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
		static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
		PyObject *module = Py_InitModule("swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
		PyObject *pointer = PyCapsule_New((void *)swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
		if (pointer && module) {
			PyModule_AddObject(module, "type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
		}
		else {
			Py_XDECREF(pointer);
		}
	}

	/* The python cached type query */
	SWIGRUNTIME PyObject *
		SWIG_Python_TypeCache(void) {
		static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
		return cache;
	}

	SWIGRUNTIME swig_type_info *
		SWIG_Python_TypeQuery(const char *type)
	{
		PyObject *cache = SWIG_Python_TypeCache();
		PyObject *key = SWIG_Python_str_FromChar(type);
		PyObject *obj = PyDict_GetItem(cache, key);
		swig_type_info *descriptor;
		if (obj) {
			descriptor = (swig_type_info *)PyCapsule_GetPointer(obj, NULL);
		}
		else {
			swig_module_info *swig_module = SWIG_GetModule(0);
			descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
			if (descriptor) {
				obj = PyCapsule_New((void*)descriptor, NULL, NULL);
				PyDict_SetItem(cache, key, obj);
				Py_DECREF(obj);
			}
		}
		Py_DECREF(key);
		return descriptor;
	}

	/*
	   For backward compatibility only
	*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

	SWIGRUNTIME int
		SWIG_Python_AddErrMesg(const char* mesg, int infront)
	{
		if (PyErr_Occurred()) {
			PyObject *type = 0;
			PyObject *value = 0;
			PyObject *traceback = 0;
			PyErr_Fetch(&type, &value, &traceback);
			if (value) {
				PyObject *old_str = PyObject_Str(value);
				const char *tmp = SWIG_Python_str_AsChar(old_str);
				const char *errmesg = tmp ? tmp : "Invalid error message";
				Py_XINCREF(type);
				PyErr_Clear();
				if (infront) {
					PyErr_Format(type, "%s %s", mesg, errmesg);
				}
				else {
					PyErr_Format(type, "%s %s", errmesg, mesg);
				}
				SWIG_Python_str_DelForPy3(tmp);
				Py_DECREF(old_str);
			}
			return 1;
		}
		else {
			return 0;
		}
	}

	SWIGRUNTIME int
		SWIG_Python_ArgFail(int argnum)
	{
		if (PyErr_Occurred()) {
			/* add information about failing argument */
			char mesg[256];
			PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
			return SWIG_Python_AddErrMesg(mesg, 1);
		}
		else {
			return 0;
		}
	}

	SWIGRUNTIMEINLINE const char *
		SwigPyObject_GetDesc(PyObject *self)
	{
		SwigPyObject *v = (SwigPyObject *)self;
		swig_type_info *ty = v ? v->ty : 0;
		return ty ? ty->str : "";
	}

	SWIGRUNTIME void
		SWIG_Python_TypeError(const char *type, PyObject *obj)
	{
		if (type) {
#if defined(SWIG_COBJECT_TYPES)
			if (obj && SwigPyObject_Check(obj)) {
				const char *otype = (const char *)SwigPyObject_GetDesc(obj);
				if (otype) {
					PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
						type, otype);
					return;
				}
			}
			else
#endif      
			{
				const char *otype = (obj ? obj->ob_type->tp_name : 0);
				if (otype) {
					PyObject *str = PyObject_Str(obj);
					const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
					if (cstr) {
						PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
							type, otype, cstr);
						SWIG_Python_str_DelForPy3(cstr);
					}
					else {
						PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
							type, otype);
					}
					Py_XDECREF(str);
					return;
				}
			}
			PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
		}
		else {
			PyErr_Format(PyExc_TypeError, "unexpected type is received");
		}
	}


	/* Convert a pointer value, signal an exception on a type mismatch */
	SWIGRUNTIME void *
		SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
		void *result;
		if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
			PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
			if (flags) {
				SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
				SWIG_Python_ArgFail(argnum);
			}
#endif
		}
		return result;
	}

#ifdef SWIGPYTHON_BUILTIN
	SWIGRUNTIME int
		SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
		PyTypeObject *tp = obj->ob_type;
		PyObject *descr;
		PyObject *encoded_name;
		descrsetfunc f;
		int res = -1;

# ifdef Py_USING_UNICODE
		if (PyString_Check(name)) {
			name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
			if (!name)
				return -1;
		}
		else if (!PyUnicode_Check(name))
# else
		if (!PyString_Check(name))
# endif
		{
			PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
			return -1;
		}
		else {
			Py_INCREF(name);
		}

		if (!tp->tp_dict) {
			if (PyType_Ready(tp) < 0)
				goto done;
		}

		descr = _PyType_Lookup(tp, name);
		f = NULL;
		if (descr != NULL)
			f = descr->ob_type->tp_descr_set;
		if (!f) {
			if (PyString_Check(name)) {
				encoded_name = name;
				Py_INCREF(name);
			}
			else {
				encoded_name = PyUnicode_AsUTF8String(name);
				if (!encoded_name)
					return -1;
			}
			PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
			Py_DECREF(encoded_name);
		}
		else {
			res = f(descr, obj, value);
		}

	done:
		Py_DECREF(name);
		return res;
	}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



#ifdef __cplusplus
extern "C" {
#endif

	/* Method creation and docstring support functions */

	SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name);
	SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);
	SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func);

#ifdef __cplusplus
}
#endif


#define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_AL__Math__DSP__DigitalFilter swig_types[0]
#define SWIGTYPE_p_AL__Math__DSP__PIDController swig_types[1]
#define SWIGTYPE_p_AL__Math__Displacement swig_types[2]
#define SWIGTYPE_p_AL__Math__HalfLine swig_types[3]
#define SWIGTYPE_p_AL__Math__HalfSpace swig_types[4]
#define SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor swig_types[5]
#define SWIGTYPE_p_AL__Math__OccupancyMapParams swig_types[6]
#define SWIGTYPE_p_AL__Math__Pill swig_types[7]
#define SWIGTYPE_p_AL__Math__Plane swig_types[8]
#define SWIGTYPE_p_AL__Math__Point2Di swig_types[9]
#define SWIGTYPE_p_AL__Math__Pose2D swig_types[10]
#define SWIGTYPE_p_AL__Math__Pose2Di swig_types[11]
#define SWIGTYPE_p_AL__Math__Position2D swig_types[12]
#define SWIGTYPE_p_AL__Math__Position3D swig_types[13]
#define SWIGTYPE_p_AL__Math__Position6D swig_types[14]
#define SWIGTYPE_p_AL__Math__PositionAndVelocity swig_types[15]
#define SWIGTYPE_p_AL__Math__Quaternion swig_types[16]
#define SWIGTYPE_p_AL__Math__Rectangle swig_types[17]
#define SWIGTYPE_p_AL__Math__Rotation swig_types[18]
#define SWIGTYPE_p_AL__Math__Rotation3D swig_types[19]
#define SWIGTYPE_p_AL__Math__RoundedRectangle swig_types[20]
#define SWIGTYPE_p_AL__Math__Shape3D swig_types[21]
#define SWIGTYPE_p_AL__Math__Shape3DVisitor swig_types[22]
#define SWIGTYPE_p_AL__Math__Sphere swig_types[23]
#define SWIGTYPE_p_AL__Math__Transform swig_types[24]
#define SWIGTYPE_p_AL__Math__TransformAndVelocity6D swig_types[25]
#define SWIGTYPE_p_AL__Math__Velocity3D swig_types[26]
#define SWIGTYPE_p_AL__Math__Velocity6D swig_types[27]
#define SWIGTYPE_p_allocator_type swig_types[28]
#define SWIGTYPE_p_char swig_types[29]
#define SWIGTYPE_p_difference_type swig_types[30]
#define SWIGTYPE_p_float swig_types[31]
#define SWIGTYPE_p_p_PyObject swig_types[32]
#define SWIGTYPE_p_size_type swig_types[33]
#define SWIGTYPE_p_std__allocatorT_AL__Math__Pose2D_t swig_types[34]
#define SWIGTYPE_p_std__allocatorT_AL__Math__Position2D_t swig_types[35]
#define SWIGTYPE_p_std__allocatorT_AL__Math__Position6D_t swig_types[36]
#define SWIGTYPE_p_std__allocatorT_float_t swig_types[37]
#define SWIGTYPE_p_std__bitsetT_6_t swig_types[38]
#define SWIGTYPE_p_std__invalid_argument swig_types[39]
#define SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t swig_types[40]
#define SWIGTYPE_p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t swig_types[41]
#define SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t swig_types[42]
#define SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t swig_types[43]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t swig_types[44]
#define SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator swig_types[45]
#define SWIGTYPE_p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t swig_types[46]
#define SWIGTYPE_p_swig__SwigPyIterator swig_types[47]
#define SWIGTYPE_p_value_type swig_types[48]
static swig_type_info *swig_types[50];
static swig_module_info swig_module = { swig_types, 49, 0, 0, 0, 0 };
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#ifdef SWIG_TypeQuery
# undef SWIG_TypeQuery
#endif
#define SWIG_TypeQuery SWIG_Python_TypeQuery

/*-----------------------------------------------
			  @(target):= _almathswig.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__almathswig

#else
#  define SWIG_init    init_almathswig

#endif
#define SWIG_name    "_almathswig"

#define SWIGVERSION 0x040002 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
	class SwigPtr_PyObject {
	protected:
		PyObject *_obj;

	public:
		SwigPtr_PyObject() :_obj(0)
		{
		}

		SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
		{
			SWIG_PYTHON_THREAD_BEGIN_BLOCK;
			Py_XINCREF(_obj);
			SWIG_PYTHON_THREAD_END_BLOCK;
		}

		SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
		{
			if (initial_ref) {
				SWIG_PYTHON_THREAD_BEGIN_BLOCK;
				Py_XINCREF(_obj);
				SWIG_PYTHON_THREAD_END_BLOCK;
			}
		}

		SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item)
		{
			SWIG_PYTHON_THREAD_BEGIN_BLOCK;
			Py_XINCREF(item._obj);
			Py_XDECREF(_obj);
			_obj = item._obj;
			SWIG_PYTHON_THREAD_END_BLOCK;
			return *this;
		}

		~SwigPtr_PyObject()
		{
			SWIG_PYTHON_THREAD_BEGIN_BLOCK;
			Py_XDECREF(_obj);
			SWIG_PYTHON_THREAD_END_BLOCK;
		}

		operator PyObject *() const
		{
			return _obj;
		}

		PyObject *operator->() const
		{
			return _obj;
		}
	};
}


namespace swig {
	struct SwigVar_PyObject : SwigPtr_PyObject {
		SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }

		SwigVar_PyObject & operator = (PyObject* obj)
		{
			Py_XDECREF(_obj);
			_obj = obj;
			return *this;
		}
	};
}


#include <sstream>
#include "almath/dsp/digitalfilter.h"
#include "almath/dsp/pidcontroller.h"

#include "almath/types/alaxismask.h"

#include "almath/types/alpose2d.h"
#include "almath/types/alposition2d.h"
#include "almath/types/alposition3d.h"
#include "almath/types/alposition6d.h"
#include "almath/types/alpositionandvelocity.h"
#include "almath/types/alquaternion.h"
#include "almath/types/aldisplacement.h"

#include "almath/types/alrotation.h"
#include "almath/types/alrotation3d.h"

#include "almath/types/altransform.h"

#include "almath/types/alvelocity3d.h"
#include "almath/types/alvelocity6d.h"

#include "almath/types/altransformandvelocity6d.h"

#include "almath/tools/aldubinscurve.h"
#include "almath/tools/altrigonometry.h"
#include "almath/tools/avoidfootcollision.h"
#include "almath/tools/altransformhelpers.h"
#include "almath/tools/almath.h"
#include "almath/types/occupancymapparams.h"

#include "almath/geometrics/shapes3d.h"

// forward-declare function that swig will create (thanks to the %extend
// below) and that we use to print some std::vector
static char * AL_Math_Position2D___repr__(AL::Math::Position2D *);
static char * AL_Math_Pose2D___repr__(AL::Math::Pose2D *);
static char * AL_Math_Position6D___repr__(AL::Math::Position6D *);


#include <iostream>

#if PY_VERSION_HEX >= 0x03020000
# define SWIGPY_SLICE_ARG(obj) ((PyObject*) (obj))
#else
# define SWIGPY_SLICE_ARG(obj) ((PySliceObject*) (obj))
#endif


#include <typeinfo>
#include <stdexcept>


#if defined(__GNUC__)
#  if __GNUC__ == 2 && __GNUC_MINOR <= 96
#     define SWIG_STD_NOMODERN_STL
#  endif
#endif


#include <string>


#include <stddef.h>


namespace swig {
	struct stop_iteration {
	};

	struct SwigPyIterator {
	private:
		SwigPtr_PyObject _seq;

	protected:
		SwigPyIterator(PyObject *seq) : _seq(seq)
		{
		}

	public:
		virtual ~SwigPyIterator() {}

		// Access iterator method, required by Python
		virtual PyObject *value() const = 0;

		// Forward iterator method, required by Python
		virtual SwigPyIterator *incr(size_t n = 1) = 0;

		// Backward iterator method, very common in C++, but not required in Python
		virtual SwigPyIterator *decr(size_t /*n*/ = 1)
		{
			throw stop_iteration();
		}

		// Random access iterator methods, but not required in Python
		virtual ptrdiff_t distance(const SwigPyIterator &/*x*/) const
		{
			throw std::invalid_argument("operation not supported");
		}

		virtual bool equal(const SwigPyIterator &/*x*/) const
		{
			throw std::invalid_argument("operation not supported");
		}

		// C++ common/needed methods
		virtual SwigPyIterator *copy() const = 0;

		PyObject *next()
		{
			SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
			PyObject *obj = value();
			incr();
			SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads
			return obj;
		}

		/* Make an alias for Python 3.x */
		PyObject *__next__()
		{
			return next();
		}

		PyObject *previous()
		{
			SWIG_PYTHON_THREAD_BEGIN_BLOCK; // disable threads       
			decr();
			PyObject *obj = value();
			SWIG_PYTHON_THREAD_END_BLOCK; // re-enable threads       
			return obj;
		}

		SwigPyIterator *advance(ptrdiff_t n)
		{
			return  (n > 0) ? incr(n) : decr(-n);
		}

		bool operator == (const SwigPyIterator& x)  const
		{
			return equal(x);
		}

		bool operator != (const SwigPyIterator& x) const
		{
			return !operator==(x);
		}

		SwigPyIterator& operator += (ptrdiff_t n)
		{
			return *advance(n);
		}

		SwigPyIterator& operator -= (ptrdiff_t n)
		{
			return *advance(-n);
		}

		SwigPyIterator* operator + (ptrdiff_t n) const
		{
			return copy()->advance(n);
		}

		SwigPyIterator* operator - (ptrdiff_t n) const
		{
			return copy()->advance(-n);
		}

		ptrdiff_t operator - (const SwigPyIterator& x) const
		{
			return x.distance(*this);
		}

		static swig_type_info* descriptor() {
			static int init = 0;
			static swig_type_info* desc = 0;
			if (!init) {
				desc = SWIG_TypeQuery("swig::SwigPyIterator *");
				init = 1;
			}
			return desc;
		}
	};

#if defined(SWIGPYTHON_BUILTIN)
	inline PyObject* make_output_iterator_builtin(PyObject *pyself)
	{
		Py_INCREF(pyself);
		return pyself;
	}
#endif
}


SWIGINTERN int
SWIG_AsVal_double(PyObject *obj, double *val)
{
	int res = SWIG_TypeError;
	if (PyFloat_Check(obj)) {
		if (val) *val = PyFloat_AsDouble(obj);
		return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
	}
	else if (PyInt_Check(obj)) {
		if (val) *val = (double)PyInt_AsLong(obj);
		return SWIG_OK;
#endif
	}
	else if (PyLong_Check(obj)) {
		double v = PyLong_AsDouble(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = v;
			return SWIG_OK;
		}
		else {
			PyErr_Clear();
		}
	}
#ifdef SWIG_PYTHON_CAST_MODE
	{
		int dispatch = 0;
		double d = PyFloat_AsDouble(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = d;
			return SWIG_AddCast(SWIG_OK);
		}
		else {
			PyErr_Clear();
		}
		if (!dispatch) {
			long v = PyLong_AsLong(obj);
			if (!PyErr_Occurred()) {
				if (val) *val = v;
				return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
			}
			else {
				PyErr_Clear();
			}
		}
	}
#endif
	return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
	double x = *d;
	if ((min <= x && x <= max)) {
		double fx = floor(x);
		double cx = ceil(x);
		double rd = ((x - fx) < 0.5) ? fx : cx; /* simple rint */
		if ((errno == EDOM) || (errno == ERANGE)) {
			errno = 0;
		}
		else {
			double summ, reps, diff;
			if (rd < x) {
				diff = x - rd;
			}
			else if (rd > x) {
				diff = rd - x;
			}
			else {
				return 1;
			}
			summ = rd + x;
			reps = diff / summ;
			if (reps < 8 * DBL_EPSILON) {
				*d = rd;
				return 1;
			}
		}
	}
	return 0;
}


SWIGINTERN int
SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val)
{
#if PY_VERSION_HEX < 0x03000000
	if (PyInt_Check(obj)) {
		long v = PyInt_AsLong(obj);
		if (v >= 0) {
			if (val) *val = v;
			return SWIG_OK;
		}
		else {
			return SWIG_OverflowError;
		}
	}
	else
#endif
		if (PyLong_Check(obj)) {
			unsigned long v = PyLong_AsUnsignedLong(obj);
			if (!PyErr_Occurred()) {
				if (val) *val = v;
				return SWIG_OK;
			}
			else {
				PyErr_Clear();
				return SWIG_OverflowError;
			}
		}
#ifdef SWIG_PYTHON_CAST_MODE
	{
		int dispatch = 0;
		unsigned long v = PyLong_AsUnsignedLong(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = v;
			return SWIG_AddCast(SWIG_OK);
		}
		else {
			PyErr_Clear();
		}
		if (!dispatch) {
			double d;
			int res = SWIG_AddCast(SWIG_AsVal_double(obj, &d));
			if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, ULONG_MAX)) {
				if (val) *val = (unsigned long)(d);
				return res;
			}
		}
	}
#endif
	return SWIG_TypeError;
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


#if defined(LLONG_MAX) && !defined(SWIG_LONG_LONG_AVAILABLE)
#  define SWIG_LONG_LONG_AVAILABLE
#endif


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_unsigned_SS_long_SS_long(PyObject *obj, unsigned long long *val)
{
	int res = SWIG_TypeError;
	if (PyLong_Check(obj)) {
		unsigned long long v = PyLong_AsUnsignedLongLong(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = v;
			return SWIG_OK;
		}
		else {
			PyErr_Clear();
			res = SWIG_OverflowError;
		}
	}
	else {
		unsigned long v;
		res = SWIG_AsVal_unsigned_SS_long(obj, &v);
		if (SWIG_IsOK(res)) {
			if (val) *val = v;
			return res;
		}
	}
#ifdef SWIG_PYTHON_CAST_MODE
	{
		const double mant_max = 1LL << DBL_MANT_DIG;
		double d;
		res = SWIG_AsVal_double(obj, &d);
		if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, 0, mant_max))
			return SWIG_OverflowError;
		if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, 0, mant_max)) {
			if (val) *val = (unsigned long long)(d);
			return SWIG_AddCast(res);
		}
		res = SWIG_TypeError;
	}
#endif
	return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_size_t(PyObject * obj, size_t *val)
{
	int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
	if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
		unsigned long v;
		res = SWIG_AsVal_unsigned_SS_long(obj, val ? &v : 0);
		if (SWIG_IsOK(res) && val) *val = static_cast<size_t>(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
	}
	else if (sizeof(size_t) <= sizeof(unsigned long long)) {
		unsigned long long v;
		res = SWIG_AsVal_unsigned_SS_long_SS_long(obj, val ? &v : 0);
		if (SWIG_IsOK(res) && val) *val = static_cast<size_t>(v);
	}
#endif
	return res;
}


#define SWIG_From_long   PyInt_FromLong 


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject*
SWIG_From_long_SS_long(long long value)
{
	return ((value < LONG_MIN) || (value > LONG_MAX)) ?
		PyLong_FromLongLong(value) : PyInt_FromLong(static_cast<long>(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_ptrdiff_t(ptrdiff_t value)
{
#ifdef SWIG_LONG_LONG_AVAILABLE
	if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
		return SWIG_From_long(static_cast<long>(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
	}
	else {
		/* assume sizeof(ptrdiff_t) <= sizeof(long long) */
		return SWIG_From_long_SS_long(static_cast<long long>(value));
	}
#endif
}


SWIGINTERNINLINE PyObject*
SWIG_From_bool(bool value)
{
	return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN int
SWIG_AsVal_long(PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
	if (PyInt_Check(obj)) {
		if (val) *val = PyInt_AsLong(obj);
		return SWIG_OK;
	}
	else
#endif
		if (PyLong_Check(obj)) {
			long v = PyLong_AsLong(obj);
			if (!PyErr_Occurred()) {
				if (val) *val = v;
				return SWIG_OK;
			}
			else {
				PyErr_Clear();
				return SWIG_OverflowError;
			}
		}
#ifdef SWIG_PYTHON_CAST_MODE
	{
		int dispatch = 0;
		long v = PyInt_AsLong(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = v;
			return SWIG_AddCast(SWIG_OK);
		}
		else {
			PyErr_Clear();
		}
		if (!dispatch) {
			double d;
			int res = SWIG_AddCast(SWIG_AsVal_double(obj, &d));
			if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
				if (val) *val = (long)(d);
				return res;
			}
		}
	}
#endif
	return SWIG_TypeError;
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERN int
SWIG_AsVal_long_SS_long(PyObject *obj, long long *val)
{
	int res = SWIG_TypeError;
	if (PyLong_Check(obj)) {
		long long v = PyLong_AsLongLong(obj);
		if (!PyErr_Occurred()) {
			if (val) *val = v;
			return SWIG_OK;
		}
		else {
			PyErr_Clear();
			res = SWIG_OverflowError;
		}
	}
	else {
		long v;
		res = SWIG_AsVal_long(obj, &v);
		if (SWIG_IsOK(res)) {
			if (val) *val = v;
			return res;
		}
	}
#ifdef SWIG_PYTHON_CAST_MODE
	{
		const double mant_max = 1LL << DBL_MANT_DIG;
		const double mant_min = -mant_max;
		double d;
		res = SWIG_AsVal_double(obj, &d);
		if (SWIG_IsOK(res) && !SWIG_CanCastAsInteger(&d, mant_min, mant_max))
			return SWIG_OverflowError;
		if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, mant_min, mant_max)) {
			if (val) *val = (long long)(d);
			return SWIG_AddCast(res);
		}
		res = SWIG_TypeError;
	}
#endif
	return res;
}
#endif


SWIGINTERNINLINE int
SWIG_AsVal_ptrdiff_t(PyObject * obj, ptrdiff_t *val)
{
	int res = SWIG_TypeError;
#ifdef SWIG_LONG_LONG_AVAILABLE
	if (sizeof(ptrdiff_t) <= sizeof(long)) {
#endif
		long v;
		res = SWIG_AsVal_long(obj, val ? &v : 0);
		if (SWIG_IsOK(res) && val) *val = static_cast<ptrdiff_t>(v);
#ifdef SWIG_LONG_LONG_AVAILABLE
	}
	else if (sizeof(ptrdiff_t) <= sizeof(long long)) {
		long long v;
		res = SWIG_AsVal_long_SS_long(obj, val ? &v : 0);
		if (SWIG_IsOK(res) && val) *val = static_cast<ptrdiff_t>(v);
	}
#endif
	return res;
}


#include <algorithm>


#include <vector>


namespace swig {
	template <class Type>
	struct noconst_traits {
		typedef Type noconst_type;
	};

	template <class Type>
	struct noconst_traits<const Type> {
		typedef Type noconst_type;
	};

	/*
	  type categories
	*/
	struct pointer_category { };
	struct value_category { };

	/*
	  General traits that provides type_name and type_info
	*/
	template <class Type> struct traits { };

	template <class Type>
	inline const char* type_name() {
		return traits<typename noconst_traits<Type >::noconst_type >::type_name();
	}

	template <class Type> struct traits_info {
		static swig_type_info *type_query(std::string name) {
			name += " *";
			return SWIG_TypeQuery(name.c_str());
		}
		static swig_type_info *type_info() {
			static swig_type_info *info = type_query(type_name<Type>());
			return info;
		}
	};

	/*
	  Partial specialization for pointers (traits_info)
	*/
	template <class Type> struct traits_info<Type *> {
		static swig_type_info *type_query(std::string name) {
			name += " *";
			return SWIG_TypeQuery(name.c_str());
		}
		static swig_type_info *type_info() {
			static swig_type_info *info = type_query(type_name<Type>());
			return info;
		}
	};

	template <class Type>
	inline swig_type_info *type_info() {
		return traits_info<Type>::type_info();
	}

	/*
	  Partial specialization for pointers (traits)
	*/
	template <class Type> struct traits <Type *> {
		typedef pointer_category category;
		static std::string make_ptr_name(const char* name) {
			std::string ptrname = name;
			ptrname += " *";
			return ptrname;
		}
		static const char* type_name() {
			static std::string name = make_ptr_name(swig::type_name<Type>());
			return name.c_str();
		}
	};

	template <class Type, class Category>
	struct traits_as { };

	template <class Type, class Category>
	struct traits_check { };

}


namespace swig {
	/*
	  Traits that provides the from method
	*/
	template <class Type> struct traits_from_ptr {
		static PyObject *from(Type *val, int owner = 0) {
			return SWIG_InternalNewPointerObj(val, type_info<Type>(), owner);
		}
	};

	template <class Type> struct traits_from {
		static PyObject *from(const Type& val) {
			return traits_from_ptr<Type>::from(new Type(val), 1);
		}
	};

	template <class Type> struct traits_from<Type *> {
		static PyObject *from(Type* val) {
			return traits_from_ptr<Type>::from(val, 0);
		}
	};

	template <class Type> struct traits_from<const Type *> {
		static PyObject *from(const Type* val) {
			return traits_from_ptr<Type>::from(const_cast<Type*>(val), 0);
		}
	};


	template <class Type>
	inline PyObject *from(const Type& val) {
		return traits_from<Type>::from(val);
	}

	template <class Type>
	inline PyObject *from_ptr(Type* val, int owner) {
		return traits_from_ptr<Type>::from(val, owner);
	}

	/*
	  Traits that provides the asval/as/check method
	*/
	template <class Type>
	struct traits_asptr {
		static int asptr(PyObject *obj, Type **val) {
			int res = SWIG_ERROR;
			swig_type_info *descriptor = type_info<Type>();
			if (val) {
				Type *p = 0;
				int newmem = 0;
				res = descriptor ? SWIG_ConvertPtrAndOwn(obj, (void **)&p, descriptor, 0, &newmem) : SWIG_ERROR;
				if (SWIG_IsOK(res)) {
					if (newmem & SWIG_CAST_NEW_MEMORY) {
						res |= SWIG_NEWOBJMASK;
					}
					*val = p;
				}
			}
			else {
				res = descriptor ? SWIG_ConvertPtr(obj, 0, descriptor, 0) : SWIG_ERROR;
			}
			return res;
		}
	};

	template <class Type>
	inline int asptr(PyObject *obj, Type **vptr) {
		return traits_asptr<Type>::asptr(obj, vptr);
	}

	template <class Type>
	struct traits_asval {
		static int asval(PyObject *obj, Type *val) {
			if (val) {
				Type *p = 0;
				int res = traits_asptr<Type>::asptr(obj, &p);
				if (!SWIG_IsOK(res)) return res;
				if (p) {
					typedef typename noconst_traits<Type>::noconst_type noconst_type;
					*(const_cast<noconst_type*>(val)) = *p;
					if (SWIG_IsNewObj(res)) {
						delete p;
						res = SWIG_DelNewMask(res);
					}
					return res;
				}
				else {
					return SWIG_ERROR;
				}
			}
			else {
				return traits_asptr<Type>::asptr(obj, (Type **)(0));
			}
		}
	};

	template <class Type> struct traits_asval<Type*> {
		static int asval(PyObject *obj, Type **val) {
			if (val) {
				typedef typename noconst_traits<Type>::noconst_type noconst_type;
				noconst_type *p = 0;
				int res = traits_asptr<noconst_type>::asptr(obj, &p);
				if (SWIG_IsOK(res)) {
					*(const_cast<noconst_type**>(val)) = p;
				}
				return res;
			}
			else {
				return traits_asptr<Type>::asptr(obj, (Type **)(0));
			}
		}
	};

	template <class Type>
	inline int asval(PyObject *obj, Type *val) {
		return traits_asval<Type>::asval(obj, val);
	}

	template <class Type>
	struct traits_as<Type, value_category> {
		static Type as(PyObject *obj) {
			Type v;
			int res = asval(obj, &v);
			if (!obj || !SWIG_IsOK(res)) {
				if (!PyErr_Occurred()) {
					::SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
				}
				throw std::invalid_argument("bad type");
			}
			return v;
		}
	};

	template <class Type>
	struct traits_as<Type, pointer_category> {
		static Type as(PyObject *obj) {
			Type *v = 0;
			int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
			if (SWIG_IsOK(res) && v) {
				if (SWIG_IsNewObj(res)) {
					Type r(*v);
					delete v;
					return r;
				}
				else {
					return *v;
				}
			}
			else {
				if (!PyErr_Occurred()) {
					SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
				}
				throw std::invalid_argument("bad type");
			}
		}
	};

	template <class Type>
	struct traits_as<Type*, pointer_category> {
		static Type* as(PyObject *obj) {
			Type *v = 0;
			int res = (obj ? traits_asptr<Type>::asptr(obj, &v) : SWIG_ERROR);
			if (SWIG_IsOK(res)) {
				return v;
			}
			else {
				if (!PyErr_Occurred()) {
					SWIG_Error(SWIG_TypeError, swig::type_name<Type>());
				}
				throw std::invalid_argument("bad type");
			}
		}
	};

	template <class Type>
	inline Type as(PyObject *obj) {
		return traits_as<Type, typename traits<Type>::category>::as(obj);
	}

	template <class Type>
	struct traits_check<Type, value_category> {
		static bool check(PyObject *obj) {
			int res = obj ? asval(obj, (Type *)(0)) : SWIG_ERROR;
			return SWIG_IsOK(res) ? true : false;
		}
	};

	template <class Type>
	struct traits_check<Type, pointer_category> {
		static bool check(PyObject *obj) {
			int res = obj ? asptr(obj, (Type **)(0)) : SWIG_ERROR;
			return SWIG_IsOK(res) ? true : false;
		}
	};

	template <class Type>
	inline bool check(PyObject *obj) {
		return traits_check<Type, typename traits<Type>::category>::check(obj);
	}
}


#include <functional>

namespace std {
	template <>
	struct less <PyObject *>
	{
		bool
			operator()(PyObject * v, PyObject *w) const
		{
			bool res;
			SWIG_PYTHON_THREAD_BEGIN_BLOCK;
			res = PyObject_RichCompareBool(v, w, Py_LT) ? true : false;
			/* This may fall into a case of inconsistent
					 eg. ObjA > ObjX > ObjB
					 but ObjA < ObjB
			*/
			if (PyErr_Occurred() && PyErr_ExceptionMatches(PyExc_TypeError))
			{
				/* Objects can't be compared, this mostly occurred in Python 3.0 */
				/* Compare their ptr directly for a workaround */
				res = (v < w);
				PyErr_Clear();
			}
			SWIG_PYTHON_THREAD_END_BLOCK;
			return res;
		}
	};

	template <>
	struct less <swig::SwigPtr_PyObject>
	{
		bool
			operator()(const swig::SwigPtr_PyObject& v, const swig::SwigPtr_PyObject& w) const
		{
			return std::less<PyObject *>()(v, w);
		}
	};

	template <>
	struct less <swig::SwigVar_PyObject>
	{
		bool
			operator()(const swig::SwigVar_PyObject& v, const swig::SwigVar_PyObject& w) const
		{
			return std::less<PyObject *>()(v, w);
		}
	};

}

namespace swig {
	template <> struct traits<PyObject *> {
		typedef value_category category;
		static const char* type_name() { return "PyObject *"; }
	};

	template <>  struct traits_asval<PyObject * > {
		typedef PyObject * value_type;
		static int asval(PyObject *obj, value_type *val) {
			if (val) *val = obj;
			return SWIG_OK;
		}
	};

	template <>
	struct traits_check<PyObject *, value_category> {
		static bool check(PyObject *) {
			return true;
		}
	};

	template <>  struct traits_from<PyObject *> {
		typedef PyObject * value_type;
		static PyObject *from(const value_type& val) {
			Py_XINCREF(val);
			return val;
		}
	};

}

namespace swig {
	template <class Difference>
	inline size_t
		check_index(Difference i, size_t size, bool insert = false) {
		if (i < 0) {
			if ((size_t)(-i) <= size)
				return (size_t)(i + size);
		}
		else if ((size_t)i < size) {
			return (size_t)i;
		}
		else if (insert && ((size_t)i == size)) {
			return size;
		}
		throw std::out_of_range("index out of range");
	}

	template <class Difference>
	void
		slice_adjust(Difference i, Difference j, Py_ssize_t step, size_t size, Difference &ii, Difference &jj, bool insert = false) {
		if (step == 0) {
			throw std::invalid_argument("slice step cannot be zero");
		}
		else if (step > 0) {
			// Required range: 0 <= i < size, 0 <= j < size, i <= j
			if (i < 0) {
				ii = 0;
			}
			else if (i < (Difference)size) {
				ii = i;
			}
			else if (insert && (i >= (Difference)size)) {
				ii = (Difference)size;
			}
			if (j < 0) {
				jj = 0;
			}
			else {
				jj = (j < (Difference)size) ? j : (Difference)size;
			}
			if (jj < ii)
				jj = ii;
		}
		else {
			// Required range: -1 <= i < size-1, -1 <= j < size-1, i >= j
			if (i < -1) {
				ii = -1;
			}
			else if (i < (Difference)size) {
				ii = i;
			}
			else if (i >= (Difference)(size - 1)) {
				ii = (Difference)(size - 1);
			}
			if (j < -1) {
				jj = -1;
			}
			else {
				jj = (j < (Difference)size) ? j : (Difference)(size - 1);
			}
			if (ii < jj)
				ii = jj;
		}
	}

	template <class Sequence, class Difference>
	inline typename Sequence::iterator
		getpos(Sequence* self, Difference i) {
		typename Sequence::iterator pos = self->begin();
		std::advance(pos, check_index(i, self->size()));
		return pos;
	}

	template <class Sequence, class Difference>
	inline typename Sequence::const_iterator
		cgetpos(const Sequence* self, Difference i) {
		typename Sequence::const_iterator pos = self->begin();
		std::advance(pos, check_index(i, self->size()));
		return pos;
	}

	template <class Sequence>
	inline void
		erase(Sequence* seq, const typename Sequence::iterator& position) {
		seq->erase(position);
	}

	template <class Sequence>
	struct traits_reserve {
		static void reserve(Sequence & /*seq*/, typename Sequence::size_type /*n*/) {
			// This should be specialized for types that support reserve
		}
	};

	template <class Sequence, class Difference>
	inline Sequence*
		getslice(const Sequence* self, Difference i, Difference j, Py_ssize_t step) {
		typename Sequence::size_type size = self->size();
		Difference ii = 0;
		Difference jj = 0;
		swig::slice_adjust(i, j, step, size, ii, jj);

		if (step > 0) {
			typename Sequence::const_iterator sb = self->begin();
			typename Sequence::const_iterator se = self->begin();
			std::advance(sb, ii);
			std::advance(se, jj);
			if (step == 1) {
				return new Sequence(sb, se);
			}
			else {
				Sequence *sequence = new Sequence();
				swig::traits_reserve<Sequence>::reserve(*sequence, (jj - ii + step - 1) / step);
				typename Sequence::const_iterator it = sb;
				while (it != se) {
					sequence->push_back(*it);
					for (Py_ssize_t c = 0; c < step && it != se; ++c)
						it++;
				}
				return sequence;
			}
		}
		else {
			Sequence *sequence = new Sequence();
			swig::traits_reserve<Sequence>::reserve(*sequence, (ii - jj - step - 1) / -step);
			typename Sequence::const_reverse_iterator sb = self->rbegin();
			typename Sequence::const_reverse_iterator se = self->rbegin();
			std::advance(sb, size - ii - 1);
			std::advance(se, size - jj - 1);
			typename Sequence::const_reverse_iterator it = sb;
			while (it != se) {
				sequence->push_back(*it);
				for (Py_ssize_t c = 0; c < -step && it != se; ++c)
					it++;
			}
			return sequence;
		}
	}

	template <class Sequence, class Difference, class InputSeq>
	inline void
		setslice(Sequence* self, Difference i, Difference j, Py_ssize_t step, const InputSeq& is = InputSeq()) {
		typename Sequence::size_type size = self->size();
		Difference ii = 0;
		Difference jj = 0;
		swig::slice_adjust(i, j, step, size, ii, jj, true);
		if (step > 0) {
			if (step == 1) {
				size_t ssize = jj - ii;
				if (ssize <= is.size()) {
					// expanding/staying the same size
					swig::traits_reserve<Sequence>::reserve(*self, self->size() - ssize + is.size());
					typename Sequence::iterator sb = self->begin();
					typename InputSeq::const_iterator isit = is.begin();
					std::advance(sb, ii);
					std::advance(isit, jj - ii);
					self->insert(std::copy(is.begin(), isit, sb), isit, is.end());
				}
				else {
					// shrinking
					typename Sequence::iterator sb = self->begin();
					typename Sequence::iterator se = self->begin();
					std::advance(sb, ii);
					std::advance(se, jj);
					self->erase(sb, se);
					sb = self->begin();
					std::advance(sb, ii);
					self->insert(sb, is.begin(), is.end());
				}
			}
			else {
				size_t replacecount = (jj - ii + step - 1) / step;
				if (is.size() != replacecount) {
					char msg[1024];
					sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
					throw std::invalid_argument(msg);
				}
				typename Sequence::const_iterator isit = is.begin();
				typename Sequence::iterator it = self->begin();
				std::advance(it, ii);
				for (size_t rc = 0; rc < replacecount && it != self->end(); ++rc) {
					*it++ = *isit++;
					for (Py_ssize_t c = 0; c < (step - 1) && it != self->end(); ++c)
						it++;
				}
			}
		}
		else {
			size_t replacecount = (ii - jj - step - 1) / -step;
			if (is.size() != replacecount) {
				char msg[1024];
				sprintf(msg, "attempt to assign sequence of size %lu to extended slice of size %lu", (unsigned long)is.size(), (unsigned long)replacecount);
				throw std::invalid_argument(msg);
			}
			typename Sequence::const_iterator isit = is.begin();
			typename Sequence::reverse_iterator it = self->rbegin();
			std::advance(it, size - ii - 1);
			for (size_t rc = 0; rc < replacecount && it != self->rend(); ++rc) {
				*it++ = *isit++;
				for (Py_ssize_t c = 0; c < (-step - 1) && it != self->rend(); ++c)
					it++;
			}
		}
	}

	template <class Sequence, class Difference>
	inline void
		delslice(Sequence* self, Difference i, Difference j, Py_ssize_t step) {
		typename Sequence::size_type size = self->size();
		Difference ii = 0;
		Difference jj = 0;
		swig::slice_adjust(i, j, step, size, ii, jj, true);
		if (step > 0) {
			typename Sequence::iterator sb = self->begin();
			std::advance(sb, ii);
			if (step == 1) {
				typename Sequence::iterator se = self->begin();
				std::advance(se, jj);
				self->erase(sb, se);
			}
			else {
				typename Sequence::iterator it = sb;
				size_t delcount = (jj - ii + step - 1) / step;
				while (delcount) {
					it = self->erase(it);
					for (Py_ssize_t c = 0; c < (step - 1) && it != self->end(); ++c)
						it++;
					delcount--;
				}
			}
		}
		else {
			typename Sequence::reverse_iterator sb = self->rbegin();
			std::advance(sb, size - ii - 1);
			typename Sequence::reverse_iterator it = sb;
			size_t delcount = (ii - jj - step - 1) / -step;
			while (delcount) {
				it = typename Sequence::reverse_iterator(self->erase((++it).base()));
				for (Py_ssize_t c = 0; c < (-step - 1) && it != self->rend(); ++c)
					it++;
				delcount--;
			}
		}
	}
}


#if defined(__SUNPRO_CC) && defined(_RWSTD_VER)
#  if !defined(SWIG_NO_STD_NOITERATOR_TRAITS_STL)
#    define SWIG_STD_NOITERATOR_TRAITS_STL
#  endif
#endif

#if !defined(SWIG_STD_NOITERATOR_TRAITS_STL)
#include <iterator>
#else
namespace std {
	template <class Iterator>
	struct iterator_traits {
		typedef ptrdiff_t difference_type;
		typedef typename Iterator::value_type value_type;
	};

	template <class Iterator, class Category, class T, class Reference, class Pointer, class Distance>
	struct iterator_traits<__reverse_bi_iterator<Iterator, Category, T, Reference, Pointer, Distance> > {
		typedef Distance difference_type;
		typedef T value_type;
	};

	template <class T>
	struct iterator_traits<T*> {
		typedef T value_type;
		typedef ptrdiff_t difference_type;
	};

	template<typename _InputIterator>
	inline typename iterator_traits<_InputIterator>::difference_type
		distance(_InputIterator __first, _InputIterator __last)
	{
		typename iterator_traits<_InputIterator>::difference_type __n = 0;
		while (__first != __last) {
			++__first; ++__n;
		}
		return __n;
	}
}
#endif


namespace swig {
	template<typename OutIterator>
	class SwigPyIterator_T : public SwigPyIterator
	{
	public:
		typedef OutIterator out_iterator;
		typedef typename std::iterator_traits<out_iterator>::value_type value_type;
		typedef SwigPyIterator_T<out_iterator> self_type;

		SwigPyIterator_T(out_iterator curr, PyObject *seq)
			: SwigPyIterator(seq), current(curr)
		{
		}

		const out_iterator& get_current() const
		{
			return current;
		}


		bool equal(const SwigPyIterator &iter) const
		{
			const self_type *iters = dynamic_cast<const self_type *>(&iter);
			if (iters) {
				return (current == iters->get_current());
			}
			else {
				throw std::invalid_argument("bad iterator type");
			}
		}

		ptrdiff_t distance(const SwigPyIterator &iter) const
		{
			const self_type *iters = dynamic_cast<const self_type *>(&iter);
			if (iters) {
				return std::distance(current, iters->get_current());
			}
			else {
				throw std::invalid_argument("bad iterator type");
			}
		}

	protected:
		out_iterator current;
	};

	template <class ValueType>
	struct from_oper
	{
		typedef const ValueType& argument_type;
		typedef PyObject *result_type;
		result_type operator()(argument_type v) const
		{
			return swig::from(v);
		}
	};

	template<typename OutIterator,
		typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
		typename FromOper = from_oper<ValueType> >
		class SwigPyForwardIteratorOpen_T : public SwigPyIterator_T<OutIterator>
	{
	public:
		FromOper from;
		typedef OutIterator out_iterator;
		typedef ValueType value_type;
		typedef SwigPyIterator_T<out_iterator>  base;
		typedef SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;

		SwigPyForwardIteratorOpen_T(out_iterator curr, PyObject *seq)
			: SwigPyIterator_T<OutIterator>(curr, seq)
		{
		}

		PyObject *value() const {
			return from(static_cast<const value_type&>(*(base::current)));
		}

		SwigPyIterator *copy() const
		{
			return new self_type(*this);
		}

		SwigPyIterator *incr(size_t n = 1)
		{
			while (n--) {
				++base::current;
			}
			return this;
		}

	};

	template<typename OutIterator,
		typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
		typename FromOper = from_oper<ValueType> >
		class SwigPyIteratorOpen_T : public SwigPyForwardIteratorOpen_T<OutIterator, ValueType, FromOper>
	{
	public:
		FromOper from;
		typedef OutIterator out_iterator;
		typedef ValueType value_type;
		typedef SwigPyIterator_T<out_iterator>  base;
		typedef SwigPyIteratorOpen_T<OutIterator, ValueType, FromOper> self_type;

		SwigPyIteratorOpen_T(out_iterator curr, PyObject *seq)
			: SwigPyForwardIteratorOpen_T<OutIterator>(curr, seq)
		{
		}

		SwigPyIterator *decr(size_t n = 1)
		{
			while (n--) {
				--base::current;
			}
			return this;
		}
	};

	template<typename OutIterator,
		typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
		typename FromOper = from_oper<ValueType> >
		class SwigPyForwardIteratorClosed_T : public SwigPyIterator_T<OutIterator>
	{
	public:
		FromOper from;
		typedef OutIterator out_iterator;
		typedef ValueType value_type;
		typedef SwigPyIterator_T<out_iterator>  base;
		typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;

		SwigPyForwardIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
			: SwigPyIterator_T<OutIterator>(curr, seq), begin(first), end(last)
		{
		}

		PyObject *value() const {
			if (base::current == end) {
				throw stop_iteration();
			}
			else {
				return from(static_cast<const value_type&>(*(base::current)));
			}
		}

		SwigPyIterator *copy() const
		{
			return new self_type(*this);
		}

		SwigPyIterator *incr(size_t n = 1)
		{
			while (n--) {
				if (base::current == end) {
					throw stop_iteration();
				}
				else {
					++base::current;
				}
			}
			return this;
		}

	protected:
		out_iterator begin;
		out_iterator end;
	};

	template<typename OutIterator,
		typename ValueType = typename std::iterator_traits<OutIterator>::value_type,
		typename FromOper = from_oper<ValueType> >
		class SwigPyIteratorClosed_T : public SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper>
	{
	public:
		FromOper from;
		typedef OutIterator out_iterator;
		typedef ValueType value_type;
		typedef SwigPyIterator_T<out_iterator>  base;
		typedef SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper> base0;
		typedef SwigPyIteratorClosed_T<OutIterator, ValueType, FromOper> self_type;

		SwigPyIteratorClosed_T(out_iterator curr, out_iterator first, out_iterator last, PyObject *seq)
			: SwigPyForwardIteratorClosed_T<OutIterator, ValueType, FromOper>(curr, first, last, seq)
		{
		}

		SwigPyIterator *decr(size_t n = 1)
		{
			while (n--) {
				if (base::current == base0::begin) {
					throw stop_iteration();
				}
				else {
					--base::current;
				}
			}
			return this;
		}
	};


	template<typename OutIter>
	inline SwigPyIterator*
		make_output_forward_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
	{
		return new SwigPyForwardIteratorClosed_T<OutIter>(current, begin, end, seq);
	}

	template<typename OutIter>
	inline SwigPyIterator*
		make_output_iterator(const OutIter& current, const OutIter& begin, const OutIter& end, PyObject *seq = 0)
	{
		return new SwigPyIteratorClosed_T<OutIter>(current, begin, end, seq);
	}

	template<typename OutIter>
	inline SwigPyIterator*
		make_output_forward_iterator(const OutIter& current, PyObject *seq = 0)
	{
		return new SwigPyForwardIteratorOpen_T<OutIter>(current, seq);
	}

	template<typename OutIter>
	inline SwigPyIterator*
		make_output_iterator(const OutIter& current, PyObject *seq = 0)
	{
		return new SwigPyIteratorOpen_T<OutIter>(current, seq);
	}

}


namespace swig
{
	template <class T>
	struct SwigPySequence_Ref
	{
		SwigPySequence_Ref(PyObject* seq, Py_ssize_t index)
			: _seq(seq), _index(index)
		{
		}

		operator T () const
		{
			swig::SwigVar_PyObject item = PySequence_GetItem(_seq, _index);
			try {
				return swig::as<T>(item);
			}
			catch (const std::invalid_argument& e) {
				char msg[1024];
				sprintf(msg, "in sequence element %d ", (int)_index);
				if (!PyErr_Occurred()) {
					::SWIG_Error(SWIG_TypeError, swig::type_name<T>());
				}
				SWIG_Python_AddErrorMsg(msg);
				SWIG_Python_AddErrorMsg(e.what());
				throw;
			}
		}

		SwigPySequence_Ref& operator=(const T& v)
		{
			PySequence_SetItem(_seq, _index, swig::from<T>(v));
			return *this;
		}

	private:
		PyObject* _seq;
		Py_ssize_t _index;
	};

	template <class T>
	struct SwigPySequence_ArrowProxy
	{
		SwigPySequence_ArrowProxy(const T& x) : m_value(x) {}
		const T* operator->() const { return &m_value; }
		operator const T*() const { return &m_value; }
		T m_value;
	};

	template <class T, class Reference >
	struct SwigPySequence_InputIterator
	{
		typedef SwigPySequence_InputIterator<T, Reference > self;

		typedef std::random_access_iterator_tag iterator_category;
		typedef Reference reference;
		typedef T value_type;
		typedef T* pointer;
		typedef Py_ssize_t difference_type;

		SwigPySequence_InputIterator()
		{
		}

		SwigPySequence_InputIterator(PyObject* seq, Py_ssize_t index)
			: _seq(seq), _index(index)
		{
		}

		reference operator*() const
		{
			return reference(_seq, _index);
		}

		SwigPySequence_ArrowProxy<T>
			operator->() const {
			return SwigPySequence_ArrowProxy<T>(operator*());
		}

		bool operator==(const self& ri) const
		{
			return (_index == ri._index) && (_seq == ri._seq);
		}

		bool operator!=(const self& ri) const
		{
			return !(operator==(ri));
		}

		self& operator ++ ()
		{
			++_index;
			return *this;
		}

		self& operator -- ()
		{
			--_index;
			return *this;
		}

		self& operator += (difference_type n)
		{
			_index += n;
			return *this;
		}

		self operator +(difference_type n) const
		{
			return self(_seq, _index + n);
		}

		self& operator -= (difference_type n)
		{
			_index -= n;
			return *this;
		}

		self operator -(difference_type n) const
		{
			return self(_seq, _index - n);
		}

		difference_type operator - (const self& ri) const
		{
			return _index - ri._index;
		}

		bool operator < (const self& ri) const
		{
			return _index < ri._index;
		}

		reference
			operator[](difference_type n) const
		{
			return reference(_seq, _index + n);
		}

	private:
		PyObject* _seq;
		difference_type _index;
	};

	// STL container wrapper around a Python sequence
	template <class T>
	struct SwigPySequence_Cont
	{
		typedef SwigPySequence_Ref<T> reference;
		typedef const SwigPySequence_Ref<T> const_reference;
		typedef T value_type;
		typedef T* pointer;
		typedef Py_ssize_t difference_type;
		typedef size_t size_type;
		typedef const pointer const_pointer;
		typedef SwigPySequence_InputIterator<T, reference> iterator;
		typedef SwigPySequence_InputIterator<T, const_reference> const_iterator;

		SwigPySequence_Cont(PyObject* seq) : _seq(0)
		{
			if (!PySequence_Check(seq)) {
				throw std::invalid_argument("a sequence is expected");
			}
			_seq = seq;
			Py_INCREF(_seq);
		}

		~SwigPySequence_Cont()
		{
			Py_XDECREF(_seq);
		}

		size_type size() const
		{
			return static_cast<size_type>(PySequence_Size(_seq));
		}

		bool empty() const
		{
			return size() == 0;
		}

		iterator begin()
		{
			return iterator(_seq, 0);
		}

		const_iterator begin() const
		{
			return const_iterator(_seq, 0);
		}

		iterator end()
		{
			return iterator(_seq, size());
		}

		const_iterator end() const
		{
			return const_iterator(_seq, size());
		}

		reference operator[](difference_type n)
		{
			return reference(_seq, n);
		}

		const_reference operator[](difference_type n)  const
		{
			return const_reference(_seq, n);
		}

		bool check() const
		{
			Py_ssize_t s = size();
			for (Py_ssize_t i = 0; i < s; ++i) {
				swig::SwigVar_PyObject item = PySequence_GetItem(_seq, i);
				if (!swig::check<value_type>(item))
					return false;
			}
			return true;
		}

	private:
		PyObject* _seq;
	};

}


/* Getting isfinite working pre C99 across multiple platforms is non-trivial. Users can provide SWIG_isfinite on older platforms. */
#ifndef SWIG_isfinite
/* isfinite() is a macro for C99 */
# if defined(isfinite)
#  define SWIG_isfinite(X) (isfinite(X))
# elif defined(__cplusplus) && __cplusplus >= 201103L
/* Use a template so that this works whether isfinite() is std::isfinite() or
 * in the global namespace.  The reality seems to vary between compiler
 * versions.
 *
 * Make sure namespace std exists to avoid compiler warnings.
 *
 * extern "C++" is required as this fragment can end up inside an extern "C" { } block
 */
namespace std {}
extern "C++" template<typename T>
inline int SWIG_isfinite_func(T x) {
	using namespace std;
	return isfinite(x);
}
#  define SWIG_isfinite(X) (SWIG_isfinite_func(X))
# elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 2))
#  define SWIG_isfinite(X) (__builtin_isfinite(X))
# elif defined(__clang__) && defined(__has_builtin)
#  if __has_builtin(__builtin_isfinite)
#   define SWIG_isfinite(X) (__builtin_isfinite(X))
#  endif
# elif defined(_MSC_VER)
#  define SWIG_isfinite(X) (_finite(X))
# elif defined(__sun) && defined(__SVR4)
#  include <ieeefp.h>
#  define SWIG_isfinite(X) (finite(X))
# endif
#endif


/* Accept infinite as a valid float value unless we are unable to check if a value is finite */
#ifdef SWIG_isfinite
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX) && SWIG_isfinite(X))
#else
# define SWIG_Float_Overflow_Check(X) ((X < -FLT_MAX || X > FLT_MAX))
#endif


SWIGINTERN int
SWIG_AsVal_float(PyObject * obj, float *val)
{
	double v;
	int res = SWIG_AsVal_double(obj, &v);
	if (SWIG_IsOK(res)) {
		if (SWIG_Float_Overflow_Check(v)) {
			return SWIG_OverflowError;
		}
		else {
			if (val) *val = static_cast<float>(v);
		}
	}
	return res;
}


#define SWIG_From_double   PyFloat_FromDouble 


SWIGINTERNINLINE PyObject *
SWIG_From_float(float value)
{
	return SWIG_From_double(value);
}


namespace swig {
	template <> struct traits< float > {
		typedef value_category category;
		static const char* type_name() { return"float"; }
	};
	template <>  struct traits_asval< float > {
		typedef float value_type;
		static int asval(PyObject *obj, value_type *val) {
			return SWIG_AsVal_float(obj, val);
		}
	};
	template <>  struct traits_from< float > {
		typedef float value_type;
		static PyObject *from(const value_type& val) {
			return SWIG_From_float(val);
		}
	};
}


namespace swig {
	template <class SwigPySeq, class Seq>
	inline void
		assign(const SwigPySeq& swigpyseq, Seq* seq) {
		// seq->assign(swigpyseq.begin(), swigpyseq.end()); // not used as not always implemented
		typedef typename SwigPySeq::value_type value_type;
		typename SwigPySeq::const_iterator it = swigpyseq.begin();
		for (; it != swigpyseq.end(); ++it) {
			seq->insert(seq->end(), (value_type)(*it));
		}
	}

	template <class Seq, class T = typename Seq::value_type >
	struct traits_asptr_stdseq {
		typedef Seq sequence;
		typedef T value_type;

		static int asptr(PyObject *obj, sequence **seq) {
			if (obj == Py_None || SWIG_Python_GetSwigThis(obj)) {
				sequence *p;
				swig_type_info *descriptor = swig::type_info<sequence>();
				if (descriptor && SWIG_IsOK(::SWIG_ConvertPtr(obj, (void **)&p, descriptor, 0))) {
					if (seq) *seq = p;
					return SWIG_OLDOBJ;
				}
			}
			else if (PySequence_Check(obj)) {
				try {
					SwigPySequence_Cont<value_type> swigpyseq(obj);
					if (seq) {
						sequence *pseq = new sequence();
						assign(swigpyseq, pseq);
						*seq = pseq;
						return SWIG_NEWOBJ;
					}
					else {
						return swigpyseq.check() ? SWIG_OK : SWIG_ERROR;
					}
				}
				catch (std::exception& e) {
					if (seq) {
						if (!PyErr_Occurred()) {
							PyErr_SetString(PyExc_TypeError, e.what());
						}
					}
					return SWIG_ERROR;
				}
			}
			return SWIG_ERROR;
		}
	};

	template <class Seq, class T = typename Seq::value_type >
	struct traits_from_stdseq {
		typedef Seq sequence;
		typedef T value_type;
		typedef typename Seq::size_type size_type;
		typedef typename sequence::const_iterator const_iterator;

		static PyObject *from(const sequence& seq) {
#ifdef SWIG_PYTHON_EXTRA_NATIVE_CONTAINERS
			swig_type_info *desc = swig::type_info<sequence>();
			if (desc && desc->clientdata) {
				return SWIG_InternalNewPointerObj(new sequence(seq), desc, SWIG_POINTER_OWN);
			}
#endif
			size_type size = seq.size();
			if (size <= (size_type)INT_MAX) {
				PyObject *obj = PyTuple_New((Py_ssize_t)size);
				Py_ssize_t i = 0;
				for (const_iterator it = seq.begin(); it != seq.end(); ++it, ++i) {
					PyTuple_SetItem(obj, i, swig::from<value_type>(*it));
				}
				return obj;
			}
			else {
				PyErr_SetString(PyExc_OverflowError, "sequence size not valid in python");
				return NULL;
			}
		}
	};
}


namespace swig {
	template <class T>
	struct traits_reserve<std::vector<T> > {
		static void reserve(std::vector<T> &seq, typename std::vector<T>::size_type n) {
			seq.reserve(n);
		}
	};

	template <class T>
	struct traits_asptr<std::vector<T> > {
		static int asptr(PyObject *obj, std::vector<T> **vec) {
			return traits_asptr_stdseq<std::vector<T> >::asptr(obj, vec);
		}
	};

	template <class T>
	struct traits_from<std::vector<T> > {
		static PyObject *from(const std::vector<T>& vec) {
			return traits_from_stdseq<std::vector<T> >::from(vec);
		}
	};
}


namespace swig {
	template <>  struct traits<std::vector< float, std::allocator< float > > > {
		typedef pointer_category category;
		static const char* type_name() {
			return "std::vector<" "float" "," "std::allocator< float >" " >";
		}
	};
}

SWIGINTERN swig::SwigPyIterator *std_vector_Sl_float_Sg__iterator(std::vector< float > *self, PyObject **PYTHON_SELF) {
	return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
}
SWIGINTERN bool std_vector_Sl_float_Sg____nonzero__(std::vector< float > const *self) {
	return !(self->empty());
}
SWIGINTERN bool std_vector_Sl_float_Sg____bool__(std::vector< float > const *self) {
	return !(self->empty());
}
SWIGINTERN std::vector< float >::size_type std_vector_Sl_float_Sg____len__(std::vector< float > const *self) {
	return self->size();
}

SWIGINTERNINLINE PyObject*
SWIG_From_unsigned_SS_long(unsigned long value)
{
	return (value > LONG_MAX) ?
		PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast<long>(value));
}


#ifdef SWIG_LONG_LONG_AVAILABLE
SWIGINTERNINLINE PyObject*
SWIG_From_unsigned_SS_long_SS_long(unsigned long long value)
{
	return (value > LONG_MAX) ?
		PyLong_FromUnsignedLongLong(value) : PyInt_FromLong(static_cast<long>(value));
}
#endif


SWIGINTERNINLINE PyObject *
SWIG_From_size_t(size_t value)
{
#ifdef SWIG_LONG_LONG_AVAILABLE
	if (sizeof(size_t) <= sizeof(unsigned long)) {
#endif
		return SWIG_From_unsigned_SS_long(static_cast<unsigned long>(value));
#ifdef SWIG_LONG_LONG_AVAILABLE
	}
	else {
		/* assume sizeof(size_t) <= sizeof(unsigned long long) */
		return SWIG_From_unsigned_SS_long_SS_long(static_cast<unsigned long long>(value));
	}
#endif
}

SWIGINTERN std::vector< float, std::allocator< float > > *std_vector_Sl_float_Sg____getslice__(std::vector< float > *self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) {
	return swig::getslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_0(std::vector< float > *self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) {
	swig::setslice(self, i, j, 1, std::vector< float, std::allocator< float > >());
}
SWIGINTERN void std_vector_Sl_float_Sg____setslice____SWIG_1(std::vector< float > *self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, std::vector< float, std::allocator< float > > const &v) {
	swig::setslice(self, i, j, 1, v);
}
SWIGINTERN void std_vector_Sl_float_Sg____delslice__(std::vector< float > *self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) {
	swig::delslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_0(std::vector< float > *self, std::vector< float >::difference_type i) {
	swig::erase(self, swig::getpos(self, i));
}
SWIGINTERN std::vector< float, std::allocator< float > > *std_vector_Sl_float_Sg____getitem____SWIG_0(std::vector< float > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return NULL;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< float, std::allocator< float > >::difference_type id = i;
	std::vector< float, std::allocator< float > >::difference_type jd = j;
	return swig::getslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_0(std::vector< float > *self, PySliceObject *slice, std::vector< float, std::allocator< float > > const &v) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< float, std::allocator< float > >::difference_type id = i;
	std::vector< float, std::allocator< float > >::difference_type jd = j;
	swig::setslice(self, id, jd, step, v);
}
SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_1(std::vector< float > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< float, std::allocator< float > >::difference_type id = i;
	std::vector< float, std::allocator< float > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_float_Sg____delitem____SWIG_1(std::vector< float > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< float, std::allocator< float > >::difference_type id = i;
	std::vector< float, std::allocator< float > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN std::vector< float >::value_type const &std_vector_Sl_float_Sg____getitem____SWIG_1(std::vector< float > const *self, std::vector< float >::difference_type i) {
	return *(swig::cgetpos(self, i));
}

namespace swig {
	static PyObject* container_owner_attribute() {
		static PyObject* attr = SWIG_Python_str_FromChar("__swig_container");
		return attr;
	}

	template <typename T>
	struct container_owner {
		// By default, do not add the back-reference (for value types)
		// Specialization below will check the reference for pointer types.
		static bool back_reference(PyObject* /*child*/, PyObject* /*owner*/) {
			return false;
		}
	};

	template <>
	struct container_owner<swig::pointer_category> {
		/*
		 * Call to add a back-reference to the owning object when returning a
		 * reference from a container.  Will only set the reference if child
		 * is a SWIG wrapper object that does not own the pointer.
		 *
		 * returns whether the reference was set or not
		 */
		static bool back_reference(PyObject* child, PyObject* owner) {
			SwigPyObject* swigThis = SWIG_Python_GetSwigThis(child);
			if (swigThis && (swigThis->own & SWIG_POINTER_OWN) != SWIG_POINTER_OWN) {
				return PyObject_SetAttr(child, container_owner_attribute(), owner) != -1;
			}
			return false;
		}
	};
}

SWIGINTERN void std_vector_Sl_float_Sg____setitem____SWIG_2(std::vector< float > *self, std::vector< float >::difference_type i, std::vector< float >::value_type const &x) {
	*(swig::getpos(self, i)) = x;
}
SWIGINTERN std::vector< float >::value_type std_vector_Sl_float_Sg__pop(std::vector< float > *self) {
	if (self->size() == 0)
		throw std::out_of_range("pop from empty container");
	std::vector< float, std::allocator< float > >::value_type x = self->back();
	self->pop_back();
	return x;
}
SWIGINTERN void std_vector_Sl_float_Sg__append(std::vector< float > *self, std::vector< float >::value_type const &x) {
	self->push_back(x);
}
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_0(std::vector< float > *self, std::vector< float >::iterator pos) { return self->erase(pos); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__erase__SWIG_1(std::vector< float > *self, std::vector< float >::iterator first, std::vector< float >::iterator last) { return self->erase(first, last); }
SWIGINTERN std::vector< float >::iterator std_vector_Sl_float_Sg__insert__SWIG_0(std::vector< float > *self, std::vector< float >::iterator pos, std::vector< float >::value_type const &x) { return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_float_Sg__insert__SWIG_1(std::vector< float > *self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const &x) { self->insert(pos, n, x); }
SWIGINTERN std::string std_vector_Sl_float_Sg____repr__(std::vector< float > *self) {
	std::ostringstream out;
	out << "vectorFloat([";
	if (self->size() > 0) {
		std::vector<float>::iterator it = self->begin();
		// print all but the last element
		for (; it < self->end() - 1; ++it)
			out << *it << ", ";
		// print the last element, without the trailing ", "
		out << *it;
	}
	out << "])" << std::endl;
	return out.str();
}

SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
	static int init = 0;
	static swig_type_info* info = 0;
	if (!init) {
		info = SWIG_TypeQuery("_p_char");
		init = 1;
	}
	return info;
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
	if (carray) {
		if (size > INT_MAX) {
			swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
			return pchar_descriptor ?
				SWIG_InternalNewPointerObj(const_cast<char *>(carray), pchar_descriptor, 0) : SWIG_Py_Void();
		}
		else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
			return PyBytes_FromStringAndSize(carray, static_cast<Py_ssize_t>(size));
#else
			return PyUnicode_DecodeUTF8(carray, static_cast<Py_ssize_t>(size), "surrogateescape");
#endif
#else
			return PyString_FromStringAndSize(carray, static_cast<Py_ssize_t>(size));
#endif
		}
	}
	else {
		return SWIG_Py_Void();
	}
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string(const std::string& s)
{
	return SWIG_FromCharPtrAndSize(s.data(), s.size());
}


namespace swig {
	template <>  struct traits< AL::Math::Position2D > {
		typedef pointer_category category;
		static const char* type_name() { return"AL::Math::Position2D"; }
	};
}


namespace swig {
	template <>  struct traits<std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > > {
		typedef pointer_category category;
		static const char* type_name() {
			return "std::vector<" "AL::Math::Position2D" "," "std::allocator< AL::Math::Position2D >" " >";
		}
	};
}

SWIGINTERN swig::SwigPyIterator *std_vector_Sl_AL_Math_Position2D_Sg__iterator(std::vector< AL::Math::Position2D > *self, PyObject **PYTHON_SELF) {
	return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
}
SWIGINTERN bool std_vector_Sl_AL_Math_Position2D_Sg____nonzero__(std::vector< AL::Math::Position2D > const *self) {
	return !(self->empty());
}
SWIGINTERN bool std_vector_Sl_AL_Math_Position2D_Sg____bool__(std::vector< AL::Math::Position2D > const *self) {
	return !(self->empty());
}
SWIGINTERN std::vector< AL::Math::Position2D >::size_type std_vector_Sl_AL_Math_Position2D_Sg____len__(std::vector< AL::Math::Position2D > const *self) {
	return self->size();
}
SWIGINTERN std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *std_vector_Sl_AL_Math_Position2D_Sg____getslice__(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j) {
	return swig::getslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____setslice____SWIG_0(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j) {
	swig::setslice(self, i, j, 1, std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >());
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____setslice____SWIG_1(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j, std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &v) {
	swig::setslice(self, i, j, 1, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____delslice__(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j) {
	swig::delslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____delitem____SWIG_0(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i) {
	swig::erase(self, swig::getpos(self, i));
}
SWIGINTERN std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *std_vector_Sl_AL_Math_Position2D_Sg____getitem____SWIG_0(std::vector< AL::Math::Position2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return NULL;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type id = i;
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type jd = j;
	return swig::getslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_0(std::vector< AL::Math::Position2D > *self, PySliceObject *slice, std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &v) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type id = i;
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type jd = j;
	swig::setslice(self, id, jd, step, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_1(std::vector< AL::Math::Position2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type id = i;
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____delitem____SWIG_1(std::vector< AL::Math::Position2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type id = i;
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN std::vector< AL::Math::Position2D >::value_type const &std_vector_Sl_AL_Math_Position2D_Sg____getitem____SWIG_1(std::vector< AL::Math::Position2D > const *self, std::vector< AL::Math::Position2D >::difference_type i) {
	return *(swig::cgetpos(self, i));
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_2(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::value_type const &x) {
	*(swig::getpos(self, i)) = x;
}
SWIGINTERN std::vector< AL::Math::Position2D >::value_type std_vector_Sl_AL_Math_Position2D_Sg__pop(std::vector< AL::Math::Position2D > *self) {
	if (self->size() == 0)
		throw std::out_of_range("pop from empty container");
	std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >::value_type x = self->back();
	self->pop_back();
	return x;
}
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg__append(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::value_type const &x) {
	self->push_back(x);
}
SWIGINTERN std::vector< AL::Math::Position2D >::iterator std_vector_Sl_AL_Math_Position2D_Sg__erase__SWIG_0(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::iterator pos) { return self->erase(pos); }
SWIGINTERN std::vector< AL::Math::Position2D >::iterator std_vector_Sl_AL_Math_Position2D_Sg__erase__SWIG_1(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::iterator first, std::vector< AL::Math::Position2D >::iterator last) { return self->erase(first, last); }
SWIGINTERN std::vector< AL::Math::Position2D >::iterator std_vector_Sl_AL_Math_Position2D_Sg__insert__SWIG_0(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::iterator pos, std::vector< AL::Math::Position2D >::value_type const &x) { return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_AL_Math_Position2D_Sg__insert__SWIG_1(std::vector< AL::Math::Position2D > *self, std::vector< AL::Math::Position2D >::iterator pos, std::vector< AL::Math::Position2D >::size_type n, std::vector< AL::Math::Position2D >::value_type const &x) { self->insert(pos, n, x); }
SWIGINTERN std::string std_vector_Sl_AL_Math_Position2D_Sg____repr__(std::vector< AL::Math::Position2D > *self) {
	std::ostringstream out;
	out << "vectorPosition2D([";
	if (self->size() > 0) {
		std::vector<AL::Math::Position2D>::iterator it = self->begin();
		// print all but the last element
		for (; it < self->end() - 1; ++it)
			out << AL_Math_Position2D___repr__(&(*it)) << ", ";
		// print the last element, without the trailing ", "
		out << AL_Math_Position2D___repr__(&(*it));
	}
	out << "])" << std::endl;
	return out.str();
}

namespace swig {
	template <>  struct traits< AL::Math::Pose2D > {
		typedef pointer_category category;
		static const char* type_name() { return"AL::Math::Pose2D"; }
	};
}


namespace swig {
	template <>  struct traits<std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > > {
		typedef pointer_category category;
		static const char* type_name() {
			return "std::vector<" "AL::Math::Pose2D" "," "std::allocator< AL::Math::Pose2D >" " >";
		}
	};
}

SWIGINTERN swig::SwigPyIterator *std_vector_Sl_AL_Math_Pose2D_Sg__iterator(std::vector< AL::Math::Pose2D > *self, PyObject **PYTHON_SELF) {
	return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
}
SWIGINTERN bool std_vector_Sl_AL_Math_Pose2D_Sg____nonzero__(std::vector< AL::Math::Pose2D > const *self) {
	return !(self->empty());
}
SWIGINTERN bool std_vector_Sl_AL_Math_Pose2D_Sg____bool__(std::vector< AL::Math::Pose2D > const *self) {
	return !(self->empty());
}
SWIGINTERN std::vector< AL::Math::Pose2D >::size_type std_vector_Sl_AL_Math_Pose2D_Sg____len__(std::vector< AL::Math::Pose2D > const *self) {
	return self->size();
}
SWIGINTERN std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *std_vector_Sl_AL_Math_Pose2D_Sg____getslice__(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j) {
	return swig::getslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____setslice____SWIG_0(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j) {
	swig::setslice(self, i, j, 1, std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >());
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____setslice____SWIG_1(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j, std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > const &v) {
	swig::setslice(self, i, j, 1, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____delslice__(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j) {
	swig::delslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____delitem____SWIG_0(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i) {
	swig::erase(self, swig::getpos(self, i));
}
SWIGINTERN std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *std_vector_Sl_AL_Math_Pose2D_Sg____getitem____SWIG_0(std::vector< AL::Math::Pose2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return NULL;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type id = i;
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type jd = j;
	return swig::getslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_0(std::vector< AL::Math::Pose2D > *self, PySliceObject *slice, std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > const &v) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type id = i;
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type jd = j;
	swig::setslice(self, id, jd, step, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_1(std::vector< AL::Math::Pose2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type id = i;
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____delitem____SWIG_1(std::vector< AL::Math::Pose2D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type id = i;
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN std::vector< AL::Math::Pose2D >::value_type const &std_vector_Sl_AL_Math_Pose2D_Sg____getitem____SWIG_1(std::vector< AL::Math::Pose2D > const *self, std::vector< AL::Math::Pose2D >::difference_type i) {
	return *(swig::cgetpos(self, i));
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_2(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::value_type const &x) {
	*(swig::getpos(self, i)) = x;
}
SWIGINTERN std::vector< AL::Math::Pose2D >::value_type std_vector_Sl_AL_Math_Pose2D_Sg__pop(std::vector< AL::Math::Pose2D > *self) {
	if (self->size() == 0)
		throw std::out_of_range("pop from empty container");
	std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >::value_type x = self->back();
	self->pop_back();
	return x;
}
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg__append(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::value_type const &x) {
	self->push_back(x);
}
SWIGINTERN std::vector< AL::Math::Pose2D >::iterator std_vector_Sl_AL_Math_Pose2D_Sg__erase__SWIG_0(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::iterator pos) { return self->erase(pos); }
SWIGINTERN std::vector< AL::Math::Pose2D >::iterator std_vector_Sl_AL_Math_Pose2D_Sg__erase__SWIG_1(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::iterator first, std::vector< AL::Math::Pose2D >::iterator last) { return self->erase(first, last); }
SWIGINTERN std::vector< AL::Math::Pose2D >::iterator std_vector_Sl_AL_Math_Pose2D_Sg__insert__SWIG_0(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::iterator pos, std::vector< AL::Math::Pose2D >::value_type const &x) { return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_AL_Math_Pose2D_Sg__insert__SWIG_1(std::vector< AL::Math::Pose2D > *self, std::vector< AL::Math::Pose2D >::iterator pos, std::vector< AL::Math::Pose2D >::size_type n, std::vector< AL::Math::Pose2D >::value_type const &x) { self->insert(pos, n, x); }
SWIGINTERN std::string std_vector_Sl_AL_Math_Pose2D_Sg____repr__(std::vector< AL::Math::Pose2D > *self) {
	std::ostringstream out;
	out << "vectorPose2D([";
	if (self->size() > 0) {
		std::vector<AL::Math::Pose2D>::iterator it = self->begin();
		// print all but the last element
		for (; it < self->end() - 1; ++it)
			out << AL_Math_Pose2D___repr__(&(*it)) << ", ";
		// print the last element, without the trailing ", "
		out << AL_Math_Pose2D___repr__(&(*it));
	}
	out << "])" << std::endl;
	return out.str();
}

namespace swig {
	template <>  struct traits< AL::Math::Position6D > {
		typedef pointer_category category;
		static const char* type_name() { return"AL::Math::Position6D"; }
	};
}


namespace swig {
	template <>  struct traits<std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > > {
		typedef pointer_category category;
		static const char* type_name() {
			return "std::vector<" "AL::Math::Position6D" "," "std::allocator< AL::Math::Position6D >" " >";
		}
	};
}

SWIGINTERN swig::SwigPyIterator *std_vector_Sl_AL_Math_Position6D_Sg__iterator(std::vector< AL::Math::Position6D > *self, PyObject **PYTHON_SELF) {
	return swig::make_output_iterator(self->begin(), self->begin(), self->end(), *PYTHON_SELF);
}
SWIGINTERN bool std_vector_Sl_AL_Math_Position6D_Sg____nonzero__(std::vector< AL::Math::Position6D > const *self) {
	return !(self->empty());
}
SWIGINTERN bool std_vector_Sl_AL_Math_Position6D_Sg____bool__(std::vector< AL::Math::Position6D > const *self) {
	return !(self->empty());
}
SWIGINTERN std::vector< AL::Math::Position6D >::size_type std_vector_Sl_AL_Math_Position6D_Sg____len__(std::vector< AL::Math::Position6D > const *self) {
	return self->size();
}
SWIGINTERN std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *std_vector_Sl_AL_Math_Position6D_Sg____getslice__(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j) {
	return swig::getslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____setslice____SWIG_0(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j) {
	swig::setslice(self, i, j, 1, std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >());
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____setslice____SWIG_1(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j, std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > const &v) {
	swig::setslice(self, i, j, 1, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____delslice__(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j) {
	swig::delslice(self, i, j, 1);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____delitem____SWIG_0(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i) {
	swig::erase(self, swig::getpos(self, i));
}
SWIGINTERN std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *std_vector_Sl_AL_Math_Position6D_Sg____getitem____SWIG_0(std::vector< AL::Math::Position6D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return NULL;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type id = i;
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type jd = j;
	return swig::getslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_0(std::vector< AL::Math::Position6D > *self, PySliceObject *slice, std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > const &v) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type id = i;
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type jd = j;
	swig::setslice(self, id, jd, step, v);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_1(std::vector< AL::Math::Position6D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type id = i;
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____delitem____SWIG_1(std::vector< AL::Math::Position6D > *self, PySliceObject *slice) {
	Py_ssize_t i, j, step;
	if (!PySlice_Check(slice)) {
		SWIG_Error(SWIG_TypeError, "Slice object expected.");
		return;
	}
	PySlice_GetIndices(SWIGPY_SLICE_ARG(slice), (Py_ssize_t)self->size(), &i, &j, &step);
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type id = i;
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::difference_type jd = j;
	swig::delslice(self, id, jd, step);
}
SWIGINTERN std::vector< AL::Math::Position6D >::value_type const &std_vector_Sl_AL_Math_Position6D_Sg____getitem____SWIG_1(std::vector< AL::Math::Position6D > const *self, std::vector< AL::Math::Position6D >::difference_type i) {
	return *(swig::cgetpos(self, i));
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_2(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::value_type const &x) {
	*(swig::getpos(self, i)) = x;
}
SWIGINTERN std::vector< AL::Math::Position6D >::value_type std_vector_Sl_AL_Math_Position6D_Sg__pop(std::vector< AL::Math::Position6D > *self) {
	if (self->size() == 0)
		throw std::out_of_range("pop from empty container");
	std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >::value_type x = self->back();
	self->pop_back();
	return x;
}
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg__append(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::value_type const &x) {
	self->push_back(x);
}
SWIGINTERN std::vector< AL::Math::Position6D >::iterator std_vector_Sl_AL_Math_Position6D_Sg__erase__SWIG_0(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::iterator pos) { return self->erase(pos); }
SWIGINTERN std::vector< AL::Math::Position6D >::iterator std_vector_Sl_AL_Math_Position6D_Sg__erase__SWIG_1(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::iterator first, std::vector< AL::Math::Position6D >::iterator last) { return self->erase(first, last); }
SWIGINTERN std::vector< AL::Math::Position6D >::iterator std_vector_Sl_AL_Math_Position6D_Sg__insert__SWIG_0(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::iterator pos, std::vector< AL::Math::Position6D >::value_type const &x) { return self->insert(pos, x); }
SWIGINTERN void std_vector_Sl_AL_Math_Position6D_Sg__insert__SWIG_1(std::vector< AL::Math::Position6D > *self, std::vector< AL::Math::Position6D >::iterator pos, std::vector< AL::Math::Position6D >::size_type n, std::vector< AL::Math::Position6D >::value_type const &x) { self->insert(pos, n, x); }
SWIGINTERN std::string std_vector_Sl_AL_Math_Position6D_Sg____repr__(std::vector< AL::Math::Position6D > *self) {
	std::ostringstream out;
	out << "vectorPosition6D([";
	if (self->size() > 0) {
		std::vector<AL::Math::Position6D>::iterator it = self->begin();
		// print all but the last element
		for (; it < self->end() - 1; ++it)
			out << AL_Math_Position6D___repr__(&(*it)) << ", ";
		// print the last element, without the trailing ", "
		out << AL_Math_Position6D___repr__(&(*it));
	}
	out << "])" << std::endl;
	return out.str();
}

SWIGINTERNINLINE PyObject*
SWIG_From_int(int value)
{
	return PyInt_FromLong((long)value);
}


SWIGINTERN int
SWIG_AsVal_int(PyObject * obj, int *val)
{
	long v;
	int res = SWIG_AsVal_long(obj, &v);
	if (SWIG_IsOK(res)) {
		if ((v < INT_MIN || v > INT_MAX)) {
			return SWIG_OverflowError;
		}
		else {
			if (val) *val = static_cast<int>(v);
		}
	}
	return res;
}

SWIGINTERN char *AL_Math_Pose2D___repr__(AL::Math::Pose2D *self) {
	static char tmp[1024];
	sprintf(tmp, "Pose2D(x=%g, y=%g, theta=%g)",
		self->x, self->y, self->theta);
	return tmp;
}

SWIGINTERNINLINE PyObject *
SWIG_FromCharPtr(const char *cptr)
{
	return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}

SWIGINTERN AL::Math::Pose2D AL_Math_Pose2D___rmul__(AL::Math::Pose2D *self, float const lhs) {
	return (*self) * lhs;
}
SWIGINTERN char *AL_Math_Position2D___repr__(AL::Math::Position2D *self) {
	static char tmp[1024];
	sprintf(tmp, "Position2D(x=%g, y=%g)",
		self->x, self->y);
	return tmp;
}
SWIGINTERN AL::Math::Position2D AL_Math_Position2D___rmul__(AL::Math::Position2D *self, float const lhs) {
	return (*self) * lhs;
}
SWIGINTERN char *AL_Math_Position3D___repr__(AL::Math::Position3D *self) {
	static char tmp[1024];
	sprintf(tmp, "Position3D(x=%g, y=%g, z=%g)",
		self->x, self->y, self->z);
	return tmp;
}
SWIGINTERN AL::Math::Position3D AL_Math_Position3D___rmul__(AL::Math::Position3D *self, float const lhs) {
	return (*self) * lhs;
}
SWIGINTERN char *AL_Math_Position6D___repr__(AL::Math::Position6D *self) {
	static char tmp[1024];
	sprintf(tmp, "Position6D(x=%g, y=%g, z=%g, wx=%g, wy=%g, wz=%g)",
		self->x, self->y, self->z,
		self->wx, self->wy, self->wz);
	return tmp;
}
SWIGINTERN AL::Math::Position6D AL_Math_Position6D___rmul__(AL::Math::Position6D *self, float const lhs) {
	return (*self) * lhs;
}
SWIGINTERN char *AL_Math_PositionAndVelocity___repr__(AL::Math::PositionAndVelocity *self) {
	static char tmp[1024];
	sprintf(tmp, "PositionAndVelocity(q=%g, dq=%g)",
		self->q, self->dq);
	return tmp;
}
SWIGINTERN char *AL_Math_Quaternion___repr__(AL::Math::Quaternion *self) {
	static char tmp[1024];
	sprintf(tmp, "Quaternion(w=%g, x=%g, y=%g, z=%g)",
		self->w, self->x, self->y, self->z);
	return tmp;
}
SWIGINTERN char *AL_Math_Displacement___repr__(AL::Math::Displacement *self) {
	static char tmp[1024];
	sprintf(tmp, "Displacement(P=Position3D(x=%g, y=%g, z=%g)\n"
		"             Q=Quaternion(w=%g, x=%g, y=%g, z=%g))\n",
		self->P.x, self->P.y, self->P.z,
		self->Q.w, self->Q.x, self->Q.y, self->Q.z);
	return tmp;
}
SWIGINTERN char *AL_Math_Rotation___str__(AL::Math::Rotation *self) {
	static char tmp[1024];
	sprintf(tmp, "[[%g, %g, %g]\n"
		" [%g, %g, %g]\n"
		" [%g, %g, %g]]",
		self->r1_c1, self->r1_c2, self->r1_c3,
		self->r2_c1, self->r2_c2, self->r2_c3,
		self->r3_c1, self->r3_c2, self->r3_c3);
	return tmp;
}
SWIGINTERN char *AL_Math_Rotation___repr__(AL::Math::Rotation *self) {
	static char tmp[1024];
	sprintf(tmp, "Rotation([%g, %g, %g\n"
		"          %g, %g, %g\n"
		"          %g, %g, %g])",
		self->r1_c1, self->r1_c2, self->r1_c3,
		self->r2_c1, self->r2_c2, self->r2_c3,
		self->r3_c1, self->r3_c2, self->r3_c3);
	return tmp;
}
SWIGINTERN AL::Math::Position3D AL_Math_Rotation___mul____SWIG_1(AL::Math::Rotation const *self, AL::Math::Position3D rhs) {
	return (*self) * rhs;
}
SWIGINTERN char *AL_Math_Rotation3D___repr__(AL::Math::Rotation3D *self) {
	static char tmp[1024];
	sprintf(tmp, "Rotation3D(wx=%g, wy=%g, wz=%g)",
		self->wx, self->wy, self->wz);
	return tmp;
}
SWIGINTERN char *AL_Math_Transform___str__(AL::Math::Transform *self) {
	static char tmp[1024];
	sprintf(tmp, "[[%g, %g, %g, %g]\n"
		" [%g, %g, %g, %g]\n"
		" [%g, %g, %g, %g]]",
		self->r1_c1, self->r1_c2, self->r1_c3, self->r1_c4,
		self->r2_c1, self->r2_c2, self->r2_c3, self->r2_c4,
		self->r3_c1, self->r3_c2, self->r3_c3, self->r3_c4);
	return tmp;
}
SWIGINTERN char *AL_Math_Transform___repr__(AL::Math::Transform *self) {
	static char tmp[1024];
	sprintf(tmp, "Transform([%g, %g, %g, %g\n"
		"           %g, %g, %g, %g\n"
		"           %g, %g, %g, %g])",
		self->r1_c1, self->r1_c2, self->r1_c3, self->r1_c4,
		self->r2_c1, self->r2_c2, self->r2_c3, self->r2_c4,
		self->r3_c1, self->r3_c2, self->r3_c3, self->r3_c4);
	return tmp;
}
SWIGINTERN AL::Math::Position3D AL_Math_Transform___mul____SWIG_1(AL::Math::Transform const *self, AL::Math::Position3D rhs) {
	return (*self) * rhs;
}
SWIGINTERN char *AL_Math_Velocity3D___repr__(AL::Math::Velocity3D *self) {
	static char tmp[1024];
	sprintf(tmp, "Velocity3D(xd=%g, yd=%g, zd=%g)",
		self->xd, self->yd, self->zd);
	return tmp;
}
SWIGINTERN AL::Math::Velocity3D AL_Math_Velocity3D___rmul__(AL::Math::Velocity3D *self, float const lhs) {
	return (*self) * lhs;
}
SWIGINTERN char *AL_Math_Velocity6D___repr__(AL::Math::Velocity6D *self) {
	static char tmp[1024];
	sprintf(tmp, "Velocity6D(xd=%g, yd=%g, zd=%g, wxd=%g, wyd=%g, wzd=%g",
		self->xd, self->yd, self->zd,
		self->wxd, self->wyd, self->wzd);
	return tmp;
}
SWIGINTERN AL::Math::Velocity6D AL_Math_Velocity6D___rmul__(AL::Math::Velocity6D const *self, float const lhs) {
	return lhs * (*self);
}
SWIGINTERN char *AL_Math_TransformAndVelocity6D___repr__(AL::Math::TransformAndVelocity6D *self) {
	static char tmp[1024];
	sprintf(tmp, "TransformAndVelocity6D(T=Transform([%g, %g, %g, %g\n"
		"                                    %g, %g, %g, %g\n"
		"                                    %g, %g, %g, %g]),\n"
		"                       V=Velocity6D(xd=%g, yd=%g, zd=%g, wxd=%g, wyd=%g, wzd=%g))",
		self->T.r1_c1, self->T.r1_c2, self->T.r1_c3, self->T.r1_c4,
		self->T.r2_c1, self->T.r2_c2, self->T.r2_c3, self->T.r2_c4,
		self->T.r3_c1, self->T.r3_c2, self->T.r3_c3, self->T.r3_c4,
		self->V.xd, self->V.yd, self->V.zd,
		self->V.wxd, self->V.wyd, self->V.wzd);
	return tmp;
}

SWIGINTERN int
SWIG_AsVal_bool(PyObject *obj, bool *val)
{
	int r;
	if (!PyBool_Check(obj))
		return SWIG_ERROR;
	r = PyObject_IsTrue(obj);
	if (r == -1)
		return SWIG_ERROR;
	if (val) *val = r ? true : false;
	return SWIG_OK;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	if (PyBytes_Check(obj))
#else
	if (PyUnicode_Check(obj))
#endif
#else  
	if (PyString_Check(obj))
#endif
	{
		char *cstr; Py_ssize_t len;
		int ret = SWIG_OK;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
		if (!alloc && cptr) {
			/* We can't allow converting without allocation, since the internal
			   representation of string in Python 3 is UCS-2/UCS-4 but we require
			   a UTF-8 representation.
			   TODO(bhy) More detailed explanation */
			return SWIG_RuntimeError;
		}
		obj = PyUnicode_AsUTF8String(obj);
		if (!obj)
			return SWIG_TypeError;
		if (alloc)
			*alloc = SWIG_NEWOBJ;
#endif
		if (PyBytes_AsStringAndSize(obj, &cstr, &len) == -1)
			return SWIG_TypeError;
#else
		if (PyString_AsStringAndSize(obj, &cstr, &len) == -1)
			return SWIG_TypeError;
#endif
		if (cptr) {
			if (alloc) {
				if (*alloc == SWIG_NEWOBJ) {
					*cptr = reinterpret_cast<char*>(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
					*alloc = SWIG_NEWOBJ;
				}
				else {
					*cptr = cstr;
					*alloc = SWIG_OLDOBJ;
				}
			}
			else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
				*cptr = PyBytes_AsString(obj);
#else
				assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
				*cptr = SWIG_Python_str_AsChar(obj);
				if (!*cptr)
					ret = SWIG_TypeError;
#endif
			}
		}
		if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
		Py_XDECREF(obj);
#endif
		return ret;
	}
	else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
		if (PyUnicode_Check(obj)) {
			char *cstr; Py_ssize_t len;
			if (!alloc && cptr) {
				return SWIG_RuntimeError;
			}
			obj = PyUnicode_AsUTF8String(obj);
			if (!obj)
				return SWIG_TypeError;
			if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
				if (cptr) {
					if (alloc) *alloc = SWIG_NEWOBJ;
					*cptr = reinterpret_cast<char*>(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
				}
				if (psize) *psize = len + 1;

				Py_XDECREF(obj);
				return SWIG_OK;
			}
			else {
				Py_XDECREF(obj);
			}
		}
#endif
#endif

		swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
		if (pchar_descriptor) {
			void* vptr = 0;
			if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
				if (cptr) *cptr = (char *)vptr;
				if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
				if (alloc) *alloc = SWIG_OLDOBJ;
				return SWIG_OK;
			}
		}
	}
	return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string(PyObject * obj, std::string **val)
{
	char* buf = 0; size_t size = 0; int alloc = SWIG_OLDOBJ;
	if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
		if (buf) {
			if (val) *val = new std::string(buf, size - 1);
			if (alloc == SWIG_NEWOBJ) delete[] buf;
			return SWIG_NEWOBJ;
		}
		else {
			if (val) *val = 0;
			return SWIG_OLDOBJ;
		}
	}
	else {
		static int init = 0;
		static swig_type_info* descriptor = 0;
		if (!init) {
			descriptor = SWIG_TypeQuery("std::string" " *");
			init = 1;
		}
		if (descriptor) {
			std::string *vptr;
			int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
			if (SWIG_IsOK(res) && val) *val = vptr;
			return res;
		}
	}
	return SWIG_ERROR;
}

SWIGINTERN char *AL_Math_Point2Di___repr__(AL::Math::Point2Di *self) {
	static char tmp[1024];
	sprintf(tmp, "Point2Di(x=%d, y=%d)",
		self->x, self->y);
	return tmp;
}
SWIGINTERN char *AL_Math_OccupancyMapParams___repr__(AL::Math::OccupancyMapParams *self) {
	static char tmp[1024];
	sprintf(tmp, "OccupancyMapParams(size=%d, metersPerPixel=%g, "
		"originOffset=Position2D(x=%g, y=%g))",
		self->size, self->metersPerPixel, self->originOffset.x,
		self->originOffset.y);
	return tmp;
}
#ifdef __cplusplus
extern "C" {
#endif
	SWIGINTERN PyObject *_wrap_delete_SwigPyIterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SwigPyIterator" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		PyObject *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_value" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (PyObject *)((swig::SwigPyIterator const *)arg1)->value();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = result;
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		size_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		swig::SwigPyIterator *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_incr" "', argument " "2"" of type '" "size_t""'");
		}
		arg2 = static_cast<size_t>(val2);
		try {
			result = (swig::SwigPyIterator *)(arg1)->incr(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_incr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_incr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (swig::SwigPyIterator *)(arg1)->incr();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_incr(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_incr", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_SwigPyIterator_incr__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_SwigPyIterator_incr__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_incr'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    swig::SwigPyIterator::incr(size_t)\n"
			"    swig::SwigPyIterator::incr()\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		size_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		swig::SwigPyIterator *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_decr" "', argument " "2"" of type '" "size_t""'");
		}
		arg2 = static_cast<size_t>(val2);
		try {
			result = (swig::SwigPyIterator *)(arg1)->decr(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_decr__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_decr" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (swig::SwigPyIterator *)(arg1)->decr();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_decr(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator_decr", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_SwigPyIterator_decr__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_SwigPyIterator_decr__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'SwigPyIterator_decr'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    swig::SwigPyIterator::decr(size_t)\n"
			"    swig::SwigPyIterator::decr()\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		swig::SwigPyIterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		ptrdiff_t result;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_distance" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_distance" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		arg2 = reinterpret_cast<swig::SwigPyIterator *>(argp2);
		try {
			result = ((swig::SwigPyIterator const *)arg1)->distance((swig::SwigPyIterator const &)*arg2);
		}
		catch (std::invalid_argument &_e) {
			SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast<const std::invalid_argument&>(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
		}
		resultobj = SWIG_From_ptrdiff_t(static_cast<ptrdiff_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_equal(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		swig::SwigPyIterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_equal", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_equal" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator_equal" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		arg2 = reinterpret_cast<swig::SwigPyIterator *>(argp2);
		try {
			result = (bool)((swig::SwigPyIterator const *)arg1)->equal((swig::SwigPyIterator const &)*arg2);
		}
		catch (std::invalid_argument &_e) {
			SWIG_Python_Raise(SWIG_NewPointerObj((new std::invalid_argument(static_cast<const std::invalid_argument&>(_e))), SWIGTYPE_p_std__invalid_argument, SWIG_POINTER_OWN), "std::invalid_argument", SWIGTYPE_p_std__invalid_argument); SWIG_fail;
		}
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_copy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		swig::SwigPyIterator *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_copy" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->copy();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		PyObject *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_next" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (PyObject *)(arg1)->next();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = result;
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___next__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		PyObject *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___next__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (PyObject *)(arg1)->__next__();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = result;
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_previous(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		PyObject *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_previous" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		try {
			result = (PyObject *)(arg1)->previous();
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = result;
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator_advance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		ptrdiff_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		swig::SwigPyIterator *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator_advance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator_advance" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator_advance" "', argument " "2"" of type '" "ptrdiff_t""'");
		}
		arg2 = static_cast<ptrdiff_t>(val2);
		try {
			result = (swig::SwigPyIterator *)(arg1)->advance(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		swig::SwigPyIterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___eq__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___eq__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		arg2 = reinterpret_cast<swig::SwigPyIterator *>(argp2);
		result = (bool)((swig::SwigPyIterator const *)arg1)->operator ==((swig::SwigPyIterator const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		swig::SwigPyIterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___ne__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___ne__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		arg2 = reinterpret_cast<swig::SwigPyIterator *>(argp2);
		result = (bool)((swig::SwigPyIterator const *)arg1)->operator !=((swig::SwigPyIterator const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		ptrdiff_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		swig::SwigPyIterator *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___iadd__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___iadd__" "', argument " "2"" of type '" "ptrdiff_t""'");
		}
		arg2 = static_cast<ptrdiff_t>(val2);
		try {
			result = (swig::SwigPyIterator *) &(arg1)->operator +=(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		ptrdiff_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		swig::SwigPyIterator *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___isub__" "', argument " "1"" of type '" "swig::SwigPyIterator *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___isub__" "', argument " "2"" of type '" "ptrdiff_t""'");
		}
		arg2 = static_cast<ptrdiff_t>(val2);
		try {
			result = (swig::SwigPyIterator *) &(arg1)->operator -=(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		ptrdiff_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		swig::SwigPyIterator *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "SwigPyIterator___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___add__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___add__" "', argument " "2"" of type '" "ptrdiff_t""'");
		}
		arg2 = static_cast<ptrdiff_t>(val2);
		try {
			result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator +(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		ptrdiff_t arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		swig::SwigPyIterator *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "ptrdiff_t""'");
		}
		arg2 = static_cast<ptrdiff_t>(val2);
		try {
			result = (swig::SwigPyIterator *)((swig::SwigPyIterator const *)arg1)->operator -(arg2);
		}
		catch (swig::stop_iteration &_e) {
			{
				(void)_e;
				SWIG_SetErrorObj(PyExc_StopIteration, SWIG_Py_Void());
				SWIG_fail;
			}
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		swig::SwigPyIterator *arg1 = (swig::SwigPyIterator *) 0;
		swig::SwigPyIterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		ptrdiff_t result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SwigPyIterator___sub__" "', argument " "1"" of type '" "swig::SwigPyIterator const *""'");
		}
		arg1 = reinterpret_cast<swig::SwigPyIterator *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_swig__SwigPyIterator, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SwigPyIterator___sub__" "', argument " "2"" of type '" "swig::SwigPyIterator const &""'");
		}
		arg2 = reinterpret_cast<swig::SwigPyIterator *>(argp2);
		result = ((swig::SwigPyIterator const *)arg1)->operator -((swig::SwigPyIterator const &)*arg2);
		resultobj = SWIG_From_ptrdiff_t(static_cast<ptrdiff_t>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_SwigPyIterator___sub__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "SwigPyIterator___sub__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_SwigPyIterator___sub____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_swig__SwigPyIterator, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_SwigPyIterator___sub____SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *SwigPyIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_swig__SwigPyIterator, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *_wrap_vectorFloat_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		PyObject **arg2 = (PyObject **)0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		swig::SwigPyIterator *result = 0;

		arg2 = &swig_obj[0];
		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_iterator" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (swig::SwigPyIterator *)std_vector_Sl_float_Sg__iterator(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___nonzero__" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (bool)std_vector_Sl_float_Sg____nonzero__((std::vector< float > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___bool__" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (bool)std_vector_Sl_float_Sg____bool__((std::vector< float > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___len__" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = std_vector_Sl_float_Sg____len__((std::vector< float > const *)arg1);
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		std::vector< float >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		std::vector< float, std::allocator< float > > *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat___getslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___getslice__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___getslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat___getslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
		}
		arg3 = static_cast<std::vector< float >::difference_type>(val3);
		try {
			result = (std::vector< float, std::allocator< float > > *)std_vector_Sl_float_Sg____getslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		std::vector< float >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
		}
		arg3 = static_cast<std::vector< float >::difference_type>(val3);
		try {
			std_vector_Sl_float_Sg____setslice____SWIG_0(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		std::vector< float >::difference_type arg3;
		std::vector< float, std::allocator< float > > *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		int res4 = SWIG_OLDOBJ;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___setslice__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___setslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat___setslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
		}
		arg3 = static_cast<std::vector< float >::difference_type>(val3);
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res4 = swig::asptr(swig_obj[3], &ptr);
			if (!SWIG_IsOK(res4)) {
				SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorFloat___setslice__" "', argument " "4"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg4 = ptr;
		}
		try {
			std_vector_Sl_float_Sg____setslice____SWIG_1(arg1, arg2, arg3, (std::vector< float, std::allocator< float > > const &)*arg4);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res4)) delete arg4;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res4)) delete arg4;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setslice__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat___setslice__", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorFloat___setslice____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = swig::asptr(argv[3], (std::vector< float, std::allocator< float > >**)(0));
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorFloat___setslice____SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat___setslice__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type)\n"
			"    std::vector< float >::__setslice__(std::vector< float >::difference_type,std::vector< float >::difference_type,std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		std::vector< float >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat___delslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___delslice__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___delslice__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat___delslice__" "', argument " "3"" of type '" "std::vector< float >::difference_type""'");
		}
		arg3 = static_cast<std::vector< float >::difference_type>(val3);
		try {
			std_vector_Sl_float_Sg____delslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___delitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		try {
			std_vector_Sl_float_Sg____delitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___getitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			result = (std::vector< float, std::allocator< float > > *)std_vector_Sl_float_Sg____getitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		std::vector< float, std::allocator< float > > *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		int res3 = SWIG_OLDOBJ;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res3 = swig::asptr(swig_obj[2], &ptr);
			if (!SWIG_IsOK(res3)) {
				SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg3 = ptr;
		}
		try {
			std_vector_Sl_float_Sg____setitem____SWIG_0(arg1, arg2, (std::vector< float, std::allocator< float > > const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res3)) delete arg3;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res3)) delete arg3;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_float_Sg____setitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___delitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_float_Sg____delitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___delitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat___delitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorFloat___delitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorFloat___delitem____SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat___delitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::__delitem__(std::vector< float >::difference_type)\n"
			"    std::vector< float >::__delitem__(PySliceObject *)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		std::vector< float >::value_type *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___getitem__" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___getitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		try {
			result = (std::vector< float >::value_type *) &std_vector_Sl_float_Sg____getitem____SWIG_1((std::vector< float > const *)arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_From_float(static_cast<float>(*result));
		(void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___getitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat___getitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorFloat___getitem____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorFloat___getitem____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat___getitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::__getitem__(PySliceObject *)\n"
			"    std::vector< float >::__getitem__(std::vector< float >::difference_type) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::difference_type arg2;
		std::vector< float >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		std::vector< float >::value_type temp3;
		float val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___setitem__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat___setitem__" "', argument " "2"" of type '" "std::vector< float >::difference_type""'");
		}
		arg2 = static_cast<std::vector< float >::difference_type>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat___setitem__" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
		}
		temp3 = static_cast<std::vector< float >::value_type>(val3);
		arg3 = &temp3;
		try {
			std_vector_Sl_float_Sg____setitem____SWIG_2(arg1, arg2, (float const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___setitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat___setitem__", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorFloat___setitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					int res = swig::asptr(argv[2], (std::vector< float, std::allocator< float > >**)(0));
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorFloat___setitem____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorFloat___setitem____SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat___setitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::__setitem__(PySliceObject *,std::vector< float,std::allocator< float > > const &)\n"
			"    std::vector< float >::__setitem__(PySliceObject *)\n"
			"    std::vector< float >::__setitem__(std::vector< float >::difference_type,std::vector< float >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::value_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_pop" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		try {
			result = (std::vector< float >::value_type)std_vector_Sl_float_Sg__pop(arg1);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float >::value_type temp2;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat_append", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_append" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_append" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
		}
		temp2 = static_cast<std::vector< float >::value_type>(val2);
		arg2 = &temp2;
		std_vector_Sl_float_Sg__append(arg1, (float const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorFloat__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		std::vector< float > *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (std::vector< float > *)new std::vector< float >();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorFloat__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		std::vector< float > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorFloat" "', argument " "1"" of type '" "std::vector< float > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorFloat" "', argument " "1"" of type '" "std::vector< float > const &""'");
			}
			arg1 = ptr;
		}
		result = (std::vector< float > *)new std::vector< float >((std::vector< float > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_empty" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (bool)((std::vector< float > const *)arg1)->empty();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_size" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = ((std::vector< float > const *)arg1)->size();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat_swap", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_swap" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorFloat_swap" "', argument " "2"" of type '" "std::vector< float > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float > *>(argp2);
		(arg1)->swap(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_begin" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (arg1)->begin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_end" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (arg1)->end();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_rbegin" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (arg1)->rbegin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_rend" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (arg1)->rend();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_clear" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		(arg1)->clear();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		SwigValueWrapper< std::allocator< float > > result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_get_allocator" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = ((std::vector< float > const *)arg1)->get_allocator();
		resultobj = SWIG_NewPointerObj((new std::vector< float >::allocator_type(static_cast<const std::vector< float >::allocator_type&>(result))), SWIGTYPE_p_std__allocatorT_float_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorFloat__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float >::size_type arg1;
		size_t val1;
		int ecode1 = 0;
		std::vector< float > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
		}
		arg1 = static_cast<std::vector< float >::size_type>(val1);
		result = (std::vector< float > *)new std::vector< float >(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_pop_back" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		(arg1)->pop_back();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
		}
		arg2 = static_cast<std::vector< float >::size_type>(val2);
		(arg1)->resize(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::iterator arg2;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		std::vector< float >::iterator result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_erase" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
			}
		}
		result = std_vector_Sl_float_Sg__erase__SWIG_0(arg1, arg2);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::iterator arg2;
		std::vector< float >::iterator arg3;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		swig::SwigPyIterator *iter3 = 0;
		int res3;
		std::vector< float >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_erase" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res3) || !iter3) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter3);
			if (iter_t) {
				arg3 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_erase" "', argument " "3"" of type '" "std::vector< float >::iterator""'");
			}
		}
		result = std_vector_Sl_float_Sg__erase__SWIG_1(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_erase(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat_erase", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
				if (_v) {
					return _wrap_vectorFloat_erase__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
				if (_v) {
					swig::SwigPyIterator *iter = 0;
					int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
					_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
					if (_v) {
						return _wrap_vectorFloat_erase__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat_erase'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::erase(std::vector< float >::iterator)\n"
			"    std::vector< float >::erase(std::vector< float >::iterator,std::vector< float >::iterator)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_new_vectorFloat__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float >::size_type arg1;
		std::vector< float >::value_type *arg2 = 0;
		size_t val1;
		int ecode1 = 0;
		std::vector< float >::value_type temp2;
		float val2;
		int ecode2 = 0;
		std::vector< float > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorFloat" "', argument " "1"" of type '" "std::vector< float >::size_type""'");
		}
		arg1 = static_cast<std::vector< float >::size_type>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_vectorFloat" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
		}
		temp2 = static_cast<std::vector< float >::value_type>(val2);
		arg2 = &temp2;
		result = (std::vector< float > *)new std::vector< float >(arg1, (std::vector< float >::value_type const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorFloat(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_vectorFloat", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_vectorFloat__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_vectorFloat__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_vectorFloat__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_vectorFloat__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vectorFloat'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::vector()\n"
			"    std::vector< float >::vector(std::vector< float > const &)\n"
			"    std::vector< float >::vector(std::vector< float >::size_type)\n"
			"    std::vector< float >::vector(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float >::value_type temp2;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat_push_back", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_push_back" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_push_back" "', argument " "2"" of type '" "std::vector< float >::value_type""'");
		}
		temp2 = static_cast<std::vector< float >::value_type>(val2);
		arg2 = &temp2;
		(arg1)->push_back((std::vector< float >::value_type const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_front" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->front();
		resultobj = SWIG_From_float(static_cast<float>(*result));
		(void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_back" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = (std::vector< float >::value_type *) &((std::vector< float > const *)arg1)->back();
		resultobj = SWIG_From_float(static_cast<float>(*result));
		(void)swig::container_owner<swig::traits<std::vector< float >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::size_type arg2;
		std::vector< float >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		std::vector< float >::value_type temp3;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat_assign", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_assign" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_assign" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
		}
		arg2 = static_cast<std::vector< float >::size_type>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat_assign" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
		}
		temp3 = static_cast<std::vector< float >::value_type>(val3);
		arg3 = &temp3;
		(arg1)->assign(arg2, (std::vector< float >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::size_type arg2;
		std::vector< float >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		std::vector< float >::value_type temp3;
		float val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_resize" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_resize" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
		}
		arg2 = static_cast<std::vector< float >::size_type>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat_resize" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
		}
		temp3 = static_cast<std::vector< float >::value_type>(val3);
		arg3 = &temp3;
		(arg1)->resize(arg2, (std::vector< float >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_resize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat_resize", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorFloat_resize__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorFloat_resize__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat_resize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::resize(std::vector< float >::size_type)\n"
			"    std::vector< float >::resize(std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::iterator arg2;
		std::vector< float >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		std::vector< float >::value_type temp3;
		float val3;
		int ecode3 = 0;
		std::vector< float >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_insert" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
			}
		}
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat_insert" "', argument " "3"" of type '" "std::vector< float >::value_type""'");
		}
		temp3 = static_cast<std::vector< float >::value_type>(val3);
		arg3 = &temp3;
		result = std_vector_Sl_float_Sg__insert__SWIG_0(arg1, arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< float >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::iterator arg2;
		std::vector< float >::size_type arg3;
		std::vector< float >::value_type *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		size_t val3;
		int ecode3 = 0;
		std::vector< float >::value_type temp4;
		float val4;
		int ecode4 = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_insert" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< float >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorFloat_insert" "', argument " "2"" of type '" "std::vector< float >::iterator""'");
			}
		}
		ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorFloat_insert" "', argument " "3"" of type '" "std::vector< float >::size_type""'");
		}
		arg3 = static_cast<std::vector< float >::size_type>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "vectorFloat_insert" "', argument " "4"" of type '" "std::vector< float >::value_type""'");
		}
		temp4 = static_cast<std::vector< float >::value_type>(val4);
		arg4 = &temp4;
		std_vector_Sl_float_Sg__insert__SWIG_1(arg1, arg2, arg3, (float const &)*arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_insert(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorFloat_insert", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorFloat_insert__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< float >::iterator > *>(iter) != 0));
				if (_v) {
					{
						int res = SWIG_AsVal_size_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_vectorFloat_insert__SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorFloat_insert'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::value_type const &)\n"
			"    std::vector< float >::insert(std::vector< float >::iterator,std::vector< float >::size_type,std::vector< float >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		std::vector< float >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorFloat_reserve", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_reserve" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorFloat_reserve" "', argument " "2"" of type '" "std::vector< float >::size_type""'");
		}
		arg2 = static_cast<std::vector< float >::size_type>(val2);
		(arg1)->reserve(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< float >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat_capacity" "', argument " "1"" of type '" "std::vector< float > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = ((std::vector< float > const *)arg1)->capacity();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorFloat___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::string result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorFloat___repr__" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		result = std_vector_Sl_float_Sg____repr__(arg1);
		resultobj = SWIG_From_std_string(static_cast<std::string>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_vectorFloat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float > *arg1 = (std::vector< float > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorFloat" "', argument " "1"" of type '" "std::vector< float > *""'");
		}
		arg1 = reinterpret_cast<std::vector< float > *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *vectorFloat_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *vectorFloat_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_vectorPosition2D_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		PyObject **arg2 = (PyObject **)0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		swig::SwigPyIterator *result = 0;

		arg2 = &swig_obj[0];
		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_iterator" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (swig::SwigPyIterator *)std_vector_Sl_AL_Math_Position2D_Sg__iterator(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___nonzero__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Position2D_Sg____nonzero__((std::vector< AL::Math::Position2D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___bool__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Position2D_Sg____bool__((std::vector< AL::Math::Position2D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___len__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = std_vector_Sl_AL_Math_Position2D_Sg____len__((std::vector< AL::Math::Position2D > const *)arg1);
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		std::vector< AL::Math::Position2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D___getslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___getslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___getslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition2D___getslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val3);
		try {
			result = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)std_vector_Sl_AL_Math_Position2D_Sg____getslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		std::vector< AL::Math::Position2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition2D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____setslice____SWIG_0(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		std::vector< AL::Math::Position2D >::difference_type arg3;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		int res4 = SWIG_OLDOBJ;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition2D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val3);
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res4 = swig::asptr(swig_obj[3], &ptr);
			if (!SWIG_IsOK(res4)) {
				SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPosition2D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg4 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____setslice____SWIG_1(arg1, arg2, arg3, (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg4);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res4)) delete arg4;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res4)) delete arg4;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setslice__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D___setslice__", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorPosition2D___setslice____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = swig::asptr(argv[3], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPosition2D___setslice____SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D___setslice__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::__setslice__(std::vector< AL::Math::Position2D >::difference_type,std::vector< AL::Math::Position2D >::difference_type)\n"
			"    std::vector< AL::Math::Position2D >::__setslice__(std::vector< AL::Math::Position2D >::difference_type,std::vector< AL::Math::Position2D >::difference_type,std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		std::vector< AL::Math::Position2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D___delslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___delslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___delslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition2D___delslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____delslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___delitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____delitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			result = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)std_vector_Sl_AL_Math_Position2D_Sg____getitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		int res3 = SWIG_OLDOBJ;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res3 = swig::asptr(swig_obj[2], &ptr);
			if (!SWIG_IsOK(res3)) {
				SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg3 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_0(arg1, arg2, (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res3)) delete arg3;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res3)) delete arg3;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____delitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___delitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D___delitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition2D___delitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition2D___delitem____SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D___delitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::__delitem__(std::vector< AL::Math::Position2D >::difference_type)\n"
			"    std::vector< AL::Math::Position2D >::__delitem__(PySliceObject *)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		std::vector< AL::Math::Position2D >::value_type *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___getitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		try {
			result = (std::vector< AL::Math::Position2D >::value_type *) &std_vector_Sl_AL_Math_Position2D_Sg____getitem____SWIG_1((std::vector< AL::Math::Position2D > const *)arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position2D >::value_type(static_cast<const std::vector< AL::Math::Position2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___getitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D___getitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition2D___getitem____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition2D___getitem____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D___getitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::__getitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Position2D >::__getitem__(std::vector< AL::Math::Position2D >::difference_type) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::difference_type arg2;
		std::vector< AL::Math::Position2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D___setitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::difference_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp3);
		try {
			std_vector_Sl_AL_Math_Position2D_Sg____setitem____SWIG_2(arg1, arg2, (AL::Math::Position2D const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___setitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D___setitem__", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition2D___setitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					int res = swig::asptr(argv[2], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition2D___setitem____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition2D___setitem____SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D___setitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::__setitem__(PySliceObject *,std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &)\n"
			"    std::vector< AL::Math::Position2D >::__setitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Position2D >::__setitem__(std::vector< AL::Math::Position2D >::difference_type,std::vector< AL::Math::Position2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::value_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_pop" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		try {
			result = std_vector_Sl_AL_Math_Position2D_Sg__pop(arg1);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position2D >::value_type(static_cast<const std::vector< AL::Math::Position2D >::value_type&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D_append", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_append" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition2D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp2);
		std_vector_Sl_AL_Math_Position2D_Sg__append(arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (std::vector< AL::Math::Position2D > *)new std::vector< AL::Math::Position2D >();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		std::vector< AL::Math::Position2D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorPosition2D" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPosition2D" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const &""'");
			}
			arg1 = ptr;
		}
		result = (std::vector< AL::Math::Position2D > *)new std::vector< AL::Math::Position2D >((std::vector< AL::Math::Position2D > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_empty" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (bool)((std::vector< AL::Math::Position2D > const *)arg1)->empty();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_size" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = ((std::vector< AL::Math::Position2D > const *)arg1)->size();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D_swap", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_swap" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition2D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D > &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp2);
		(arg1)->swap(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_begin" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (arg1)->begin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_end" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (arg1)->end();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_rbegin" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (arg1)->rbegin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_rend" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (arg1)->rend();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_clear" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		(arg1)->clear();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		SwigValueWrapper< std::allocator< AL::Math::Position2D > > result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_get_allocator" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = ((std::vector< AL::Math::Position2D > const *)arg1)->get_allocator();
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position2D >::allocator_type(static_cast<const std::vector< AL::Math::Position2D >::allocator_type&>(result))), SWIGTYPE_p_std__allocatorT_AL__Math__Position2D_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition2D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D >::size_type arg1;
		size_t val1;
		int ecode1 = 0;
		std::vector< AL::Math::Position2D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPosition2D" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val1);
		result = (std::vector< AL::Math::Position2D > *)new std::vector< AL::Math::Position2D >(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_pop_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		(arg1)->pop_back();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val2);
		(arg1)->resize(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::iterator arg2;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		std::vector< AL::Math::Position2D >::iterator result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Position2D_Sg__erase__SWIG_0(arg1, arg2);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::iterator arg2;
		std::vector< AL::Math::Position2D >::iterator arg3;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		swig::SwigPyIterator *iter3 = 0;
		int res3;
		std::vector< AL::Math::Position2D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res3) || !iter3) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter3);
			if (iter_t) {
				arg3 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Position2D_Sg__erase__SWIG_1(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_erase(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D_erase", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter) != 0));
				if (_v) {
					return _wrap_vectorPosition2D_erase__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter) != 0));
				if (_v) {
					swig::SwigPyIterator *iter = 0;
					int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
					_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter) != 0));
					if (_v) {
						return _wrap_vectorPosition2D_erase__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D_erase'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::erase(std::vector< AL::Math::Position2D >::iterator)\n"
			"    std::vector< AL::Math::Position2D >::erase(std::vector< AL::Math::Position2D >::iterator,std::vector< AL::Math::Position2D >::iterator)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition2D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D >::size_type arg1;
		std::vector< AL::Math::Position2D >::value_type *arg2 = 0;
		size_t val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		std::vector< AL::Math::Position2D > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPosition2D" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorPosition2D" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPosition2D" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp2);
		result = (std::vector< AL::Math::Position2D > *)new std::vector< AL::Math::Position2D >(arg1, (std::vector< AL::Math::Position2D >::value_type const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition2D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_vectorPosition2D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_vectorPosition2D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_vectorPosition2D__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_vectorPosition2D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_new_vectorPosition2D__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vectorPosition2D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::vector()\n"
			"    std::vector< AL::Math::Position2D >::vector(std::vector< AL::Math::Position2D > const &)\n"
			"    std::vector< AL::Math::Position2D >::vector(std::vector< AL::Math::Position2D >::size_type)\n"
			"    std::vector< AL::Math::Position2D >::vector(std::vector< AL::Math::Position2D >::size_type,std::vector< AL::Math::Position2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D_push_back", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_push_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition2D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp2);
		(arg1)->push_back((std::vector< AL::Math::Position2D >::value_type const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_front" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (std::vector< AL::Math::Position2D >::value_type *) &((std::vector< AL::Math::Position2D > const *)arg1)->front();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position2D >::value_type(static_cast<const std::vector< AL::Math::Position2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = (std::vector< AL::Math::Position2D >::value_type *) &((std::vector< AL::Math::Position2D > const *)arg1)->back();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position2D >::value_type(static_cast<const std::vector< AL::Math::Position2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::size_type arg2;
		std::vector< AL::Math::Position2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D_assign", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_assign" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D_assign" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition2D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp3);
		(arg1)->assign(arg2, (std::vector< AL::Math::Position2D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::size_type arg2;
		std::vector< AL::Math::Position2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition2D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp3);
		(arg1)->resize(arg2, (std::vector< AL::Math::Position2D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_resize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D_resize", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition2D_resize__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition2D_resize__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D_resize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::resize(std::vector< AL::Math::Position2D >::size_type)\n"
			"    std::vector< AL::Math::Position2D >::resize(std::vector< AL::Math::Position2D >::size_type,std::vector< AL::Math::Position2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::iterator arg2;
		std::vector< AL::Math::Position2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		void *argp3 = 0;
		int res3 = 0;
		std::vector< AL::Math::Position2D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp3);
		result = std_vector_Sl_AL_Math_Position2D_Sg__insert__SWIG_0(arg1, arg2, (AL::Math::Position2D const &)*arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::iterator arg2;
		std::vector< AL::Math::Position2D >::size_type arg3;
		std::vector< AL::Math::Position2D >::value_type *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		size_t val3;
		int ecode3 = 0;
		void *argp4 = 0;
		int res4 = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::iterator""'");
			}
		}
		ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPosition2D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition2D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Position2D >::value_type const &""'");
		}
		arg4 = reinterpret_cast<std::vector< AL::Math::Position2D >::value_type *>(argp4);
		std_vector_Sl_AL_Math_Position2D_Sg__insert__SWIG_1(arg1, arg2, arg3, (AL::Math::Position2D const &)*arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_insert(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition2D_insert", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter) != 0));
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition2D_insert__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position2D >::iterator > *>(iter) != 0));
				if (_v) {
					{
						int res = SWIG_AsVal_size_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPosition2D_insert__SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition2D_insert'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position2D >::insert(std::vector< AL::Math::Position2D >::iterator,std::vector< AL::Math::Position2D >::value_type const &)\n"
			"    std::vector< AL::Math::Position2D >::insert(std::vector< AL::Math::Position2D >::iterator,std::vector< AL::Math::Position2D >::size_type,std::vector< AL::Math::Position2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		std::vector< AL::Math::Position2D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition2D_reserve", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_reserve" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition2D_reserve" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position2D >::size_type>(val2);
		(arg1)->reserve(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D_capacity" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = ((std::vector< AL::Math::Position2D > const *)arg1)->capacity();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition2D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::string result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition2D___repr__" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		result = std_vector_Sl_AL_Math_Position2D_Sg____repr__(arg1);
		resultobj = SWIG_From_std_string(static_cast<std::string>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_vectorPosition2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D > *arg1 = (std::vector< AL::Math::Position2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorPosition2D" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position2D > *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *vectorPosition2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *vectorPosition2D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_vectorPose2D_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		PyObject **arg2 = (PyObject **)0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		swig::SwigPyIterator *result = 0;

		arg2 = &swig_obj[0];
		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_iterator" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (swig::SwigPyIterator *)std_vector_Sl_AL_Math_Pose2D_Sg__iterator(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___nonzero__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Pose2D_Sg____nonzero__((std::vector< AL::Math::Pose2D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___bool__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Pose2D_Sg____bool__((std::vector< AL::Math::Pose2D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___len__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = std_vector_Sl_AL_Math_Pose2D_Sg____len__((std::vector< AL::Math::Pose2D > const *)arg1);
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		std::vector< AL::Math::Pose2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D___getslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___getslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___getslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPose2D___getslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val3);
		try {
			result = (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *)std_vector_Sl_AL_Math_Pose2D_Sg____getslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		std::vector< AL::Math::Pose2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPose2D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____setslice____SWIG_0(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		std::vector< AL::Math::Pose2D >::difference_type arg3;
		std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		int res4 = SWIG_OLDOBJ;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPose2D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val3);
		{
			std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *ptr = (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *)0;
			res4 = swig::asptr(swig_obj[3], &ptr);
			if (!SWIG_IsOK(res4)) {
				SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPose2D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &""'");
			}
			arg4 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____setslice____SWIG_1(arg1, arg2, arg3, (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > const &)*arg4);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res4)) delete arg4;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res4)) delete arg4;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setslice__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D___setslice__", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorPose2D___setslice____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = swig::asptr(argv[3], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPose2D___setslice____SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D___setslice__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::__setslice__(std::vector< AL::Math::Pose2D >::difference_type,std::vector< AL::Math::Pose2D >::difference_type)\n"
			"    std::vector< AL::Math::Pose2D >::__setslice__(std::vector< AL::Math::Pose2D >::difference_type,std::vector< AL::Math::Pose2D >::difference_type,std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		std::vector< AL::Math::Pose2D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D___delslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___delslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___delslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPose2D___delslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____delslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___delitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____delitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			result = (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *)std_vector_Sl_AL_Math_Pose2D_Sg____getitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		int res3 = SWIG_OLDOBJ;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		{
			std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *ptr = (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *)0;
			res3 = swig::asptr(swig_obj[2], &ptr);
			if (!SWIG_IsOK(res3)) {
				SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPose2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &""'");
			}
			arg3 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_0(arg1, arg2, (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res3)) delete arg3;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res3)) delete arg3;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____delitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___delitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D___delitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPose2D___delitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPose2D___delitem____SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D___delitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::__delitem__(std::vector< AL::Math::Pose2D >::difference_type)\n"
			"    std::vector< AL::Math::Pose2D >::__delitem__(PySliceObject *)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		std::vector< AL::Math::Pose2D >::value_type *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___getitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		try {
			result = (std::vector< AL::Math::Pose2D >::value_type *) &std_vector_Sl_AL_Math_Pose2D_Sg____getitem____SWIG_1((std::vector< AL::Math::Pose2D > const *)arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Pose2D >::value_type(static_cast<const std::vector< AL::Math::Pose2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Pose2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Pose2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___getitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D___getitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPose2D___getitem____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPose2D___getitem____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D___getitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::__getitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Pose2D >::__getitem__(std::vector< AL::Math::Pose2D >::difference_type) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::difference_type arg2;
		std::vector< AL::Math::Pose2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D___setitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::difference_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPose2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp3);
		try {
			std_vector_Sl_AL_Math_Pose2D_Sg____setitem____SWIG_2(arg1, arg2, (AL::Math::Pose2D const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___setitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D___setitem__", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPose2D___setitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					int res = swig::asptr(argv[2], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPose2D___setitem____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPose2D___setitem____SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D___setitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::__setitem__(PySliceObject *,std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > const &)\n"
			"    std::vector< AL::Math::Pose2D >::__setitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Pose2D >::__setitem__(std::vector< AL::Math::Pose2D >::difference_type,std::vector< AL::Math::Pose2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::value_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_pop" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		try {
			result = std_vector_Sl_AL_Math_Pose2D_Sg__pop(arg1);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Pose2D >::value_type(static_cast<const std::vector< AL::Math::Pose2D >::value_type&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D_append", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_append" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPose2D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp2);
		std_vector_Sl_AL_Math_Pose2D_Sg__append(arg1, (AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPose2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (std::vector< AL::Math::Pose2D > *)new std::vector< AL::Math::Pose2D >();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPose2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		std::vector< AL::Math::Pose2D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *ptr = (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorPose2D" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPose2D" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const &""'");
			}
			arg1 = ptr;
		}
		result = (std::vector< AL::Math::Pose2D > *)new std::vector< AL::Math::Pose2D >((std::vector< AL::Math::Pose2D > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_empty" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (bool)((std::vector< AL::Math::Pose2D > const *)arg1)->empty();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_size" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = ((std::vector< AL::Math::Pose2D > const *)arg1)->size();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D_swap", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_swap" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPose2D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D > &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp2);
		(arg1)->swap(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_begin" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (arg1)->begin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_end" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (arg1)->end();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_rbegin" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (arg1)->rbegin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_rend" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (arg1)->rend();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_clear" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		(arg1)->clear();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		SwigValueWrapper< std::allocator< AL::Math::Pose2D > > result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_get_allocator" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = ((std::vector< AL::Math::Pose2D > const *)arg1)->get_allocator();
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Pose2D >::allocator_type(static_cast<const std::vector< AL::Math::Pose2D >::allocator_type&>(result))), SWIGTYPE_p_std__allocatorT_AL__Math__Pose2D_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPose2D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D >::size_type arg1;
		size_t val1;
		int ecode1 = 0;
		std::vector< AL::Math::Pose2D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPose2D" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val1);
		result = (std::vector< AL::Math::Pose2D > *)new std::vector< AL::Math::Pose2D >(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_pop_back" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		(arg1)->pop_back();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val2);
		(arg1)->resize(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::iterator arg2;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		std::vector< AL::Math::Pose2D >::iterator result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Pose2D_Sg__erase__SWIG_0(arg1, arg2);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::iterator arg2;
		std::vector< AL::Math::Pose2D >::iterator arg3;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		swig::SwigPyIterator *iter3 = 0;
		int res3;
		std::vector< AL::Math::Pose2D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res3) || !iter3) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter3);
			if (iter_t) {
				arg3 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Pose2D_Sg__erase__SWIG_1(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_erase(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D_erase", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter) != 0));
				if (_v) {
					return _wrap_vectorPose2D_erase__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter) != 0));
				if (_v) {
					swig::SwigPyIterator *iter = 0;
					int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
					_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter) != 0));
					if (_v) {
						return _wrap_vectorPose2D_erase__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D_erase'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::erase(std::vector< AL::Math::Pose2D >::iterator)\n"
			"    std::vector< AL::Math::Pose2D >::erase(std::vector< AL::Math::Pose2D >::iterator,std::vector< AL::Math::Pose2D >::iterator)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPose2D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D >::size_type arg1;
		std::vector< AL::Math::Pose2D >::value_type *arg2 = 0;
		size_t val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		std::vector< AL::Math::Pose2D > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPose2D" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorPose2D" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPose2D" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp2);
		result = (std::vector< AL::Math::Pose2D > *)new std::vector< AL::Math::Pose2D >(arg1, (std::vector< AL::Math::Pose2D >::value_type const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPose2D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_vectorPose2D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_vectorPose2D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_vectorPose2D__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_vectorPose2D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_new_vectorPose2D__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vectorPose2D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::vector()\n"
			"    std::vector< AL::Math::Pose2D >::vector(std::vector< AL::Math::Pose2D > const &)\n"
			"    std::vector< AL::Math::Pose2D >::vector(std::vector< AL::Math::Pose2D >::size_type)\n"
			"    std::vector< AL::Math::Pose2D >::vector(std::vector< AL::Math::Pose2D >::size_type,std::vector< AL::Math::Pose2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D_push_back", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_push_back" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPose2D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp2);
		(arg1)->push_back((std::vector< AL::Math::Pose2D >::value_type const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_front" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (std::vector< AL::Math::Pose2D >::value_type *) &((std::vector< AL::Math::Pose2D > const *)arg1)->front();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Pose2D >::value_type(static_cast<const std::vector< AL::Math::Pose2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Pose2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Pose2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_back" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = (std::vector< AL::Math::Pose2D >::value_type *) &((std::vector< AL::Math::Pose2D > const *)arg1)->back();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Pose2D >::value_type(static_cast<const std::vector< AL::Math::Pose2D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Pose2D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Pose2D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::size_type arg2;
		std::vector< AL::Math::Pose2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D_assign", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_assign" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D_assign" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPose2D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp3);
		(arg1)->assign(arg2, (std::vector< AL::Math::Pose2D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::size_type arg2;
		std::vector< AL::Math::Pose2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPose2D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp3);
		(arg1)->resize(arg2, (std::vector< AL::Math::Pose2D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_resize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D_resize", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPose2D_resize__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPose2D_resize__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D_resize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::resize(std::vector< AL::Math::Pose2D >::size_type)\n"
			"    std::vector< AL::Math::Pose2D >::resize(std::vector< AL::Math::Pose2D >::size_type,std::vector< AL::Math::Pose2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::iterator arg2;
		std::vector< AL::Math::Pose2D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		void *argp3 = 0;
		int res3 = 0;
		std::vector< AL::Math::Pose2D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPose2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp3);
		result = std_vector_Sl_AL_Math_Pose2D_Sg__insert__SWIG_0(arg1, arg2, (AL::Math::Pose2D const &)*arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Pose2D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::iterator arg2;
		std::vector< AL::Math::Pose2D >::size_type arg3;
		std::vector< AL::Math::Pose2D >::value_type *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		size_t val3;
		int ecode3 = 0;
		void *argp4 = 0;
		int res4 = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPose2D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::iterator""'");
			}
		}
		ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPose2D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPose2D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPose2D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Pose2D >::value_type const &""'");
		}
		arg4 = reinterpret_cast<std::vector< AL::Math::Pose2D >::value_type *>(argp4);
		std_vector_Sl_AL_Math_Pose2D_Sg__insert__SWIG_1(arg1, arg2, arg3, (AL::Math::Pose2D const &)*arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_insert(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPose2D_insert", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter) != 0));
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPose2D_insert__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Pose2D >::iterator > *>(iter) != 0));
				if (_v) {
					{
						int res = SWIG_AsVal_size_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPose2D_insert__SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPose2D_insert'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Pose2D >::insert(std::vector< AL::Math::Pose2D >::iterator,std::vector< AL::Math::Pose2D >::value_type const &)\n"
			"    std::vector< AL::Math::Pose2D >::insert(std::vector< AL::Math::Pose2D >::iterator,std::vector< AL::Math::Pose2D >::size_type,std::vector< AL::Math::Pose2D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		std::vector< AL::Math::Pose2D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPose2D_reserve", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_reserve" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPose2D_reserve" "', argument " "2"" of type '" "std::vector< AL::Math::Pose2D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Pose2D >::size_type>(val2);
		(arg1)->reserve(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Pose2D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D_capacity" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = ((std::vector< AL::Math::Pose2D > const *)arg1)->capacity();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPose2D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::string result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPose2D___repr__" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		result = std_vector_Sl_AL_Math_Pose2D_Sg____repr__(arg1);
		resultobj = SWIG_From_std_string(static_cast<std::string>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_vectorPose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Pose2D > *arg1 = (std::vector< AL::Math::Pose2D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorPose2D" "', argument " "1"" of type '" "std::vector< AL::Math::Pose2D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Pose2D > *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *vectorPose2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *vectorPose2D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_vectorPosition6D_iterator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		PyObject **arg2 = (PyObject **)0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		swig::SwigPyIterator *result = 0;

		arg2 = &swig_obj[0];
		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_iterator" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (swig::SwigPyIterator *)std_vector_Sl_AL_Math_Position6D_Sg__iterator(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_swig__SwigPyIterator, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___nonzero__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___nonzero__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Position6D_Sg____nonzero__((std::vector< AL::Math::Position6D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___bool__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___bool__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (bool)std_vector_Sl_AL_Math_Position6D_Sg____bool__((std::vector< AL::Math::Position6D > const *)arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___len__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = std_vector_Sl_AL_Math_Position6D_Sg____len__((std::vector< AL::Math::Position6D > const *)arg1);
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___getslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		std::vector< AL::Math::Position6D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D___getslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___getslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___getslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition6D___getslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val3);
		try {
			result = (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *)std_vector_Sl_AL_Math_Position6D_Sg____getslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setslice____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		std::vector< AL::Math::Position6D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition6D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____setslice____SWIG_0(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setslice____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		std::vector< AL::Math::Position6D >::difference_type arg3;
		std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		int res4 = SWIG_OLDOBJ;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___setslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___setslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition6D___setslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val3);
		{
			std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *ptr = (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *)0;
			res4 = swig::asptr(swig_obj[3], &ptr);
			if (!SWIG_IsOK(res4)) {
				SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPosition6D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D___setslice__" "', argument " "4"" of type '" "std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &""'");
			}
			arg4 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____setslice____SWIG_1(arg1, arg2, arg3, (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > const &)*arg4);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res4)) delete arg4;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res4)) delete arg4;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setslice__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D___setslice__", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_vectorPosition6D___setslice____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_ptrdiff_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = swig::asptr(argv[3], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPosition6D___setslice____SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D___setslice__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::__setslice__(std::vector< AL::Math::Position6D >::difference_type,std::vector< AL::Math::Position6D >::difference_type)\n"
			"    std::vector< AL::Math::Position6D >::__setslice__(std::vector< AL::Math::Position6D >::difference_type,std::vector< AL::Math::Position6D >::difference_type,std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___delslice__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		std::vector< AL::Math::Position6D >::difference_type arg3;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		ptrdiff_t val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D___delslice__", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___delslice__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___delslice__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		ecode3 = SWIG_AsVal_ptrdiff_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition6D___delslice__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val3);
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____delslice__(arg1, arg2, arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___delitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___delitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____delitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___getitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D___getitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			result = (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *)std_vector_Sl_AL_Math_Position6D_Sg____getitem____SWIG_0(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setitem____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		int res3 = SWIG_OLDOBJ;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		{
			std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *ptr = (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *)0;
			res3 = swig::asptr(swig_obj[2], &ptr);
			if (!SWIG_IsOK(res3)) {
				SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition6D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &""'");
			}
			arg3 = ptr;
		}
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_0(arg1, arg2, (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res3)) delete arg3;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res3)) delete arg3;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D___setitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___delitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		PySliceObject *arg2 = (PySliceObject *)0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___delitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		{
			if (!PySlice_Check(swig_obj[1])) {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D___delitem__" "', argument " "2"" of type '" "PySliceObject *""'");
			}
			arg2 = (PySliceObject *)swig_obj[1];
		}
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____delitem____SWIG_1(arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		catch (std::invalid_argument &_e) {
			SWIG_exception_fail(SWIG_ValueError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___delitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D___delitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition6D___delitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition6D___delitem____SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D___delitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::__delitem__(std::vector< AL::Math::Position6D >::difference_type)\n"
			"    std::vector< AL::Math::Position6D >::__delitem__(PySliceObject *)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___getitem____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		std::vector< AL::Math::Position6D >::value_type *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___getitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___getitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		try {
			result = (std::vector< AL::Math::Position6D >::value_type *) &std_vector_Sl_AL_Math_Position6D_Sg____getitem____SWIG_1((std::vector< AL::Math::Position6D > const *)arg1, arg2);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position6D >::value_type(static_cast<const std::vector< AL::Math::Position6D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position6D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position6D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___getitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D___getitem__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition6D___getitem____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition6D___getitem____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D___getitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::__getitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Position6D >::__getitem__(std::vector< AL::Math::Position6D >::difference_type) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setitem____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::difference_type arg2;
		std::vector< AL::Math::Position6D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		ptrdiff_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___setitem__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_ptrdiff_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D___setitem__" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::difference_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::difference_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition6D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D___setitem__" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp3);
		try {
			std_vector_Sl_AL_Math_Position6D_Sg____setitem____SWIG_2(arg1, arg2, (AL::Math::Position6D const &)*arg3);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___setitem__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D___setitem__", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					return _wrap_vectorPosition6D___setitem____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					_v = PySlice_Check(argv[1]);
				}
				if (_v) {
					int res = swig::asptr(argv[2], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition6D___setitem____SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_ptrdiff_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition6D___setitem____SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D___setitem__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::__setitem__(PySliceObject *,std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > const &)\n"
			"    std::vector< AL::Math::Position6D >::__setitem__(PySliceObject *)\n"
			"    std::vector< AL::Math::Position6D >::__setitem__(std::vector< AL::Math::Position6D >::difference_type,std::vector< AL::Math::Position6D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_pop(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::value_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_pop" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		try {
			result = std_vector_Sl_AL_Math_Position6D_Sg__pop(arg1);
		}
		catch (std::out_of_range &_e) {
			SWIG_exception_fail(SWIG_IndexError, (&_e)->what());
		}
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position6D >::value_type(static_cast<const std::vector< AL::Math::Position6D >::value_type&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_append(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D_append", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_append" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition6D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_append" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp2);
		std_vector_Sl_AL_Math_Position6D_Sg__append(arg1, (AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition6D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (std::vector< AL::Math::Position6D > *)new std::vector< AL::Math::Position6D >();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition6D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		std::vector< AL::Math::Position6D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *ptr = (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_vectorPosition6D" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPosition6D" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const &""'");
			}
			arg1 = ptr;
		}
		result = (std::vector< AL::Math::Position6D > *)new std::vector< AL::Math::Position6D >((std::vector< AL::Math::Position6D > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_empty" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (bool)((std::vector< AL::Math::Position6D > const *)arg1)->empty();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_size" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = ((std::vector< AL::Math::Position6D > const *)arg1)->size();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_swap(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D_swap", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_swap" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition6D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_swap" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D > &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp2);
		(arg1)->swap(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_begin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_begin" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (arg1)->begin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_end(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_end" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (arg1)->end();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_rbegin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_rbegin" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (arg1)->rbegin();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_rend(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::reverse_iterator result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_rend" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (arg1)->rend();
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::reverse_iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_clear" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		(arg1)->clear();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_get_allocator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		SwigValueWrapper< std::allocator< AL::Math::Position6D > > result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_get_allocator" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = ((std::vector< AL::Math::Position6D > const *)arg1)->get_allocator();
		resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position6D >::allocator_type(static_cast<const std::vector< AL::Math::Position6D >::allocator_type&>(result))), SWIGTYPE_p_std__allocatorT_AL__Math__Position6D_t, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition6D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D >::size_type arg1;
		size_t val1;
		int ecode1 = 0;
		std::vector< AL::Math::Position6D > *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPosition6D" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val1);
		result = (std::vector< AL::Math::Position6D > *)new std::vector< AL::Math::Position6D >(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_pop_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_pop_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		(arg1)->pop_back();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_resize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val2);
		(arg1)->resize(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_erase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::iterator arg2;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		std::vector< AL::Math::Position6D >::iterator result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Position6D_Sg__erase__SWIG_0(arg1, arg2);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_erase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::iterator arg2;
		std::vector< AL::Math::Position6D >::iterator arg3;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		swig::SwigPyIterator *iter3 = 0;
		int res3;
		std::vector< AL::Math::Position6D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_erase" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], SWIG_as_voidptrptr(&iter3), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res3) || !iter3) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter3);
			if (iter_t) {
				arg3 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_erase" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
			}
		}
		result = std_vector_Sl_AL_Math_Position6D_Sg__erase__SWIG_1(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_erase(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D_erase", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter) != 0));
				if (_v) {
					return _wrap_vectorPosition6D_erase__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter) != 0));
				if (_v) {
					swig::SwigPyIterator *iter = 0;
					int res = SWIG_ConvertPtr(argv[2], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
					_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter) != 0));
					if (_v) {
						return _wrap_vectorPosition6D_erase__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D_erase'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::erase(std::vector< AL::Math::Position6D >::iterator)\n"
			"    std::vector< AL::Math::Position6D >::erase(std::vector< AL::Math::Position6D >::iterator,std::vector< AL::Math::Position6D >::iterator)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition6D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D >::size_type arg1;
		std::vector< AL::Math::Position6D >::value_type *arg2 = 0;
		size_t val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		std::vector< AL::Math::Position6D > *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_size_t(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_vectorPosition6D" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg1 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_vectorPosition6D" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_vectorPosition6D" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp2);
		result = (std::vector< AL::Math::Position6D > *)new std::vector< AL::Math::Position6D >(arg1, (std::vector< AL::Math::Position6D >::value_type const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_vectorPosition6D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_vectorPosition6D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_vectorPosition6D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_vectorPosition6D__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_vectorPosition6D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_size_t(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_new_vectorPosition6D__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_vectorPosition6D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::vector()\n"
			"    std::vector< AL::Math::Position6D >::vector(std::vector< AL::Math::Position6D > const &)\n"
			"    std::vector< AL::Math::Position6D >::vector(std::vector< AL::Math::Position6D >::size_type)\n"
			"    std::vector< AL::Math::Position6D >::vector(std::vector< AL::Math::Position6D >::size_type,std::vector< AL::Math::Position6D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_push_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::value_type *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D_push_back", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_push_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "vectorPosition6D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_push_back" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg2 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp2);
		(arg1)->push_back((std::vector< AL::Math::Position6D >::value_type const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_front(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_front" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (std::vector< AL::Math::Position6D >::value_type *) &((std::vector< AL::Math::Position6D > const *)arg1)->front();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position6D >::value_type(static_cast<const std::vector< AL::Math::Position6D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position6D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position6D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_back(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::value_type *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_back" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = (std::vector< AL::Math::Position6D >::value_type *) &((std::vector< AL::Math::Position6D > const *)arg1)->back();
		{
			resultobj = SWIG_NewPointerObj((new std::vector< AL::Math::Position6D >::value_type(static_cast<const std::vector< AL::Math::Position6D >::value_type&>(*result))), SWIGTYPE_p_AL__Math__Position6D,
				SWIG_POINTER_OWN | 0);
		}
		(void)swig::container_owner<swig::traits<std::vector< AL::Math::Position6D >::value_type>::category>::back_reference(resultobj, swig_obj[0]);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_assign(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::size_type arg2;
		std::vector< AL::Math::Position6D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D_assign", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_assign" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D_assign" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition6D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_assign" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp3);
		(arg1)->assign(arg2, (std::vector< AL::Math::Position6D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_resize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::size_type arg2;
		std::vector< AL::Math::Position6D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_resize" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D_resize" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition6D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_resize" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp3);
		(arg1)->resize(arg2, (std::vector< AL::Math::Position6D >::value_type const &)*arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_resize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D_resize", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_vectorPosition6D_resize__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_size_t(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition6D_resize__SWIG_1(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D_resize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::resize(std::vector< AL::Math::Position6D >::size_type)\n"
			"    std::vector< AL::Math::Position6D >::resize(std::vector< AL::Math::Position6D >::size_type,std::vector< AL::Math::Position6D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_insert__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::iterator arg2;
		std::vector< AL::Math::Position6D >::value_type *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		void *argp3 = 0;
		int res3 = 0;
		std::vector< AL::Math::Position6D >::iterator result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
			}
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "vectorPosition6D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp3);
		result = std_vector_Sl_AL_Math_Position6D_Sg__insert__SWIG_0(arg1, arg2, (AL::Math::Position6D const &)*arg3);
		resultobj = SWIG_NewPointerObj(swig::make_output_iterator(static_cast<const std::vector< AL::Math::Position6D >::iterator &>(result)),
			swig::SwigPyIterator::descriptor(), SWIG_POINTER_OWN);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_insert__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::iterator arg2;
		std::vector< AL::Math::Position6D >::size_type arg3;
		std::vector< AL::Math::Position6D >::value_type *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		swig::SwigPyIterator *iter2 = 0;
		int res2;
		size_t val3;
		int ecode3 = 0;
		void *argp4 = 0;
		int res4 = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_insert" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], SWIG_as_voidptrptr(&iter2), swig::SwigPyIterator::descriptor(), 0);
		if (!SWIG_IsOK(res2) || !iter2) {
			SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
		}
		else {
			swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *iter_t = dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter2);
			if (iter_t) {
				arg2 = iter_t->get_current();
			}
			else {
				SWIG_exception_fail(SWIG_ArgError(SWIG_TypeError), "in method '" "vectorPosition6D_insert" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::iterator""'");
			}
		}
		ecode3 = SWIG_AsVal_size_t(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "vectorPosition6D_insert" "', argument " "3"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg3 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "vectorPosition6D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "vectorPosition6D_insert" "', argument " "4"" of type '" "std::vector< AL::Math::Position6D >::value_type const &""'");
		}
		arg4 = reinterpret_cast<std::vector< AL::Math::Position6D >::value_type *>(argp4);
		std_vector_Sl_AL_Math_Position6D_Sg__insert__SWIG_1(arg1, arg2, arg3, (AL::Math::Position6D const &)*arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_insert(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "vectorPosition6D_insert", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter) != 0));
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_vectorPosition6D_insert__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< AL::Math::Position6D, std::allocator< AL::Math::Position6D > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				swig::SwigPyIterator *iter = 0;
				int res = SWIG_ConvertPtr(argv[1], SWIG_as_voidptrptr(&iter), swig::SwigPyIterator::descriptor(), 0);
				_v = (SWIG_IsOK(res) && iter && (dynamic_cast<swig::SwigPyIterator_T<std::vector< AL::Math::Position6D >::iterator > *>(iter) != 0));
				if (_v) {
					{
						int res = SWIG_AsVal_size_t(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_vectorPosition6D_insert__SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'vectorPosition6D_insert'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    std::vector< AL::Math::Position6D >::insert(std::vector< AL::Math::Position6D >::iterator,std::vector< AL::Math::Position6D >::value_type const &)\n"
			"    std::vector< AL::Math::Position6D >::insert(std::vector< AL::Math::Position6D >::iterator,std::vector< AL::Math::Position6D >::size_type,std::vector< AL::Math::Position6D >::value_type const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_reserve(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		std::vector< AL::Math::Position6D >::size_type arg2;
		void *argp1 = 0;
		int res1 = 0;
		size_t val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "vectorPosition6D_reserve", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_reserve" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		ecode2 = SWIG_AsVal_size_t(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "vectorPosition6D_reserve" "', argument " "2"" of type '" "std::vector< AL::Math::Position6D >::size_type""'");
		}
		arg2 = static_cast<std::vector< AL::Math::Position6D >::size_type>(val2);
		(arg1)->reserve(arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D_capacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::vector< AL::Math::Position6D >::size_type result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D_capacity" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > const *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = ((std::vector< AL::Math::Position6D > const *)arg1)->capacity();
		resultobj = SWIG_From_size_t(static_cast<size_t>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_vectorPosition6D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		std::string result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "vectorPosition6D___repr__" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		result = std_vector_Sl_AL_Math_Position6D_Sg____repr__(arg1);
		resultobj = SWIG_From_std_string(static_cast<std::string>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_vectorPosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position6D > *arg1 = (std::vector< AL::Math::Position6D > *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_vectorPosition6D" "', argument " "1"" of type '" "std::vector< AL::Math::Position6D > *""'");
		}
		arg1 = reinterpret_cast<std::vector< AL::Math::Position6D > *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *vectorPosition6D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *vectorPosition6D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_DigitalFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::DigitalFilter *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_DigitalFilter", 0, 0, 0)) SWIG_fail;
		result = (AL::Math::DSP::DigitalFilter *)new AL::Math::DSP::DigitalFilter();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__DSP__DigitalFilter, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_DigitalFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::DigitalFilter *arg1 = (AL::Math::DSP::DigitalFilter *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__DigitalFilter, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DigitalFilter" "', argument " "1"" of type '" "AL::Math::DSP::DigitalFilter *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::DigitalFilter *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_DigitalFilter_configureFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::DigitalFilter *arg1 = (AL::Math::DSP::DigitalFilter *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		std::vector< float, std::allocator< float > > *arg3 = 0;
		float arg4;
		void *argp1 = 0;
		int res1 = 0;
		int res2 = SWIG_OLDOBJ;
		int res3 = SWIG_OLDOBJ;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];

		if (!SWIG_Python_UnpackTuple(args, "DigitalFilter_configureFilter", 4, 4, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__DigitalFilter, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DigitalFilter_configureFilter" "', argument " "1"" of type '" "AL::Math::DSP::DigitalFilter *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::DigitalFilter *>(argp1);
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res2 = swig::asptr(swig_obj[1], &ptr);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DigitalFilter_configureFilter" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DigitalFilter_configureFilter" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg2 = ptr;
		}
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res3 = swig::asptr(swig_obj[2], &ptr);
			if (!SWIG_IsOK(res3)) {
				SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "DigitalFilter_configureFilter" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "DigitalFilter_configureFilter" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg3 = ptr;
		}
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "DigitalFilter_configureFilter" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		(arg1)->configureFilter((std::vector< float, std::allocator< float > > const &)*arg2, (std::vector< float, std::allocator< float > > const &)*arg3, arg4);
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res2)) delete arg2;
		if (SWIG_IsNewObj(res3)) delete arg3;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res2)) delete arg2;
		if (SWIG_IsNewObj(res3)) delete arg3;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_DigitalFilter_resetFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::DigitalFilter *arg1 = (AL::Math::DSP::DigitalFilter *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__DigitalFilter, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DigitalFilter_resetFilter" "', argument " "1"" of type '" "AL::Math::DSP::DigitalFilter *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::DigitalFilter *>(argp1);
		(arg1)->resetFilter();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_DigitalFilter_processFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::DigitalFilter *arg1 = (AL::Math::DSP::DigitalFilter *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "DigitalFilter_processFilter", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__DigitalFilter, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DigitalFilter_processFilter" "', argument " "1"" of type '" "AL::Math::DSP::DigitalFilter *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::DigitalFilter *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DigitalFilter_processFilter" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (float)(arg1)->processFilter(arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *DigitalFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__DSP__DigitalFilter, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *DigitalFilter_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_PIDController__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::DSP::PIDController *)new AL::Math::DSP::PIDController();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__DSP__PIDController, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PIDController__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float arg5;
		float arg6;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		float val5;
		int ecode5 = 0;
		float val6;
		int ecode6 = 0;
		AL::Math::DSP::PIDController *result = 0;

		if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PIDController" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PIDController" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_PIDController" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_PIDController" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_PIDController" "', argument " "5"" of type '" "float""'");
		}
		arg5 = static_cast<float>(val5);
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_PIDController" "', argument " "6"" of type '" "float""'");
		}
		arg6 = static_cast<float>(val6);
		result = (AL::Math::DSP::PIDController *)new AL::Math::DSP::PIDController(arg1, arg2, arg3, arg4, arg5, arg6);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__DSP__PIDController, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PIDController(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[7] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_PIDController", 0, 6, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_PIDController__SWIG_0(self, argc, argv);
		}
		if (argc == 6) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									return _wrap_new_PIDController__SWIG_1(self, argc, argv);
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PIDController'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::DSP::PIDController::PIDController()\n"
			"    AL::Math::DSP::PIDController::PIDController(float,float,float,float,float,float)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_delete_PIDController(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PIDController" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_initialize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		void *argp1 = 0;
		int res1 = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_initialize" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		(arg1)->initialize();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_initialize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		float arg2;
		float arg3;
		float arg4;
		float arg5;
		float arg6;
		float arg7;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		float val5;
		int ecode5 = 0;
		float val6;
		int ecode6 = 0;
		float val7;
		int ecode7 = 0;

		if ((nobjs < 7) || (nobjs > 7)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_initialize" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PIDController_initialize" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PIDController_initialize" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PIDController_initialize" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "PIDController_initialize" "', argument " "5"" of type '" "float""'");
		}
		arg5 = static_cast<float>(val5);
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "PIDController_initialize" "', argument " "6"" of type '" "float""'");
		}
		arg6 = static_cast<float>(val6);
		ecode7 = SWIG_AsVal_float(swig_obj[6], &val7);
		if (!SWIG_IsOK(ecode7)) {
			SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "PIDController_initialize" "', argument " "7"" of type '" "float""'");
		}
		arg7 = static_cast<float>(val7);
		(arg1)->initialize(arg2, arg3, arg4, arg5, arg6, arg7);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_initialize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[8] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "PIDController_initialize", 0, 7, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__DSP__PIDController, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_PIDController_initialize__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 7) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__DSP__PIDController, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									{
										int res = SWIG_AsVal_float(argv[6], NULL);
										_v = SWIG_CheckState(res);
									}
									if (_v) {
										return _wrap_PIDController_initialize__SWIG_1(self, argc, argv);
									}
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PIDController_initialize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::DSP::PIDController::initialize()\n"
			"    AL::Math::DSP::PIDController::initialize(float,float,float,float,float,float)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_PIDController_computeFeedback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		float arg2;
		float arg3;
		float arg4;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		float result;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_computeFeedback" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PIDController_computeFeedback" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PIDController_computeFeedback" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PIDController_computeFeedback" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = (float)(arg1)->computeFeedback(arg2, arg3, arg4);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_computeFeedback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		float arg2;
		float arg3;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_computeFeedback" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PIDController_computeFeedback" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PIDController_computeFeedback" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (float)(arg1)->computeFeedback(arg2, arg3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_computeFeedback(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "PIDController_computeFeedback", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__DSP__PIDController, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_PIDController_computeFeedback__SWIG_1(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__DSP__PIDController, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_PIDController_computeFeedback__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PIDController_computeFeedback'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::DSP::PIDController::computeFeedback(float,float,float)\n"
			"    AL::Math::DSP::PIDController::computeFeedback(float,float)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_PIDController_computeFeedbackAbsolute(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "PIDController_computeFeedbackAbsolute", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_computeFeedbackAbsolute" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PIDController_computeFeedbackAbsolute" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (float)(arg1)->computeFeedbackAbsolute(arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PIDController_setGains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::DSP::PIDController *arg1 = (AL::Math::DSP::PIDController *) 0;
		float arg2;
		float arg3;
		float arg4;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];

		if (!SWIG_Python_UnpackTuple(args, "PIDController_setGains", 4, 4, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__DSP__PIDController, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PIDController_setGains" "', argument " "1"" of type '" "AL::Math::DSP::PIDController *""'");
		}
		arg1 = reinterpret_cast<AL::Math::DSP::PIDController *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PIDController_setGains" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PIDController_setGains" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "PIDController_setGains" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		(arg1)->setGains(arg2, arg3, arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *PIDController_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__DSP__PIDController, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *PIDController_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN int Swig_var_AXIS_MASK_X_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_X is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_X_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_X));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_Y_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_Y is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_Y_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_Y));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_XY_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_XY is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_XY_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_XY));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_Z_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_Z is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_Z_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_Z));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_WX_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_WX is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_WX_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_WX));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_WY_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_WY is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_WY_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_WY));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_WZ_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_WZ is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_WZ_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_WZ));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_WYWZ_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_WYWZ is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_WYWZ_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_WYWZ));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_ALL_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_ALL is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_ALL_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_ALL));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_VEL_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_VEL is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_VEL_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_VEL));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_ROT_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_ROT is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_ROT_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_ROT));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_NONE_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_NONE is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_NONE_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_NONE));
		return pyobj;
	}


	SWIGINTERN int Swig_var_AXIS_MASK_PLANEZ_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable AXIS_MASK_PLANEZ is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_AXIS_MASK_PLANEZ_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_int(static_cast<int>(AL::Math::AXIS_MASK_PLANEZ));
		return pyobj;
	}


	SWIGINTERN PyObject *_wrap_isAxisMask(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		int arg1;
		int val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		bool result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "isAxisMask" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		result = (bool)AL::Math::isAxisMask(arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_x_set" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D_x_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_x_get" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (float)((arg1)->x);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_y_set" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D_y_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_y_get" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (float)((arg1)->y);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_theta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_theta_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_theta_set" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D_theta_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->theta = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_theta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_theta_get" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (float)((arg1)->theta);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Pose2D *)new AL::Math::Pose2D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pose2D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Pose2D *)new AL::Math::Pose2D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pose2D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pose2D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pose2D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::Pose2D *)new AL::Math::Pose2D(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pose2D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pose2D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Pose2D *)new AL::Math::Pose2D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Pose2D", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Pose2D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Pose2D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Pose2D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Pose2D__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Pose2D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Pose2D::Pose2D()\n"
			"    AL::Math::Pose2D::Pose2D(float)\n"
			"    AL::Math::Pose2D::Pose2D(float,float,float)\n"
			"    AL::Math::Pose2D::Pose2D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_fromPolarCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_fromPolarCoordinates", 2, 2, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Pose2D_fromPolarCoordinates" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D_fromPolarCoordinates" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL::Math::Pose2D::fromPolarCoordinates(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___add__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___add__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___add__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = ((AL::Math::Pose2D const *)arg1)->operator +((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___sub__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___sub__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___sub__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = ((AL::Math::Pose2D const *)arg1)->operator -((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___pos__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = ((AL::Math::Pose2D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___neg__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = ((AL::Math::Pose2D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___iadd__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___iadd__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___iadd__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (AL::Math::Pose2D *) &(arg1)->operator +=((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___isub__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___isub__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___isub__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (AL::Math::Pose2D *) &(arg1)->operator -=((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___imul__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___imul__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___imul__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (AL::Math::Pose2D *) &(arg1)->operator *=((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___mul__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___mul__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___mul__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = ((AL::Math::Pose2D const *)arg1)->operator *((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___eq__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___eq__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___eq__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (bool)((AL::Math::Pose2D const *)arg1)->operator ==((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___ne__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D___ne__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D___ne__" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (bool)((AL::Math::Pose2D const *)arg1)->operator !=((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___mul__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Pose2D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___mul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Pose2D___mul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Pose2D___mul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Pose2D___mul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___truediv__" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Pose2D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Pose2D *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___imul__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Pose2D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___imul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Pose2D___imul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Pose2D___imul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Pose2D___imul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Pose2D___imul__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Pose2D::operator *=(AL::Math::Pose2D const &)\n"
			"    AL::Math::Pose2D::operator *=(float)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___itruediv__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Pose2D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_distanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_distanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_distanceSquared" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (float)((AL::Math::Pose2D const *)arg1)->distanceSquared((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_distance" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_distance" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_distance" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (float)((AL::Math::Pose2D const *)arg1)->distance((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_inverse" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = ((AL::Math::Pose2D const *)arg1)->inverse();
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_diff", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_diff" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_diff" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_diff" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = ((AL::Math::Pose2D const *)arg1)->diff((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_isNear" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_isNear" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_isNear" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Pose2D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Pose2D const *)arg1)->isNear((AL::Math::Pose2D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_isNear" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_isNear" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_isNear" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (bool)((AL::Math::Pose2D const *)arg1)->isNear((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Pose2D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Pose2D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Pose2D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Pose2D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Pose2D::isNear(AL::Math::Pose2D const &,float const &) const\n"
			"    AL::Math::Pose2D::isNear(AL::Math::Pose2D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_toVector" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Pose2D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_toVector" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = ((AL::Math::Pose2D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Pose2D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Pose2D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Pose2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Pose2D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Pose2D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Pose2D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Pose2D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_writeToVector" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Pose2D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_norm" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (float)((AL::Math::Pose2D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_normalize" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = ((AL::Math::Pose2D const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D_getAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D_getAngle" "', argument " "1"" of type '" "AL::Math::Pose2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (float)((AL::Math::Pose2D const *)arg1)->getAngle();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___repr__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = (char *)AL_Math_Pose2D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2D___rmul__" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Pose2D___rmul__(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Pose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = (AL::Math::Pose2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pose2D" "', argument " "1"" of type '" "AL::Math::Pose2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Pose2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Pose2D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Pose2D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_distanceSquared__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (float)AL::Math::distanceSquared((AL::Math::Pose2D const &)*arg1, (AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_distance__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = (float)AL::Math::distance((AL::Math::Pose2D const &)*arg1, (AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2dInvertInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2dInvertInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2dInvertInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		AL::Math::pose2dInvertInPlace(*arg1);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pinv__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pinv" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pinv" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = AL::Math::pinv((AL::Math::Pose2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2dDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "pose2dDiff", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2dDiff" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2dDiff" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pose2dDiff" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2dDiff" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = AL::Math::pose2dDiff((AL::Math::Pose2D const &)*arg1, (AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DInverse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DInverse" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DInverse" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = AL::Math::pose2DInverse((AL::Math::Pose2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DInverse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DInverse" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DInverse" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pose2DInverse" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DInverse" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		AL::Math::pose2DInverse((AL::Math::Pose2D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DInverse(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "pose2DInverse", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_pose2DInverse__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_pose2DInverse__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'pose2DInverse'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::pose2DInverse(AL::Math::Pose2D const &)\n"
			"    AL::Math::pose2DInverse(AL::Math::Pose2D const &,AL::Math::Pose2D &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position2D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position2D_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_x_set" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D_x_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_x_get" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (float)((arg1)->x);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position2D_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_y_set" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D_y_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_y_get" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (float)((arg1)->y);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Position2D *)new AL::Math::Position2D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Position2D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position2D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Position2D *)new AL::Math::Position2D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position2D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Position2D *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position2D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position2D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position2D *)new AL::Math::Position2D(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position2D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Position2D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position2D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position2D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Position2D *)new AL::Math::Position2D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position2D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Position2D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Position2D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Position2D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Position2D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_Position2D__SWIG_2(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Position2D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position2D::Position2D()\n"
			"    AL::Math::Position2D::Position2D(float)\n"
			"    AL::Math::Position2D::Position2D(float,float)\n"
			"    AL::Math::Position2D::Position2D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position2D_fromPolarCoordinates(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D_fromPolarCoordinates", 2, 2, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Position2D_fromPolarCoordinates" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D_fromPolarCoordinates" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL::Math::Position2D::fromPolarCoordinates(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___add__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___add__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___add__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = ((AL::Math::Position2D const *)arg1)->operator +((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___sub__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___sub__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___sub__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = ((AL::Math::Position2D const *)arg1)->operator -((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___pos__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = ((AL::Math::Position2D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___neg__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = ((AL::Math::Position2D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___iadd__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___iadd__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___iadd__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (AL::Math::Position2D *) &(arg1)->operator +=((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___isub__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___isub__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___isub__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (AL::Math::Position2D *) &(arg1)->operator -=((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___eq__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___eq__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___eq__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (bool)((AL::Math::Position2D const *)arg1)->operator ==((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___ne__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D___ne__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D___ne__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (bool)((AL::Math::Position2D const *)arg1)->operator !=((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___mul__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position2D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___truediv__" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position2D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position2D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___imul__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position2D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___itruediv__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position2D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_distanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D_distanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_distanceSquared" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)((AL::Math::Position2D const *)arg1)->distanceSquared((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_distance" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_distance" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_distance" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)((AL::Math::Position2D const *)arg1)->distance((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_isNear" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_isNear" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_isNear" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Position2D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Position2D const *)arg1)->isNear((AL::Math::Position2D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_isNear" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_isNear" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_isNear" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (bool)((AL::Math::Position2D const *)arg1)->isNear((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position2D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position2D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Position2D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position2D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position2D::isNear(AL::Math::Position2D const &,float const &) const\n"
			"    AL::Math::Position2D::isNear(AL::Math::Position2D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position2D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_norm" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (float)((AL::Math::Position2D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_normalize" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = ((AL::Math::Position2D const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_dotProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D_dotProduct", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_dotProduct" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_dotProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_dotProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)((AL::Math::Position2D const *)arg1)->dotProduct((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_crossProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D_crossProduct", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_crossProduct" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)((AL::Math::Position2D const *)arg1)->crossProduct((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_toVector" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Position2D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_toVector" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = ((AL::Math::Position2D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position2D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Position2D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position2D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position2D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position2D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position2D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Position2D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position2D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position2D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_writeToVector" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position2D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position2D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Position2D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D_getAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D_getAngle" "', argument " "1"" of type '" "AL::Math::Position2D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (float)((AL::Math::Position2D const *)arg1)->getAngle();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___repr__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (char *)AL_Math_Position2D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position2D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "Position2D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position2D___rmul__" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position2D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Position2D___rmul__(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Position2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position2D" "', argument " "1"" of type '" "AL::Math::Position2D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Position2D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Position2D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Position2D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Position2D *arg2 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position2D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = AL::Math::operator *(arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_distanceSquared__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)AL::Math::distanceSquared((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_distance__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)AL::Math::distance((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Position2D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Position2D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = AL::Math::normalize((AL::Math::Position2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_dotProduct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)AL::Math::dotProduct((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_crossProduct__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = (float)AL::Math::crossProduct((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_crossProduct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "crossProduct" "', argument " "3"" of type '" "float &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "3"" of type '" "float &""'");
		}
		arg3 = reinterpret_cast<float *>(argp3);
		AL::Math::crossProduct((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position3D_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_x_set" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D_x_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_x_get" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (float)((arg1)->x);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position3D_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_y_set" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D_y_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_y_get" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (float)((arg1)->y);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position3D_z_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_z_set" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D_z_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->z = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_z_get" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (float)((arg1)->z);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Position3D *)new AL::Math::Position3D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Position3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Position3D *)new AL::Math::Position3D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position3D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Position3D *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position3D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Position3D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::Position3D *)new AL::Math::Position3D(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position3D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Position3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Position3D *)new AL::Math::Position3D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position3D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Position3D", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Position3D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Position3D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Position3D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Position3D__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Position3D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position3D::Position3D()\n"
			"    AL::Math::Position3D::Position3D(float)\n"
			"    AL::Math::Position3D::Position3D(float,float,float)\n"
			"    AL::Math::Position3D::Position3D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position3D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___add__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___add__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___add__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = ((AL::Math::Position3D const *)arg1)->operator +((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___sub__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___sub__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___sub__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = ((AL::Math::Position3D const *)arg1)->operator -((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___pos__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = ((AL::Math::Position3D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___neg__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = ((AL::Math::Position3D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___iadd__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___iadd__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___iadd__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (AL::Math::Position3D *) &(arg1)->operator +=((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___isub__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___isub__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___isub__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (AL::Math::Position3D *) &(arg1)->operator -=((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___eq__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___eq__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___eq__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (bool)((AL::Math::Position3D const *)arg1)->operator ==((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___ne__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D___ne__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D___ne__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (bool)((AL::Math::Position3D const *)arg1)->operator !=((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___mul__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position3D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___truediv__" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position3D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position3D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___imul__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position3D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___itruediv__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position3D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_distanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D_distanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_distanceSquared" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)((AL::Math::Position3D const *)arg1)->distanceSquared((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_distance" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_distance" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_distance" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)((AL::Math::Position3D const *)arg1)->distance((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isNear" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_isNear" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_isNear" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Position3D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Position3D const *)arg1)->isNear((AL::Math::Position3D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isNear" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_isNear" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_isNear" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (bool)((AL::Math::Position3D const *)arg1)->isNear((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position3D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position3D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Position3D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position3D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position3D::isNear(AL::Math::Position3D const &,float const &) const\n"
			"    AL::Math::Position3D::isNear(AL::Math::Position3D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position3D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_norm" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (float)((AL::Math::Position3D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_normalize" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = ((AL::Math::Position3D const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_dotProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D_dotProduct", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_dotProduct" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_dotProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_dotProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)((AL::Math::Position3D const *)arg1)->dotProduct((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_crossProduct(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D_crossProduct", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_crossProduct" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = ((AL::Math::Position3D const *)arg1)->crossProduct((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_toVector" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Position3D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_toVector" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = ((AL::Math::Position3D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position3D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Position3D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position3D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position3D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position3D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Position3D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position3D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position3D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_writeToVector" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Position3D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isUnitVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D_isUnitVector" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		result = (bool)((AL::Math::Position3D const *)arg1)->isUnitVector((float const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isUnitVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		bool result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (bool)((AL::Math::Position3D const *)arg1)->isUnitVector();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isUnitVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position3D_isUnitVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Position3D_isUnitVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Position3D_isUnitVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position3D_isUnitVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position3D::isUnitVector(float const &) const\n"
			"    AL::Math::Position3D::isUnitVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isOrthogonal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Position3D_isOrthogonal" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Position3D const *)arg1)->isOrthogonal((AL::Math::Position3D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isOrthogonal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D_isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position3D_isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position3D_isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (bool)((AL::Math::Position3D const *)arg1)->isOrthogonal((AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D_isOrthogonal(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position3D_isOrthogonal", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position3D_isOrthogonal__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Position3D_isOrthogonal__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position3D_isOrthogonal'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position3D::isOrthogonal(AL::Math::Position3D const &,float const &) const\n"
			"    AL::Math::Position3D::isOrthogonal(AL::Math::Position3D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position3D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___repr__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (char *)AL_Math_Position3D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position3D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position3D result;

		if (!SWIG_Python_UnpackTuple(args, "Position3D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position3D___rmul__" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position3D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Position3D___rmul__(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Position3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position3D" "', argument " "1"" of type '" "AL::Math::Position3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Position3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Position3D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Position3D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_distanceSquared__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)AL::Math::distanceSquared((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_distance__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)AL::Math::distance((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = AL::Math::normalize((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_dotProduct__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dotProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dotProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dotProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (float)AL::Math::dotProduct((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_dotProduct(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "dotProduct", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_dotProduct__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_dotProduct__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'dotProduct'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::dotProduct(AL::Math::Position2D const &,AL::Math::Position2D const &)\n"
			"    AL::Math::dotProduct(AL::Math::Position3D const &,AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_crossProduct__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::crossProduct((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_crossProduct__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		AL::Math::Position3D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "crossProduct" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "crossProduct" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		AL::Math::crossProduct((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_crossProduct(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "crossProduct", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_crossProduct__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_crossProduct__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_crossProduct__SWIG_1(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_crossProduct__SWIG_3(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'crossProduct'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::crossProduct(AL::Math::Position2D const &,AL::Math::Position2D const &)\n"
			"    AL::Math::crossProduct(AL::Math::Position2D const &,AL::Math::Position2D const &,float &)\n"
			"    AL::Math::crossProduct(AL::Math::Position3D const &,AL::Math::Position3D const &)\n"
			"    AL::Math::crossProduct(AL::Math::Position3D const &,AL::Math::Position3D const &,AL::Math::Position3D &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_isUnitVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		float *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "isUnitVector" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		result = (bool)AL::Math::isUnitVector((AL::Math::Position3D const &)*arg1, (float const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_isUnitVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		bool result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isUnitVector" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (bool)AL::Math::isUnitVector((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_isUnitVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "isUnitVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_isUnitVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_isUnitVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'isUnitVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::isUnitVector(AL::Math::Position3D const &,float const &)\n"
			"    AL::Math::isUnitVector(AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_isOrthogonal__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "isOrthogonal" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)AL::Math::isOrthogonal((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_isOrthogonal__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isOrthogonal" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "isOrthogonal" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = (bool)AL::Math::isOrthogonal((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_isOrthogonal(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "isOrthogonal", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_isOrthogonal__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_isOrthogonal__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'isOrthogonal'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::isOrthogonal(AL::Math::Position3D const &,AL::Math::Position3D const &,float const &)\n"
			"    AL::Math::isOrthogonal(AL::Math::Position3D const &,AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position6D_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_x_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_x_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_x_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->x);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_y_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_y_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_y_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->y);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_z_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_z_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_z_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->z = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_z_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->z);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_wx_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wx_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_wx_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wx = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wx_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->wx);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_wy_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wy_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_wy_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wy = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wy_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->wy);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_wz_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wz_set" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D_wz_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wz = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_wz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_wz_get" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((arg1)->wz);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position6D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Position6D *)new AL::Math::Position6D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position6D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Position6D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position6D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Position6D *)new AL::Math::Position6D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position6D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float arg5;
		float arg6;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		float val5;
		int ecode5 = 0;
		float val6;
		int ecode6 = 0;
		AL::Math::Position6D *result = 0;

		if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Position6D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Position6D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Position6D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Position6D" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Position6D" "', argument " "5"" of type '" "float""'");
		}
		arg5 = static_cast<float>(val5);
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Position6D" "', argument " "6"" of type '" "float""'");
		}
		arg6 = static_cast<float>(val6);
		result = (AL::Math::Position6D *)new AL::Math::Position6D(arg1, arg2, arg3, arg4, arg5, arg6);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position6D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Position6D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Position6D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Position6D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Position6D *)new AL::Math::Position6D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Position6D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[7] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Position6D", 0, 6, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Position6D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Position6D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Position6D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 6) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									return _wrap_new_Position6D__SWIG_2(self, argc, argv);
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Position6D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position6D::Position6D()\n"
			"    AL::Math::Position6D::Position6D(float)\n"
			"    AL::Math::Position6D::Position6D(float,float,float,float,float,float)\n"
			"    AL::Math::Position6D::Position6D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position6D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___add__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___add__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___add__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = ((AL::Math::Position6D const *)arg1)->operator +((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___sub__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___sub__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___sub__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = ((AL::Math::Position6D const *)arg1)->operator -((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___pos__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = ((AL::Math::Position6D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___neg__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = ((AL::Math::Position6D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___iadd__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___iadd__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___iadd__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (AL::Math::Position6D *) &(arg1)->operator +=((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___isub__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___isub__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___isub__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (AL::Math::Position6D *) &(arg1)->operator -=((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___eq__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___eq__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___eq__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (bool)((AL::Math::Position6D const *)arg1)->operator ==((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___ne__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D___ne__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D___ne__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (bool)((AL::Math::Position6D const *)arg1)->operator !=((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___mul__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position6D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___truediv__" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Position6D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Position6D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___imul__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position6D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___itruediv__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Position6D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_isNear" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_isNear" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_isNear" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Position6D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Position6D const *)arg1)->isNear((AL::Math::Position6D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_isNear" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_isNear" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_isNear" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (bool)((AL::Math::Position6D const *)arg1)->isNear((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position6D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position6D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Position6D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position6D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position6D::isNear(AL::Math::Position6D const &,float const &) const\n"
			"    AL::Math::Position6D::isNear(AL::Math::Position6D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position6D_distanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D_distanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_distanceSquared" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_distanceSquared" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (float)((AL::Math::Position6D const *)arg1)->distanceSquared((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_distance" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_distance" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_distance" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (float)((AL::Math::Position6D const *)arg1)->distance((AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_norm" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)((AL::Math::Position6D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_toVector" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Position6D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_toVector" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = ((AL::Math::Position6D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Position6D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Position6D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Position6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Position6D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Position6D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Position6D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Position6D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Position6D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Position6D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D_writeToVector" "', argument " "1"" of type '" "AL::Math::Position6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Position6D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Position6D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Position6D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___repr__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (char *)AL_Math_Position6D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Position6D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "Position6D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Position6D___rmul__" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Position6D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Position6D___rmul__(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Position6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = (AL::Math::Position6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Position6D" "', argument " "1"" of type '" "AL::Math::Position6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Position6D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Position6D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Position6D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_distanceSquared__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distanceSquared" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (float)AL::Math::distanceSquared((AL::Math::Position6D const &)*arg1, (AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_distanceSquared(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "distanceSquared", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distanceSquared__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distanceSquared__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distanceSquared__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distanceSquared__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'distanceSquared'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::distanceSquared(AL::Math::Pose2D const &,AL::Math::Pose2D const &)\n"
			"    AL::Math::distanceSquared(AL::Math::Position2D const &,AL::Math::Position2D const &)\n"
			"    AL::Math::distanceSquared(AL::Math::Position3D const &,AL::Math::Position3D const &)\n"
			"    AL::Math::distanceSquared(AL::Math::Position6D const &,AL::Math::Position6D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_distance__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "distance" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = (float)AL::Math::distance((AL::Math::Position6D const &)*arg1, (AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_distance(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "distance", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distance__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distance__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distance__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_distance__SWIG_3(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'distance'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::distance(AL::Math::Pose2D const &,AL::Math::Pose2D const &)\n"
			"    AL::Math::distance(AL::Math::Position2D const &,AL::Math::Position2D const &)\n"
			"    AL::Math::distance(AL::Math::Position3D const &,AL::Math::Position3D const &)\n"
			"    AL::Math::distance(AL::Math::Position6D const &,AL::Math::Position6D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Position6D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Position6D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = AL::Math::normalize((AL::Math::Position6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_q_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "PositionAndVelocity_q_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_q_set" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionAndVelocity_q_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->q = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_q_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_q_get" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		result = (float)((arg1)->q);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_dq_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "PositionAndVelocity_dq_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_dq_set" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PositionAndVelocity_dq_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->dq = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_dq_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_dq_get" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		result = (float)((arg1)->dq);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PositionAndVelocity__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::PositionAndVelocity *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionAndVelocity" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_PositionAndVelocity" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::PositionAndVelocity *)new AL::Math::PositionAndVelocity(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PositionAndVelocity__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::PositionAndVelocity *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_PositionAndVelocity" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::PositionAndVelocity *)new AL::Math::PositionAndVelocity(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PositionAndVelocity__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::PositionAndVelocity *)new AL::Math::PositionAndVelocity();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_PositionAndVelocity(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_PositionAndVelocity", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_PositionAndVelocity__SWIG_2(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_PositionAndVelocity__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_PositionAndVelocity__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_PositionAndVelocity'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::PositionAndVelocity::PositionAndVelocity(float const,float const)\n"
			"    AL::Math::PositionAndVelocity::PositionAndVelocity(float const)\n"
			"    AL::Math::PositionAndVelocity::PositionAndVelocity()\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		AL::Math::PositionAndVelocity *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_isNear" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionAndVelocity_isNear" "', argument " "2"" of type '" "AL::Math::PositionAndVelocity const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionAndVelocity_isNear" "', argument " "2"" of type '" "AL::Math::PositionAndVelocity const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "PositionAndVelocity_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::PositionAndVelocity const *)arg1)->isNear((AL::Math::PositionAndVelocity const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		AL::Math::PositionAndVelocity *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_isNear" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionAndVelocity_isNear" "', argument " "2"" of type '" "AL::Math::PositionAndVelocity const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionAndVelocity_isNear" "', argument " "2"" of type '" "AL::Math::PositionAndVelocity const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp2);
		result = (bool)((AL::Math::PositionAndVelocity const *)arg1)->isNear((AL::Math::PositionAndVelocity const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "PositionAndVelocity_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_PositionAndVelocity_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_PositionAndVelocity_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionAndVelocity_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::PositionAndVelocity::isNear(AL::Math::PositionAndVelocity const &,float const &) const\n"
			"    AL::Math::PositionAndVelocity::isNear(AL::Math::PositionAndVelocity const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_toVector" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "PositionAndVelocity_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "PositionAndVelocity_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::PositionAndVelocity const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity_toVector" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		result = ((AL::Math::PositionAndVelocity const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "PositionAndVelocity_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_PositionAndVelocity_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_PositionAndVelocity_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'PositionAndVelocity_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::PositionAndVelocity::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::PositionAndVelocity::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_PositionAndVelocity___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PositionAndVelocity___repr__" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		result = (char *)AL_Math_PositionAndVelocity___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_PositionAndVelocity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::PositionAndVelocity *arg1 = (AL::Math::PositionAndVelocity *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PositionAndVelocity" "', argument " "1"" of type '" "AL::Math::PositionAndVelocity *""'");
		}
		arg1 = reinterpret_cast<AL::Math::PositionAndVelocity *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *PositionAndVelocity_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__PositionAndVelocity, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *PositionAndVelocity_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_Quaternion_w_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Quaternion_w_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_set" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_w_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->w = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_w_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_w_get" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)((arg1)->w);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Quaternion_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_set" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_x_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_x_get" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)((arg1)->x);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Quaternion_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_set" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_y_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_y_get" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)((arg1)->y);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_z_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Quaternion_z_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_set" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_z_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->z = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_z_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_z_get" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)((arg1)->z);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Quaternion *)new AL::Math::Quaternion();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		AL::Math::Quaternion *result = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Quaternion" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Quaternion" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Quaternion" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = (AL::Math::Quaternion *)new AL::Math::Quaternion(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Quaternion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Quaternion *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Quaternion" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Quaternion" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Quaternion *)new AL::Math::Quaternion((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Quaternion(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Quaternion", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Quaternion__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Quaternion__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 4) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_new_Quaternion__SWIG_1(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Quaternion'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Quaternion::Quaternion()\n"
			"    AL::Math::Quaternion::Quaternion(float,float,float,float)\n"
			"    AL::Math::Quaternion::Quaternion(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___imul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Quaternion *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___imul__" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___imul__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___imul__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = (AL::Math::Quaternion *) &(arg1)->operator *=((AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Quaternion result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___mul__" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = ((AL::Math::Quaternion const *)arg1)->operator *((AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Quaternion___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___eq__" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___eq__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___eq__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = (bool)((AL::Math::Quaternion const *)arg1)->operator ==((AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Quaternion___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___ne__" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion___ne__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion___ne__" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = (bool)((AL::Math::Quaternion const *)arg1)->operator !=((AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Quaternion result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___mul__" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Quaternion const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___mul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Quaternion___mul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Quaternion___mul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Quaternion___mul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Quaternion result;

		if (!SWIG_Python_UnpackTuple(args, "Quaternion___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___truediv__" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Quaternion const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___imul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Quaternion *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___imul__" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Quaternion *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___imul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Quaternion___imul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Quaternion___imul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Quaternion___imul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Quaternion___imul__'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Quaternion::operator *=(AL::Math::Quaternion const &)\n"
			"    AL::Math::Quaternion::operator *=(float)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Quaternion *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Quaternion___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___itruediv__" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Quaternion *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_isNear" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_isNear" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_isNear" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaternion_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Quaternion const *)arg1)->isNear((AL::Math::Quaternion const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_isNear" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_isNear" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_isNear" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = (bool)((AL::Math::Quaternion const *)arg1)->isNear((AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Quaternion_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Quaternion_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Quaternion_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Quaternion_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Quaternion::isNear(AL::Math::Quaternion const &,float const &) const\n"
			"    AL::Math::Quaternion::isNear(AL::Math::Quaternion const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_norm" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)((AL::Math::Quaternion const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Quaternion result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_normalize" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = ((AL::Math::Quaternion const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Quaternion result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_inverse" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = ((AL::Math::Quaternion const *)arg1)->inverse();
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_fromAngleAndAxisRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];
		AL::Math::Quaternion result;

		if (!SWIG_Python_UnpackTuple(args, "Quaternion_fromAngleAndAxisRotation", 4, 4, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Quaternion_fromAngleAndAxisRotation" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Quaternion_fromAngleAndAxisRotation" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Quaternion_fromAngleAndAxisRotation" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Quaternion_fromAngleAndAxisRotation" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::Quaternion::fromAngleAndAxisRotation(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_toVector" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Quaternion_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Quaternion_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Quaternion const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion_toVector" "', argument " "1"" of type '" "AL::Math::Quaternion const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = ((AL::Math::Quaternion const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Quaternion_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Quaternion_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Quaternion_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Quaternion, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Quaternion_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Quaternion_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Quaternion::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Quaternion::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Quaternion___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Quaternion___repr__" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (char *)AL_Math_Quaternion___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Quaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Quaternion" "', argument " "1"" of type '" "AL::Math::Quaternion *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Quaternion_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Quaternion, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Quaternion_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_norm__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Quaternion result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::normalize((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionInverse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionInverse" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionInverse" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quaternionInverse" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionInverse" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		AL::Math::quaternionInverse((AL::Math::Quaternion const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionInverse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Quaternion result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionInverse" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionInverse" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::quaternionInverse((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionInverse(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "quaternionInverse", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_quaternionInverse__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_quaternionInverse__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'quaternionInverse'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::quaternionInverse(AL::Math::Quaternion const &,AL::Math::Quaternion &)\n"
			"    AL::Math::quaternionInverse(AL::Math::Quaternion const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_quaternionFromAngleAndAxisRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];
		AL::Math::Quaternion result;

		if (!SWIG_Python_UnpackTuple(args, "quaternionFromAngleAndAxisRotation", 4, 4, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "quaternionFromAngleAndAxisRotation" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "quaternionFromAngleAndAxisRotation" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "quaternionFromAngleAndAxisRotation" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "quaternionFromAngleAndAxisRotation" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::quaternionFromAngleAndAxisRotation(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_angleAndAxisRotationFromQuaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float *arg4 = 0;
		float *arg5 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		void *argp4 = 0;
		int res4 = 0;
		void *argp5 = 0;
		int res5 = 0;

		if ((nobjs < 5) || (nobjs > 5)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "2"" of type '" "float &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "2"" of type '" "float &""'");
		}
		arg2 = reinterpret_cast<float *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "3"" of type '" "float &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "3"" of type '" "float &""'");
		}
		arg3 = reinterpret_cast<float *>(argp3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "4"" of type '" "float &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "4"" of type '" "float &""'");
		}
		arg4 = reinterpret_cast<float *>(argp4);
		res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res5)) {
			SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "5"" of type '" "float &""'");
		}
		if (!argp5) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "5"" of type '" "float &""'");
		}
		arg5 = reinterpret_cast<float *>(argp5);
		AL::Math::angleAndAxisRotationFromQuaternion((AL::Math::Quaternion const &)*arg1, *arg2, *arg3, *arg4, *arg5);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_angleAndAxisRotationFromQuaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "angleAndAxisRotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::angleAndAxisRotationFromQuaternion((AL::Math::Quaternion const &)*arg1);
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_angleAndAxisRotationFromQuaternion(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[6] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "angleAndAxisRotationFromQuaternion", 0, 5, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_angleAndAxisRotationFromQuaternion__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 5) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						void *vptr = 0;
						int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
						_v = SWIG_CheckState(res);
						if (_v) {
							void *vptr = 0;
							int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
							_v = SWIG_CheckState(res);
							if (_v) {
								return _wrap_angleAndAxisRotationFromQuaternion__SWIG_0(self, argc, argv);
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'angleAndAxisRotationFromQuaternion'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::angleAndAxisRotationFromQuaternion(AL::Math::Quaternion const &,float &,float &,float &,float &)\n"
			"    AL::Math::angleAndAxisRotationFromQuaternion(AL::Math::Quaternion const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Displacement_P_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Position3D *arg2 = (AL::Math::Position3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Displacement_P_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_P_set" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement_P_set" "', argument " "2"" of type '" "AL::Math::Position3D *""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		if (arg1) (arg1)->P = *arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement_P_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_P_get" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		result = (AL::Math::Position3D *)& ((arg1)->P);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement_Q_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Quaternion *arg2 = (AL::Math::Quaternion *) 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Displacement_Q_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_Q_set" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement_Q_set" "', argument " "2"" of type '" "AL::Math::Quaternion *""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		if (arg1) (arg1)->Q = *arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement_Q_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Quaternion *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_Q_get" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		result = (AL::Math::Quaternion *)& ((arg1)->Q);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Displacement__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Displacement *)new AL::Math::Displacement();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Displacement__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Displacement *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Displacement" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Displacement" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Displacement" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Displacement" "', argument " "2"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		result = (AL::Math::Displacement *)new AL::Math::Displacement((AL::Math::Position3D const &)*arg1, (AL::Math::Quaternion const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Displacement__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Displacement *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Displacement" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Displacement" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = (AL::Math::Displacement *)new AL::Math::Displacement((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Displacement(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Displacement", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Displacement__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Displacement__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_new_Displacement__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Displacement'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Displacement::Displacement()\n"
			"    AL::Math::Displacement::Displacement(AL::Math::Position3D const &,AL::Math::Quaternion const &)\n"
			"    AL::Math::Displacement::Displacement(AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Displacement___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Displacement *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Displacement *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Displacement___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement___imul__" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement___imul__" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Displacement___imul__" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Displacement *>(argp2);
		result = (AL::Math::Displacement *) &(arg1)->operator *=((AL::Math::Displacement const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Displacement *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Displacement result;

		if (!SWIG_Python_UnpackTuple(args, "Displacement___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement___mul__" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement___mul__" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Displacement___mul__" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Displacement *>(argp2);
		result = (arg1)->operator *((AL::Math::Displacement const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Displacement(static_cast<const AL::Math::Displacement&>(result))), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Displacement_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Displacement *arg2 = 0;
		float arg3;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_isNear" "', argument " "1"" of type '" "AL::Math::Displacement const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement_isNear" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Displacement_isNear" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Displacement *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Displacement_isNear" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (bool)((AL::Math::Displacement const *)arg1)->isNear((AL::Math::Displacement const &)*arg2, arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		AL::Math::Displacement *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement_isNear" "', argument " "1"" of type '" "AL::Math::Displacement const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Displacement_isNear" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Displacement_isNear" "', argument " "2"" of type '" "AL::Math::Displacement const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Displacement *>(argp2);
		result = (bool)((AL::Math::Displacement const *)arg1)->isNear((AL::Math::Displacement const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Displacement_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Displacement_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Displacement, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Displacement_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Displacement, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Displacement_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Displacement_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Displacement::isNear(AL::Math::Displacement const &,float const) const\n"
			"    AL::Math::Displacement::isNear(AL::Math::Displacement const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Displacement___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Displacement___repr__" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		result = (char *)AL_Math_Displacement___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Displacement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = (AL::Math::Displacement *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Displacement" "', argument " "1"" of type '" "AL::Math::Displacement *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Displacement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Displacement, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Displacement_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_Rotation_r1_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r1_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c1_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r1_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r1_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c1_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r1_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r1_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r1_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c2_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r1_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r1_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c2_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r1_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r1_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r1_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c3_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r1_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r1_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r1_c3_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r1_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r2_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c1_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r2_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c1_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r2_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r2_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c2_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r2_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c2_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r2_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r2_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c3_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r2_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r2_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r2_c3_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r2_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r3_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c1_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r3_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c1_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r3_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r3_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c2_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r3_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c2_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r3_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation_r3_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c3_set" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_r3_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_r3_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_r3_c3_get" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((arg1)->r3_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Rotation *)new AL::Math::Rotation();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Rotation *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Rotation *)new AL::Math::Rotation((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rotation", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Rotation__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Rotation__SWIG_1(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rotation'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation::Rotation()\n"
			"    AL::Math::Rotation::Rotation(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Rotation___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___imul__" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation___imul__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation___imul__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = (AL::Math::Rotation *) &(arg1)->operator *=((AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___mul__" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation___mul__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation___mul__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = ((AL::Math::Rotation const *)arg1)->operator *((AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___eq__" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation___eq__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation___eq__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = (bool)((AL::Math::Rotation const *)arg1)->operator ==((AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___ne__" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation___ne__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation___ne__" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = (bool)((AL::Math::Rotation const *)arg1)->operator !=((AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_isNear" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_isNear" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_isNear" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Rotation const *)arg1)->isNear((AL::Math::Rotation const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_isNear" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_isNear" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_isNear" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = (bool)((AL::Math::Rotation const *)arg1)->isNear((AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Rotation_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotation_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation::isNear(AL::Math::Rotation const &,float const &) const\n"
			"    AL::Math::Rotation::isNear(AL::Math::Rotation const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation_normalizeRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_normalizeRotation" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		(arg1)->normalizeRotation();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isRotation__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		float *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_isRotation" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_isRotation" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		result = (bool)((AL::Math::Rotation const *)arg1)->isRotation((float const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isRotation__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		bool result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_isRotation" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (bool)((AL::Math::Rotation const *)arg1)->isRotation();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_isRotation(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation_isRotation", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Rotation_isRotation__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Rotation_isRotation__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotation_isRotation'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation::isRotation(float const &) const\n"
			"    AL::Math::Rotation::isRotation() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_transpose" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = ((AL::Math::Rotation const *)arg1)->transpose();
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_determinant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_determinant" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)((AL::Math::Rotation const *)arg1)->determinant();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromQuaternion", 4, 4, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_fromQuaternion" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_fromQuaternion" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_fromQuaternion" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Rotation_fromQuaternion" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::Rotation::fromQuaternion(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromAngleDirection(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		PyObject *swig_obj[4];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromAngleDirection", 4, 4, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_fromAngleDirection" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_fromAngleDirection" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_fromAngleDirection" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Rotation_fromAngleDirection" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::Rotation::fromAngleDirection(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_fromRotX" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Rotation::fromRotX(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotXPi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromRotXPi", 0, 0, 0)) SWIG_fail;
		result = AL::Math::Rotation::fromRotXPi();
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_fromRotY" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Rotation::fromRotY(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotYPi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromRotYPi", 0, 0, 0)) SWIG_fail;
		result = AL::Math::Rotation::fromRotYPi();
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_fromRotZ" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Rotation::fromRotZ(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotZPi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromRotZPi", 0, 0, 0)) SWIG_fail;
		result = AL::Math::Rotation::fromRotZPi();
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_fromRotZHalfPi(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_fromRotZHalfPi", 0, 0, 0)) SWIG_fail;
		result = AL::Math::Rotation::fromRotZHalfPi();
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_from3DRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation_from3DRotation", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Rotation_from3DRotation" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation_from3DRotation" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation_from3DRotation" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::Rotation::from3DRotation((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_toVector" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Rotation const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation_toVector" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = ((AL::Math::Rotation const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Rotation_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotation_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Rotation::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___str__" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (char *)AL_Math_Rotation___str__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___repr__" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (char *)AL_Math_Rotation___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		AL::Math::Position3D arg2;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation___mul__" "', argument " "1"" of type '" "AL::Math::Rotation const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		{
			res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation___mul__" "', argument " "2"" of type '" "AL::Math::Position3D""'");
			}
			if (!argp2) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation___mul__" "', argument " "2"" of type '" "AL::Math::Position3D""'");
			}
			else {
				AL::Math::Position3D * temp = reinterpret_cast<AL::Math::Position3D *>(argp2);
				arg2 = *temp;
				if (SWIG_IsNewObj(res2)) delete temp;
			}
		}
		result = AL_Math_Rotation___mul____SWIG_1((AL::Math::Rotation const *)arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation___mul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation___mul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation___mul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation___mul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Rotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = (AL::Math::Rotation *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotation" "', argument " "1"" of type '" "AL::Math::Rotation *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Rotation_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Rotation, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Rotation_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_transpose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transpose" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transpose" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = AL::Math::transpose((AL::Math::Rotation const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_determinant__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "determinant" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "determinant" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = (float)AL::Math::determinant((AL::Math::Rotation const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalizeRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalizeRotation" "', argument " "1"" of type '" "AL::Math::Rotation &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalizeRotation" "', argument " "1"" of type '" "AL::Math::Rotation &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		AL::Math::normalizeRotation(*arg1);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromQuaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromQuaternion" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rotationFromQuaternion" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rotationFromQuaternion" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "rotationFromQuaternion" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::rotationFromQuaternion(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAngleDirection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromAngleDirection" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rotationFromAngleDirection" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rotationFromAngleDirection" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "rotationFromAngleDirection" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = AL::Math::rotationFromAngleDirection(arg1, arg2, arg3, arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_applyRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		void *argp4 = 0;
		int res4 = 0;
		PyObject *swig_obj[4];

		if (!SWIG_Python_UnpackTuple(args, "applyRotation", 4, 4, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "applyRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "applyRotation" "', argument " "2"" of type '" "float &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyRotation" "', argument " "2"" of type '" "float &""'");
		}
		arg2 = reinterpret_cast<float *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "applyRotation" "', argument " "3"" of type '" "float &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyRotation" "', argument " "3"" of type '" "float &""'");
		}
		arg3 = reinterpret_cast<float *>(argp3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "applyRotation" "', argument " "4"" of type '" "float &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "applyRotation" "', argument " "4"" of type '" "float &""'");
		}
		arg4 = reinterpret_cast<float *>(argp4);
		AL::Math::applyRotation((AL::Math::Rotation const &)*arg1, *arg2, *arg3, *arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromRotX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromRotX" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::rotationFromRotX(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromRotY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromRotY" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::rotationFromRotY(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromRotZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromRotZ" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::rotationFromRotZ(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFrom3DRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "rotationFrom3DRotation", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFrom3DRotation" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "rotationFrom3DRotation" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "rotationFrom3DRotation" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::rotationFrom3DRotation((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wx_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D_wx_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wx_set" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D_wx_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wx = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wx_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wx_get" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (float)((arg1)->wx);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wy_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D_wy_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wy_set" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D_wy_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wy = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wy_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wy_get" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (float)((arg1)->wy);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wz_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D_wz_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wz_set" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D_wz_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wz = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_wz_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_wz_get" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (float)((arg1)->wz);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Rotation3D *)new AL::Math::Rotation3D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Rotation3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotation3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Rotation3D *)new AL::Math::Rotation3D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation3D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Rotation3D *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rotation3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rotation3D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Rotation3D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::Rotation3D *)new AL::Math::Rotation3D(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation3D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Rotation3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Rotation3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Rotation3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Rotation3D *)new AL::Math::Rotation3D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Rotation3D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Rotation3D", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Rotation3D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Rotation3D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Rotation3D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Rotation3D__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Rotation3D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation3D::Rotation3D()\n"
			"    AL::Math::Rotation3D::Rotation3D(float)\n"
			"    AL::Math::Rotation3D::Rotation3D(float,float,float)\n"
			"    AL::Math::Rotation3D::Rotation3D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___add__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___add__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___add__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = ((AL::Math::Rotation3D const *)arg1)->operator +((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___sub__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___sub__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___sub__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = ((AL::Math::Rotation3D const *)arg1)->operator -((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___iadd__" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___iadd__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___iadd__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = (AL::Math::Rotation3D *) &(arg1)->operator +=((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___isub__" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___isub__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___isub__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = (AL::Math::Rotation3D *) &(arg1)->operator -=((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___eq__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___eq__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___eq__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = (bool)((AL::Math::Rotation3D const *)arg1)->operator ==((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___ne__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D___ne__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D___ne__" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = (bool)((AL::Math::Rotation3D const *)arg1)->operator !=((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___mul__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Rotation3D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D result;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___truediv__" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Rotation3D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___imul__" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Rotation3D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Rotation3D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___itruediv__" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Rotation3D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Rotation3D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_isNear" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D_isNear" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D_isNear" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Rotation3D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Rotation3D const *)arg1)->isNear((AL::Math::Rotation3D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_isNear" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D_isNear" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D_isNear" "', argument " "2"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		result = (bool)((AL::Math::Rotation3D const *)arg1)->isNear((AL::Math::Rotation3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation3D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation3D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Rotation3D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotation3D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation3D::isNear(AL::Math::Rotation3D const &,float const &) const\n"
			"    AL::Math::Rotation3D::isNear(AL::Math::Rotation3D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_norm" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (float)((AL::Math::Rotation3D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_toVector" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rotation3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rotation3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Rotation3D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D_toVector" "', argument " "1"" of type '" "AL::Math::Rotation3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = ((AL::Math::Rotation3D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Rotation3D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Rotation3D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Rotation3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Rotation3D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Rotation3D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Rotation3D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Rotation3D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Rotation3D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rotation3D___repr__" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (char *)AL_Math_Rotation3D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Rotation3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = (AL::Math::Rotation3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Rotation3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Rotation3D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Rotation3D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_norm__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Rotation3D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r1_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c1_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r1_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c1_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r1_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r1_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c2_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r1_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c2_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r1_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r1_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c3_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r1_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c3_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r1_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r1_c4_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c4_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r1_c4_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r1_c4 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r1_c4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r1_c4_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r1_c4);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r2_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c1_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r2_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c1_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r2_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r2_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c2_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r2_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c2_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r2_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r2_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c3_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r2_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c3_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r2_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r2_c4_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c4_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r2_c4_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r2_c4 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r2_c4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r2_c4_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r2_c4);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c1_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r3_c1_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c1_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r3_c1_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c1 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c1_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c1_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r3_c1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c2_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r3_c2_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c2_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r3_c2_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c2 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c2_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c2_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r3_c2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c3_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r3_c3_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c3_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r3_c3_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c3 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c3_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c3_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r3_c3);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c4_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_r3_c4_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c4_set" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_r3_c4_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->r3_c4 = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_r3_c4_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_r3_c4_get" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((arg1)->r3_c4);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Transform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Transform *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Transform *)new AL::Math::Transform();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Transform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Transform *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Transform" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Transform" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Transform *)new AL::Math::Transform((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Transform__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		AL::Math::Transform *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Transform" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Transform" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Transform" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (AL::Math::Transform *)new AL::Math::Transform((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Transform(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Transform", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Transform__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Transform__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Transform__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Transform'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Transform::Transform()\n"
			"    AL::Math::Transform::Transform(std::vector< float,std::allocator< float > > const &)\n"
			"    AL::Math::Transform::Transform(float const &,float const &,float const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Transform___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Transform *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Transform___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___imul__" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform___imul__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform___imul__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (AL::Math::Transform *) &(arg1)->operator *=((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Transform result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___mul__" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform___mul__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform___mul__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = ((AL::Math::Transform const *)arg1)->operator *((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Transform___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Transform___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___eq__" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform___eq__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform___eq__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (bool)((AL::Math::Transform const *)arg1)->operator ==((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Transform___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Transform___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___ne__" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform___ne__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform___ne__" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (bool)((AL::Math::Transform const *)arg1)->operator !=((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Transform_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_isNear" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_isNear" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_isNear" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Transform const *)arg1)->isNear((AL::Math::Transform const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_isNear" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_isNear" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_isNear" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (bool)((AL::Math::Transform const *)arg1)->isNear((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Transform_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Transform_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Transform_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Transform_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Transform::isNear(AL::Math::Transform const &,float const &) const\n"
			"    AL::Math::Transform::isNear(AL::Math::Transform const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Transform_isTransform__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		float *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_isTransform" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_isTransform" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		result = (bool)((AL::Math::Transform const *)arg1)->isTransform((float const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_isTransform__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		bool result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_isTransform" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (bool)((AL::Math::Transform const *)arg1)->isTransform();
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_isTransform(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Transform_isTransform", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Transform_isTransform__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_Transform_isTransform__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Transform_isTransform'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Transform::isTransform(float const &) const\n"
			"    AL::Math::Transform::isTransform() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Transform_normalizeTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_normalizeTransform" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		(arg1)->normalizeTransform();
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_norm" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((AL::Math::Transform const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_determinant(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_determinant" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)((AL::Math::Transform const *)arg1)->determinant();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_inverse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_inverse" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = ((AL::Math::Transform const *)arg1)->inverse();
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromRotX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_fromRotX" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Transform::fromRotX(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromRotY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_fromRotY" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Transform::fromRotY(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromRotZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_fromRotZ" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::Transform::fromRotZ(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_from3DRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Transform result;

		if (!SWIG_Python_UnpackTuple(args, "Transform_from3DRotation", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_from3DRotation" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_from3DRotation" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_from3DRotation" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::Transform::from3DRotation((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Transform result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_fromPosition" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_fromPosition" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_fromPosition" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = AL::Math::Transform::fromPosition(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float *arg4 = 0;
		float *arg5 = 0;
		float *arg6 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		float temp4;
		float val4;
		int ecode4 = 0;
		float temp5;
		float val5;
		int ecode5 = 0;
		float temp6;
		float val6;
		int ecode6 = 0;
		AL::Math::Transform result;

		if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "Transform_fromPosition" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Transform_fromPosition" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Transform_fromPosition" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Transform_fromPosition" "', argument " "4"" of type '" "float""'");
		}
		temp4 = static_cast<float>(val4);
		arg4 = &temp4;
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Transform_fromPosition" "', argument " "5"" of type '" "float""'");
		}
		temp5 = static_cast<float>(val5);
		arg5 = &temp5;
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Transform_fromPosition" "', argument " "6"" of type '" "float""'");
		}
		temp6 = static_cast<float>(val6);
		arg6 = &temp6;
		result = AL::Math::Transform::fromPosition((float const &)*arg1, (float const &)*arg2, (float const &)*arg3, (float const &)*arg4, (float const &)*arg5, (float const &)*arg6);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_fromPosition(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[7] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Transform_fromPosition", 0, 6, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Transform_fromPosition__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 6) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									return _wrap_Transform_fromPosition__SWIG_1(self, argc, argv);
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Transform_fromPosition'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Transform::fromPosition(float const,float const,float const)\n"
			"    AL::Math::Transform::fromPosition(float const &,float const &,float const &,float const &,float const &,float const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Transform_diff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Transform result;

		if (!SWIG_Python_UnpackTuple(args, "Transform_diff", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_diff" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_diff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_diff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = ((AL::Math::Transform const *)arg1)->diff((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_distanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Transform_distanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_distanceSquared" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_distanceSquared" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_distanceSquared" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (float)((AL::Math::Transform const *)arg1)->distanceSquared((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_distance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "Transform_distance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_distance" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_distance" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_distance" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (float)((AL::Math::Transform const *)arg1)->distance((AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_toVector" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Transform const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_toVector" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = ((AL::Math::Transform const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Transform_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Transform_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Transform_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Transform_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Transform::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Transform::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Transform_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Transform_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform_writeToVector" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Transform const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___str__" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (char *)AL_Math_Transform___str__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___repr__" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (char *)AL_Math_Transform___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Transform___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		AL::Math::Position3D arg2;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Transform___mul__" "', argument " "1"" of type '" "AL::Math::Transform const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		{
			res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Transform___mul__" "', argument " "2"" of type '" "AL::Math::Position3D""'");
			}
			if (!argp2) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Transform___mul__" "', argument " "2"" of type '" "AL::Math::Position3D""'");
			}
			else {
				AL::Math::Position3D * temp = reinterpret_cast<AL::Math::Position3D *>(argp2);
				arg2 = *temp;
				if (SWIG_IsNewObj(res2)) delete temp;
			}
		}
		result = AL_Math_Transform___mul____SWIG_1((AL::Math::Transform const *)arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Transform___mul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Transform___mul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Transform___mul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Transform, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Transform___mul____SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Transform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Transform" "', argument " "1"" of type '" "AL::Math::Transform *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Transform_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Transform, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Transform_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_transformPreMultiply(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "transformPreMultiply", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformPreMultiply" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformPreMultiply" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformPreMultiply" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformPreMultiply" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformPreMultiply((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalizeTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalizeTransform" "', argument " "1"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalizeTransform" "', argument " "1"" of type '" "AL::Math::Transform &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		AL::Math::normalizeTransform(*arg1);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformToFloatVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformToFloatVector" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformToFloatVector" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformToFloatVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformToFloatVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		AL::Math::transformToFloatVector((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformToFloatVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformToFloatVector" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformToFloatVector" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::transformToFloatVector((AL::Math::Transform const &)*arg1);
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformToFloatVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformToFloatVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_transformToFloatVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_transformToFloatVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformToFloatVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformToFloatVector(AL::Math::Transform const &,std::vector< float,std::allocator< float > > &)\n"
			"    AL::Math::transformToFloatVector(AL::Math::Transform const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_determinant__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "determinant" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "determinant" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = (float)AL::Math::determinant((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_determinant__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "determinant" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "determinant" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (float)AL::Math::determinant((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_determinant(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "determinant", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_determinant__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_determinant__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_determinant__SWIG_2(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'determinant'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::determinant(AL::Math::Rotation const &)\n"
			"    AL::Math::determinant(AL::Math::Transform const &)\n"
			"    AL::Math::determinant(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformInverse__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformInverse" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformInverse" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformInverse" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformInverse" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformInverse((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformInverse__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Transform result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformInverse" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformInverse" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::transformInverse((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformInverse(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformInverse", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_transformInverse__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_transformInverse__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformInverse'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformInverse(AL::Math::Transform const &,AL::Math::Transform &)\n"
			"    AL::Math::transformInverse(AL::Math::Transform const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotX" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::transformFromRotX(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotY" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::transformFromRotY(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotZ" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = AL::Math::transformFromRotZ(arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFrom3DRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Transform result;

		if (!SWIG_Python_UnpackTuple(args, "transformFrom3DRotation", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFrom3DRotation" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFrom3DRotation" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformFrom3DRotation" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::transformFrom3DRotation((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		AL::Math::Transform result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromPosition" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromPosition" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformFromPosition" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::transformFromPosition((float const &)*arg1, (float const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float *arg4 = 0;
		float *arg5 = 0;
		float *arg6 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		float temp4;
		float val4;
		int ecode4 = 0;
		float temp5;
		float val5;
		int ecode5 = 0;
		float temp6;
		float val6;
		int ecode6 = 0;
		AL::Math::Transform result;

		if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromPosition" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromPosition" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformFromPosition" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "transformFromPosition" "', argument " "4"" of type '" "float""'");
		}
		temp4 = static_cast<float>(val4);
		arg4 = &temp4;
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "transformFromPosition" "', argument " "5"" of type '" "float""'");
		}
		temp5 = static_cast<float>(val5);
		arg5 = &temp5;
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "transformFromPosition" "', argument " "6"" of type '" "float""'");
		}
		temp6 = static_cast<float>(val6);
		arg6 = &temp6;
		result = AL::Math::transformFromPosition((float const &)*arg1, (float const &)*arg2, (float const &)*arg3, (float const &)*arg4, (float const &)*arg5, (float const &)*arg6);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[7] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformFromPosition", 0, 6, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_transformFromPosition__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 6) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									return _wrap_transformFromPosition__SWIG_1(self, argc, argv);
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformFromPosition'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformFromPosition(float const &,float const &,float const &)\n"
			"    AL::Math::transformFromPosition(float const &,float const &,float const &,float const &,float const &,float const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformInvertInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformInvertInPlace" "', argument " "1"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformInvertInPlace" "', argument " "1"" of type '" "AL::Math::Transform &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		AL::Math::transformInvertInPlace(*arg1);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pinv__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Transform result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pinv" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pinv" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::pinv((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pinv(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "pinv", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_pinv__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_pinv__SWIG_1(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'pinv'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::pinv(AL::Math::Pose2D const &)\n"
			"    AL::Math::pinv(AL::Math::Transform const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Transform result;

		if (!SWIG_Python_UnpackTuple(args, "transformDiff", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformDiff" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDiff" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformDiff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDiff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = AL::Math::transformDiff((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformDistanceSquared(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "transformDistanceSquared", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformDistanceSquared" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDistanceSquared" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformDistanceSquared" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDistanceSquared" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (float)AL::Math::transformDistanceSquared((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformDistance(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "transformDistance", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformDistance" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDistance" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformDistance" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformDistance" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = (float)AL::Math::transformDistance((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_xd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D_xd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_xd_set" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D_xd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->xd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_xd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_xd_get" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (float)((arg1)->xd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_yd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D_yd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_yd_set" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D_yd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->yd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_yd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_yd_get" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (float)((arg1)->yd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_zd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D_zd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_zd_set" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D_zd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->zd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_zd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_zd_get" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (float)((arg1)->zd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Velocity3D *)new AL::Math::Velocity3D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Velocity3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Velocity3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Velocity3D *)new AL::Math::Velocity3D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity3D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Velocity3D *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Velocity3D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Velocity3D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Velocity3D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::Velocity3D *)new AL::Math::Velocity3D(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity3D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Velocity3D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Velocity3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Velocity3D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Velocity3D *)new AL::Math::Velocity3D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity3D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Velocity3D", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Velocity3D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Velocity3D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Velocity3D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Velocity3D__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Velocity3D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity3D::Velocity3D()\n"
			"    AL::Math::Velocity3D::Velocity3D(float)\n"
			"    AL::Math::Velocity3D::Velocity3D(float,float,float)\n"
			"    AL::Math::Velocity3D::Velocity3D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___add__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___add__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___add__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = ((AL::Math::Velocity3D const *)arg1)->operator +((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___sub__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___sub__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___sub__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = ((AL::Math::Velocity3D const *)arg1)->operator -((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___pos__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = ((AL::Math::Velocity3D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___neg__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = ((AL::Math::Velocity3D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___iadd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___iadd__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___iadd__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___iadd__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___iadd__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = (AL::Math::Velocity3D *) &(arg1)->operator +=((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___isub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___isub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___isub__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___isub__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___isub__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = (AL::Math::Velocity3D *) &(arg1)->operator -=((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___eq__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___eq__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___eq__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = (bool)((AL::Math::Velocity3D const *)arg1)->operator ==((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___ne__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D___ne__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D___ne__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = (bool)((AL::Math::Velocity3D const *)arg1)->operator !=((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___mul__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Velocity3D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___truediv__" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Velocity3D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___imul__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Velocity3D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___itruediv__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Velocity3D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_isNear" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Velocity3D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Velocity3D const *)arg1)->isNear((AL::Math::Velocity3D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_isNear" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = (bool)((AL::Math::Velocity3D const *)arg1)->isNear((AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Velocity3D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Velocity3D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Velocity3D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Velocity3D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity3D::isNear(AL::Math::Velocity3D const &,float const &) const\n"
			"    AL::Math::Velocity3D::isNear(AL::Math::Velocity3D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_norm" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (float)((AL::Math::Velocity3D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_normalize" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = ((AL::Math::Velocity3D const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_toVector" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Velocity3D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_toVector" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = ((AL::Math::Velocity3D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Velocity3D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Velocity3D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity3D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Velocity3D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Velocity3D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity3D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Velocity3D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D_writeToVector" "', argument " "1"" of type '" "AL::Math::Velocity3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity3D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity3D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Velocity3D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___repr__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (char *)AL_Math_Velocity3D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity3D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity3D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity3D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity3D___rmul__" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity3D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Velocity3D___rmul__(arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Velocity3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = (AL::Math::Velocity3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Velocity3D" "', argument " "1"" of type '" "AL::Math::Velocity3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Velocity3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Velocity3D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Velocity3D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Velocity3D *arg2 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Velocity3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = AL::Math::operator *(arg1, (AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Velocity3D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Velocity3D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity3D *>(argp1);
		result = AL::Math::normalize((AL::Math::Velocity3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_xd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_xd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_xd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_xd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->xd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_xd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_xd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->xd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_yd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_yd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_yd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_yd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->yd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_yd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_yd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->yd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_zd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_zd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_zd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_zd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->zd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_zd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_zd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->zd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wxd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_wxd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wxd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_wxd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wxd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wxd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wxd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->wxd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wyd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_wyd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wyd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_wyd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wyd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wyd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wyd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->wyd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wzd_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_wzd_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wzd_set" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D_wzd_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->wzd = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_wzd_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_wzd_get" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((arg1)->wzd);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity6D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Velocity6D *)new AL::Math::Velocity6D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity6D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		AL::Math::Velocity6D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Velocity6D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Velocity6D *)new AL::Math::Velocity6D(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity6D__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float arg4;
		float arg5;
		float arg6;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		float val4;
		int ecode4 = 0;
		float val5;
		int ecode5 = 0;
		float val6;
		int ecode6 = 0;
		AL::Math::Velocity6D *result = 0;

		if ((nobjs < 6) || (nobjs > 6)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Velocity6D" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Velocity6D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Velocity6D" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_Velocity6D" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		ecode5 = SWIG_AsVal_float(swig_obj[4], &val5);
		if (!SWIG_IsOK(ecode5)) {
			SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "new_Velocity6D" "', argument " "5"" of type '" "float""'");
		}
		arg5 = static_cast<float>(val5);
		ecode6 = SWIG_AsVal_float(swig_obj[5], &val6);
		if (!SWIG_IsOK(ecode6)) {
			SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "new_Velocity6D" "', argument " "6"" of type '" "float""'");
		}
		arg6 = static_cast<float>(val6);
		result = (AL::Math::Velocity6D *)new AL::Math::Velocity6D(arg1, arg2, arg3, arg4, arg5, arg6);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity6D__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		AL::Math::Velocity6D *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Velocity6D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Velocity6D" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (AL::Math::Velocity6D *)new AL::Math::Velocity6D((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NEW | 0);
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Velocity6D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[7] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Velocity6D", 0, 6, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Velocity6D__SWIG_0(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Velocity6D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = swig::asptr(argv[0], (std::vector< float, std::allocator< float > >**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Velocity6D__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 6) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							{
								int res = SWIG_AsVal_float(argv[4], NULL);
								_v = SWIG_CheckState(res);
							}
							if (_v) {
								{
									int res = SWIG_AsVal_float(argv[5], NULL);
									_v = SWIG_CheckState(res);
								}
								if (_v) {
									return _wrap_new_Velocity6D__SWIG_2(self, argc, argv);
								}
							}
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Velocity6D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity6D::Velocity6D()\n"
			"    AL::Math::Velocity6D::Velocity6D(float)\n"
			"    AL::Math::Velocity6D::Velocity6D(float,float,float,float,float,float)\n"
			"    AL::Math::Velocity6D::Velocity6D(std::vector< float,std::allocator< float > > const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___add__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___add__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___add__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D___add__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D___add__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = ((AL::Math::Velocity6D const *)arg1)->operator +((AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___sub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___sub__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___sub__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D___sub__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D___sub__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = ((AL::Math::Velocity6D const *)arg1)->operator -((AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___pos__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___pos__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = ((AL::Math::Velocity6D const *)arg1)->operator +();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___neg__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = ((AL::Math::Velocity6D const *)arg1)->operator -();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___mul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___mul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___mul__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D___mul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Velocity6D const *)arg1)->operator *(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___truediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___truediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___truediv__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D___truediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = ((AL::Math::Velocity6D const *)arg1)->operator /(arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___eq__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D___eq__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D___eq__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = (bool)((AL::Math::Velocity6D const *)arg1)->operator ==((AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___ne__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___ne__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D___ne__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D___ne__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = (bool)((AL::Math::Velocity6D const *)arg1)->operator !=((AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___imul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___imul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___imul__" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D___imul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Velocity6D *) &(arg1)->operator *=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___itruediv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___itruediv__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___itruediv__" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D___itruediv__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Velocity6D *) &(arg1)->operator /=(arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_isNear" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Velocity6D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::Velocity6D const *)arg1)->isNear((AL::Math::Velocity6D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_isNear" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D_isNear" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = (bool)((AL::Math::Velocity6D const *)arg1)->isNear((AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Velocity6D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Velocity6D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_Velocity6D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Velocity6D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity6D::isNear(AL::Math::Velocity6D const &,float const &) const\n"
			"    AL::Math::Velocity6D::isNear(AL::Math::Velocity6D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_norm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_norm" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)((AL::Math::Velocity6D const *)arg1)->norm();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_normalize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_normalize" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = ((AL::Math::Velocity6D const *)arg1)->normalize();
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_toVector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_toVector" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D_toVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp2);
		((AL::Math::Velocity6D const *)arg1)->toVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_toVector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		std::vector< float, std::allocator< float > > result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_toVector" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = ((AL::Math::Velocity6D const *)arg1)->toVector();
		resultobj = swig::from(static_cast<std::vector< float, std::allocator< float > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_toVector(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Velocity6D_toVector", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_Velocity6D_toVector__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Velocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Velocity6D_toVector__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Velocity6D_toVector'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Velocity6D::toVector(std::vector< float,std::allocator< float > > &) const\n"
			"    AL::Math::Velocity6D::toVector() const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D_writeToVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		std::vector< float, std::allocator< float > >::iterator *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D_writeToVector", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D_writeToVector" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Velocity6D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Velocity6D_writeToVector" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > >::iterator &""'");
		}
		arg2 = reinterpret_cast<std::vector< float, std::allocator< float > >::iterator *>(argp2);
		((AL::Math::Velocity6D const *)arg1)->writeToVector(*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___repr__" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (char *)AL_Math_Velocity6D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Velocity6D___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Velocity6D result;

		if (!SWIG_Python_UnpackTuple(args, "Velocity6D___rmul__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Velocity6D___rmul__" "', argument " "1"" of type '" "AL::Math::Velocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Velocity6D___rmul__" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL_Math_Velocity6D___rmul__((AL::Math::Velocity6D const *)arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Velocity6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Velocity6D" "', argument " "1"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Velocity6D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Velocity6D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Velocity6D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Velocity6D *arg2 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Velocity6D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = AL::Math::operator *(arg1, (AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_norm__SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "norm" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = (float)AL::Math::norm((AL::Math::Velocity6D const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_norm(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "norm", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_4(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_5(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_6(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_norm__SWIG_7(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'norm'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::norm(AL::Math::Position2D const &)\n"
			"    AL::Math::norm(AL::Math::Position3D const &)\n"
			"    AL::Math::norm(AL::Math::Position6D const &)\n"
			"    AL::Math::norm(AL::Math::Quaternion const &)\n"
			"    AL::Math::norm(AL::Math::Rotation3D const &)\n"
			"    AL::Math::norm(AL::Math::Transform const &)\n"
			"    AL::Math::norm(AL::Math::Velocity3D const &)\n"
			"    AL::Math::norm(AL::Math::Velocity6D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_normalize__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Velocity6D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "normalize" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = AL::Math::normalize((AL::Math::Velocity6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_normalize(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "normalize", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_0(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_3(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_4(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_normalize__SWIG_5(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'normalize'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::normalize(AL::Math::Position2D const &)\n"
			"    AL::Math::normalize(AL::Math::Position3D const &)\n"
			"    AL::Math::normalize(AL::Math::Position6D const &)\n"
			"    AL::Math::normalize(AL::Math::Quaternion const &)\n"
			"    AL::Math::normalize(AL::Math::Velocity3D const &)\n"
			"    AL::Math::normalize(AL::Math::Velocity6D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_T_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		AL::Math::Transform *arg2 = (AL::Math::Transform *) 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "TransformAndVelocity6D_T_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_T_set" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformAndVelocity6D_T_set" "', argument " "2"" of type '" "AL::Math::Transform *""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		if (arg1) (arg1)->T = *arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_T_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_T_get" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		result = (AL::Math::Transform *)& ((arg1)->T);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_V_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		AL::Math::Velocity6D *arg2 = (AL::Math::Velocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "TransformAndVelocity6D_V_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_V_set" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformAndVelocity6D_V_set" "', argument " "2"" of type '" "AL::Math::Velocity6D *""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		if (arg1) (arg1)->V = *arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_V_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity6D *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_V_get" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		result = (AL::Math::Velocity6D *)& ((arg1)->V);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_TransformAndVelocity6D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::TransformAndVelocity6D *)new AL::Math::TransformAndVelocity6D();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_TransformAndVelocity6D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::TransformAndVelocity6D *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TransformAndVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformAndVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_TransformAndVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TransformAndVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		result = (AL::Math::TransformAndVelocity6D *)new AL::Math::TransformAndVelocity6D((AL::Math::Transform const &)*arg1, (AL::Math::Velocity6D const &)*arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_TransformAndVelocity6D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_TransformAndVelocity6D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_TransformAndVelocity6D__SWIG_0(self, argc, argv);
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_new_TransformAndVelocity6D__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_TransformAndVelocity6D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::TransformAndVelocity6D::TransformAndVelocity6D()\n"
			"    AL::Math::TransformAndVelocity6D::TransformAndVelocity6D(AL::Math::Transform const &,AL::Math::Velocity6D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_isNear__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		AL::Math::TransformAndVelocity6D *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_isNear" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformAndVelocity6D_isNear" "', argument " "2"" of type '" "AL::Math::TransformAndVelocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformAndVelocity6D_isNear" "', argument " "2"" of type '" "AL::Math::TransformAndVelocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "TransformAndVelocity6D_isNear" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = (bool)((AL::Math::TransformAndVelocity6D const *)arg1)->isNear((AL::Math::TransformAndVelocity6D const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_isNear__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		AL::Math::TransformAndVelocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		bool result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D_isNear" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "TransformAndVelocity6D_isNear" "', argument " "2"" of type '" "AL::Math::TransformAndVelocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TransformAndVelocity6D_isNear" "', argument " "2"" of type '" "AL::Math::TransformAndVelocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp2);
		result = (bool)((AL::Math::TransformAndVelocity6D const *)arg1)->isNear((AL::Math::TransformAndVelocity6D const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D_isNear(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "TransformAndVelocity6D_isNear", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_TransformAndVelocity6D_isNear__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_TransformAndVelocity6D_isNear__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'TransformAndVelocity6D_isNear'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::TransformAndVelocity6D::isNear(AL::Math::TransformAndVelocity6D const &,float const &) const\n"
			"    AL::Math::TransformAndVelocity6D::isNear(AL::Math::TransformAndVelocity6D const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_TransformAndVelocity6D___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TransformAndVelocity6D___repr__" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		result = (char *)AL_Math_TransformAndVelocity6D___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_TransformAndVelocity6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::TransformAndVelocity6D *arg1 = (AL::Math::TransformAndVelocity6D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TransformAndVelocity6D" "', argument " "1"" of type '" "AL::Math::TransformAndVelocity6D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::TransformAndVelocity6D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *TransformAndVelocity6D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__TransformAndVelocity6D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *TransformAndVelocity6D_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_getDubinsSolutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > > result;

		if (!SWIG_Python_UnpackTuple(args, "getDubinsSolutions", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "getDubinsSolutions" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "getDubinsSolutions" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "getDubinsSolutions" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL::Math::getDubinsSolutions((AL::Math::Pose2D const &)*arg1, arg2);
		resultobj = swig::from(static_cast<std::vector< AL::Math::Pose2D, std::allocator< AL::Math::Pose2D > >>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN int Swig_var__4_PI__set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable _4_PI_ is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var__4_PI__get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::_4_PI_));
		return pyobj;
	}


	SWIGINTERN int Swig_var__2_PI__set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable _2_PI_ is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var__2_PI__get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::_2_PI_));
		return pyobj;
	}


	SWIGINTERN int Swig_var_PI_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable PI is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_PI_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::PI));
		return pyobj;
	}


	SWIGINTERN int Swig_var_PI_2_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable PI_2 is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_PI_2_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::PI_2));
		return pyobj;
	}


	SWIGINTERN int Swig_var_PI_4_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable PI_4 is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_PI_4_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::PI_4));
		return pyobj;
	}


	SWIGINTERN int Swig_var_TO_RAD_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable TO_RAD is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_TO_RAD_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::TO_RAD));
		return pyobj;
	}


	SWIGINTERN int Swig_var_TO_DEG_set(PyObject *) {
		SWIG_Error(SWIG_AttributeError, "Variable TO_DEG is read-only.");
		return 1;
	}


	SWIGINTERN PyObject *Swig_var_TO_DEG_get(void) {
		PyObject *pyobj = 0;

		pyobj = SWIG_From_float(static_cast<float>(AL::Math::TO_DEG));
		return pyobj;
	}


	SWIGINTERN PyObject *_wrap_avoidFootCollision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg1 = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg2 = 0;
		bool *arg3 = 0;
		AL::Math::Pose2D *arg4 = 0;
		int res1 = SWIG_OLDOBJ;
		int res2 = SWIG_OLDOBJ;
		bool temp3;
		bool val3;
		int ecode3 = 0;
		void *argp4 = 0;
		int res4 = 0;
		PyObject *swig_obj[4];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "avoidFootCollision", 4, 4, swig_obj)) SWIG_fail;
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "avoidFootCollision" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avoidFootCollision" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg1 = ptr;
		}
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res2 = swig::asptr(swig_obj[1], &ptr);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "avoidFootCollision" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avoidFootCollision" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg2 = ptr;
		}
		ecode3 = SWIG_AsVal_bool(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "avoidFootCollision" "', argument " "3"" of type '" "bool""'");
		}
		temp3 = static_cast<bool>(val3);
		arg3 = &temp3;
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "avoidFootCollision" "', argument " "4"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "avoidFootCollision" "', argument " "4"" of type '" "AL::Math::Pose2D &""'");
		}
		arg4 = reinterpret_cast<AL::Math::Pose2D *>(argp4);
		result = (bool)AL::Math::avoidFootCollision((std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg1, (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg2, (bool const &)*arg3, *arg4);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_clipFootWithEllipse(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		AL::Math::Pose2D *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "clipFootWithEllipse", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clipFootWithEllipse" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clipFootWithEllipse" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "clipFootWithEllipse" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clipFootWithEllipse" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Pose2D *>(argp3);
		result = (bool)AL::Math::clipFootWithEllipse((float const &)*arg1, (float const &)*arg2, *arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_areTwoBoxesInCollision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg1 = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg2 = 0;
		int res1 = SWIG_OLDOBJ;
		int res2 = SWIG_OLDOBJ;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "areTwoBoxesInCollision", 2, 2, swig_obj)) SWIG_fail;
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "areTwoBoxesInCollision" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "areTwoBoxesInCollision" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg1 = ptr;
		}
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res2 = swig::asptr(swig_obj[1], &ptr);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "areTwoBoxesInCollision" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "areTwoBoxesInCollision" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg2 = ptr;
		}
		result = (bool)AL::Math::areTwoBoxesInCollision((std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg1, (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_computeBox(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg3 = 0;
		int res1 = SWIG_OLDOBJ;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "computeBox", 3, 3, swig_obj)) SWIG_fail;
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "computeBox" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeBox" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg1 = ptr;
		}
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "computeBox" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeBox" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "computeBox" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "computeBox" "', argument " "3"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > &""'");
		}
		arg3 = reinterpret_cast<std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *>(argp3);
		AL::Math::computeBox((std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg1, (AL::Math::Pose2D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_dichotomie(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg1 = 0;
		std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *arg2 = 0;
		AL::Math::Pose2D *arg3 = 0;
		int res1 = SWIG_OLDOBJ;
		int res2 = SWIG_OLDOBJ;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "dichotomie", 3, 3, swig_obj)) SWIG_fail;
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "dichotomie" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dichotomie" "', argument " "1"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg1 = ptr;
		}
		{
			std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *ptr = (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > *)0;
			res2 = swig::asptr(swig_obj[1], &ptr);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "dichotomie" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dichotomie" "', argument " "2"" of type '" "std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > const &""'");
			}
			arg2 = ptr;
		}
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "dichotomie" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "dichotomie" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Pose2D *>(argp3);
		AL::Math::dichotomie((std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg1, (std::vector< AL::Math::Position2D, std::allocator< AL::Math::Position2D > > const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_intersectionSegment2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		AL::Math::Position2D *arg3 = 0;
		AL::Math::Position2D *arg4 = 0;
		AL::Math::Position2D *arg5 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		void *argp4 = 0;
		int res4 = 0;
		void *argp5 = 0;
		int res5 = 0;
		PyObject *swig_obj[5];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "intersectionSegment2D", 5, 5, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "intersectionSegment2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intersectionSegment2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "intersectionSegment2D" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intersectionSegment2D" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "intersectionSegment2D" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intersectionSegment2D" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position2D *>(argp3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "intersectionSegment2D" "', argument " "4"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intersectionSegment2D" "', argument " "4"" of type '" "AL::Math::Position2D const &""'");
		}
		arg4 = reinterpret_cast<AL::Math::Position2D *>(argp4);
		res5 = SWIG_ConvertPtr(swig_obj[4], &argp5, SWIGTYPE_p_AL__Math__Position2D, 0);
		if (!SWIG_IsOK(res5)) {
			SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "intersectionSegment2D" "', argument " "5"" of type '" "AL::Math::Position2D &""'");
		}
		if (!argp5) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "intersectionSegment2D" "', argument " "5"" of type '" "AL::Math::Position2D &""'");
		}
		arg5 = reinterpret_cast<AL::Math::Position2D *>(argp5);
		result = (bool)AL::Math::intersectionSegment2D((AL::Math::Position2D const &)*arg1, (AL::Math::Position2D const &)*arg2, (AL::Math::Position2D const &)*arg3, (AL::Math::Position2D const &)*arg4, *arg5);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformLogarithmInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Velocity6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "transformLogarithmInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformLogarithmInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformLogarithmInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformLogarithmInPlace" "', argument " "2"" of type '" "AL::Math::Velocity6D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformLogarithmInPlace" "', argument " "2"" of type '" "AL::Math::Velocity6D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		AL::Math::transformLogarithmInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformLogarithm(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Velocity6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformLogarithm" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformLogarithm" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::transformLogarithm((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_velocityExponential(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "velocityExponential" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "velocityExponential" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = AL::Math::velocityExponential((AL::Math::Velocity6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_velocityExponentialInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "velocityExponentialInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "velocityExponentialInPlace" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "velocityExponentialInPlace" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "velocityExponentialInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "velocityExponentialInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::velocityExponentialInPlace((AL::Math::Velocity6D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceVelocity6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Velocity6D *arg2 = 0;
		AL::Math::Velocity6D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceVelocity6D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Velocity6D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceVelocity6D" "', argument " "3"" of type '" "AL::Math::Velocity6D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceVelocity6D" "', argument " "3"" of type '" "AL::Math::Velocity6D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Velocity6D *>(argp3);
		AL::Math::changeReferenceVelocity6D((AL::Math::Transform const &)*arg1, (AL::Math::Velocity6D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferencePosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		AL::Math::Position6D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferencePosition6D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferencePosition6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferencePosition6D" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition6D" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferencePosition6D" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition6D" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position6D *>(argp3);
		AL::Math::changeReferencePosition6D((AL::Math::Transform const &)*arg1, (AL::Math::Position6D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferencePosition3DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "changeReferencePosition3DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferencePosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferencePosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		AL::Math::changeReferencePosition3DInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransposePosition3DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransposePosition3DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransposePosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransposePosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		AL::Math::changeReferenceTransposePosition3DInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferencePosition3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		AL::Math::Position3D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferencePosition3D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferencePosition3D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition3D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferencePosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferencePosition3D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePosition3D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		AL::Math::changeReferencePosition3D((AL::Math::Transform const &)*arg1, (AL::Math::Position3D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransposePosition3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		AL::Math::Position3D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransposePosition3D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransposePosition3D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition3D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransposePosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceTransposePosition3D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition3D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		AL::Math::changeReferenceTransposePosition3D((AL::Math::Transform const &)*arg1, (AL::Math::Position3D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		AL::Math::Transform *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransform", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransform" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransform" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceTransform" "', argument " "3"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransform" "', argument " "3"" of type '" "AL::Math::Transform &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Transform *>(argp3);
		AL::Math::changeReferenceTransform((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransposeTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		AL::Math::Transform *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransposeTransform", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransposeTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransposeTransform" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeTransform" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceTransposeTransform" "', argument " "3"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeTransform" "', argument " "3"" of type '" "AL::Math::Transform &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Transform *>(argp3);
		AL::Math::changeReferenceTransposeTransform((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransposeVelocity6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Velocity6D *arg2 = 0;
		AL::Math::Velocity6D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransposeVelocity6D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransposeVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeVelocity6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransposeVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeVelocity6D" "', argument " "2"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity6D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Velocity6D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceTransposeVelocity6D" "', argument " "3"" of type '" "AL::Math::Velocity6D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposeVelocity6D" "', argument " "3"" of type '" "AL::Math::Velocity6D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Velocity6D *>(argp3);
		AL::Math::changeReferenceTransposeVelocity6D((AL::Math::Transform const &)*arg1, (AL::Math::Velocity6D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferenceTransposePosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		AL::Math::Position6D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferenceTransposePosition6D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "changeReferenceTransposePosition6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition6D" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferenceTransposePosition6D" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition6D" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferenceTransposePosition6D" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferenceTransposePosition6D" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position6D *>(argp3);
		AL::Math::changeReferenceTransposePosition6D((AL::Math::Transform const &)*arg1, (AL::Math::Position6D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformMeanInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		float *arg3 = 0;
		AL::Math::Transform *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		void *argp4 = 0;
		int res4 = 0;
		PyObject *swig_obj[4];

		if (!SWIG_Python_UnpackTuple(args, "transformMeanInPlace", 4, 4, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformMeanInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMeanInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformMeanInPlace" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMeanInPlace" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformMeanInPlace" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "transformMeanInPlace" "', argument " "4"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMeanInPlace" "', argument " "4"" of type '" "AL::Math::Transform &""'");
		}
		arg4 = reinterpret_cast<AL::Math::Transform *>(argp4);
		AL::Math::transformMeanInPlace((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2, (float const &)*arg3, *arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformMean__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		float *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		AL::Math::Transform result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformMean" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMean" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformMean" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMean" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformMean" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		result = AL::Math::transformMean((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2, (float const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformMean__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Transform result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformMean" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMean" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformMean" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformMean" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = AL::Math::transformMean((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformMean(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformMean", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_transformMean__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_transformMean__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformMean'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformMean(AL::Math::Transform const &,AL::Math::Transform const &,float const &)\n"
			"    AL::Math::transformMean(AL::Math::Transform const &,AL::Math::Transform const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotationPosition3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float *arg4 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		float temp3;
		float val3;
		int ecode3 = 0;
		float temp4;
		float val4;
		int ecode4 = 0;
		AL::Math::Transform result;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotationPosition3D" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotationPosition3D" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromRotationPosition3D" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "transformFromRotationPosition3D" "', argument " "3"" of type '" "float""'");
		}
		temp3 = static_cast<float>(val3);
		arg3 = &temp3;
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "transformFromRotationPosition3D" "', argument " "4"" of type '" "float""'");
		}
		temp4 = static_cast<float>(val4);
		arg4 = &temp4;
		result = AL::Math::transformFromRotationPosition3D((AL::Math::Rotation const &)*arg1, (float const &)*arg2, (float const &)*arg3, (float const &)*arg4);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotationPosition3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Transform result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotationPosition3D" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotationPosition3D" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformFromRotationPosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotationPosition3D" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::transformFromRotationPosition3D((AL::Math::Rotation const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotationPosition3D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformFromRotationPosition3D", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_transformFromRotationPosition3D__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 4) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_transformFromRotationPosition3D__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformFromRotationPosition3D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformFromRotationPosition3D(AL::Math::Rotation const &,float const &,float const &,float const &)\n"
			"    AL::Math::transformFromRotationPosition3D(AL::Math::Rotation const &,AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition3DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "transformFromPosition3DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromPosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformFromPosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformFromPosition3DInPlace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromPosition3D" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPosition3D" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = AL::Math::transformFromPosition3D((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotationInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "transformFromRotationInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotationInPlace" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotationInPlace" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformFromRotationInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotationInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformFromRotationInPlace((AL::Math::Rotation const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = AL::Math::transformFromRotation((AL::Math::Rotation const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromTransformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "rotationFromTransformInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		AL::Math::rotationFromTransformInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::rotationFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotation3DFromRotation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotation3DFromRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotation3DFromRotation" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		result = AL::Math::rotation3DFromRotation((AL::Math::Rotation const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAxesXY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "rotationFromAxesXY", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromAxesXY" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXY" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromAxesXY" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXY" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::rotationFromAxesXY((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAxesXZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "rotationFromAxesXZ", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromAxesXZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromAxesXZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::rotationFromAxesXZ((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAxesYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "rotationFromAxesYZ", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromAxesYZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesYZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromAxesYZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesYZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::rotationFromAxesYZ((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAxesXYZ(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		AL::Math::Position3D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Rotation result;

		if (!SWIG_Python_UnpackTuple(args, "rotationFromAxesXYZ", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromAxesXYZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXYZ" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromAxesXYZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXYZ" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "rotationFromAxesXYZ" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAxesXYZ" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		result = AL::Math::rotationFromAxesXYZ((AL::Math::Position3D const &)*arg1, (AL::Math::Position3D const &)*arg2, (AL::Math::Position3D const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromTransformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position6DFromTransformInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position6DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		AL::Math::position6DFromTransformInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::position6DFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPose2DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "transformFromPose2DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformFromPose2DInPlace((AL::Math::Pose2D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = AL::Math::transformFromPose2D((AL::Math::Pose2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromTransformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "pose2DFromTransformInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pose2DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		AL::Math::pose2DFromTransformInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::pose2DFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position2DFromTransformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position2DFromTransformInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position2DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position2DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		AL::Math::position2DFromTransformInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position2DFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position2DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::position2DFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotation3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = AL::Math::transformFromRotation3D((AL::Math::Rotation3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromPosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = AL::Math::transformFromPosition6D((AL::Math::Position6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromTransformDiffInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		AL::Math::Position6D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "position6DFromTransformDiffInPlace", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromTransformDiffInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformDiffInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position6DFromTransformDiffInPlace" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformDiffInPlace" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "position6DFromTransformDiffInPlace" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformDiffInPlace" "', argument " "3"" of type '" "AL::Math::Position6D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position6D *>(argp3);
		AL::Math::position6DFromTransformDiffInPlace((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromTransformDiff(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position6D result;

		if (!SWIG_Python_UnpackTuple(args, "position6DFromTransformDiff", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromTransformDiff" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformDiff" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position6DFromTransformDiff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromTransformDiff" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = AL::Math::position6DFromTransformDiff((AL::Math::Transform const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position3DFromTransformInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position3DFromTransformInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position3DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position3DFromTransformInPlace" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position3DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position3DFromTransformInPlace" "', argument " "2"" of type '" "AL::Math::Position3D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		AL::Math::position3DFromTransformInPlace((AL::Math::Transform const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position3DFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position3DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position3DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::position3DFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotation3DFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Rotation3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotation3DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotation3DFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::rotation3DFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVecInPlace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		float arg2;
		AL::Math::Position3D *arg3 = 0;
		AL::Math::Transform *arg4 = 0;
		int val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		void *argp4 = 0;
		int res4 = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotVecInPlace" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromRotVecInPlace" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "transformFromRotVecInPlace" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVecInPlace" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		res4 = SWIG_ConvertPtr(swig_obj[3], &argp4, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res4)) {
			SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "transformFromRotVecInPlace" "', argument " "4"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp4) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVecInPlace" "', argument " "4"" of type '" "AL::Math::Transform &""'");
		}
		arg4 = reinterpret_cast<AL::Math::Transform *>(argp4);
		AL::Math::transformFromRotVecInPlace(arg1, arg2, (AL::Math::Position3D const &)*arg3, *arg4);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVec__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		float arg2;
		AL::Math::Position3D *arg3 = 0;
		int val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		AL::Math::Transform result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotVec" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromRotVec" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "transformFromRotVec" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVec" "', argument " "3"" of type '" "AL::Math::Position3D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		result = AL::Math::transformFromRotVec(arg1, arg2, (AL::Math::Position3D const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVecInPlace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotVecInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVecInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "transformFromRotVecInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVecInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::transformFromRotVecInPlace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVecInPlace(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformFromRotVecInPlace", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_transformFromRotVecInPlace__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 4) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						void *vptr = 0;
						int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL);
						_v = SWIG_CheckState(res);
						if (_v) {
							return _wrap_transformFromRotVecInPlace__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformFromRotVecInPlace'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformFromRotVecInPlace(int const,float const,AL::Math::Position3D const &,AL::Math::Transform &)\n"
			"    AL::Math::transformFromRotVecInPlace(AL::Math::Position3D const &,AL::Math::Transform &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVec__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Transform result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromRotVec" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromRotVec" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = AL::Math::transformFromRotVec((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVec__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int *arg1 = 0;
		float *arg2 = 0;
		int temp1;
		int val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		AL::Math::Transform result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "transformFromRotVec" "', argument " "1"" of type '" "int""'");
		}
		temp1 = static_cast<int>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "transformFromRotVec" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		result = AL::Math::transformFromRotVec((int const &)*arg1, (float const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromRotVec(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "transformFromRotVec", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_transformFromRotVec__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_transformFromRotVec__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_transformFromRotVec__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'transformFromRotVec'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::transformFromRotVec(int const,float const,AL::Math::Position3D const &)\n"
			"    AL::Math::transformFromRotVec(AL::Math::Position3D const &)\n"
			"    AL::Math::transformFromRotVec(int const &,float const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = AL::Math::operator *((AL::Math::Transform const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::operator *((AL::Math::Transform const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjection__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Transform result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "axisRotationProjection" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjection" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "axisRotationProjection" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjection" "', argument " "2"" of type '" "AL::Math::Transform const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		result = AL::Math::axisRotationProjection((AL::Math::Position3D const &)*arg1, (AL::Math::Transform const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "axisRotationProjection" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjection" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "axisRotationProjection" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjection" "', argument " "2"" of type '" "AL::Math::Rotation const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		result = AL::Math::axisRotationProjection((AL::Math::Position3D const &)*arg1, (AL::Math::Rotation const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjection(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "axisRotationProjection", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_axisRotationProjection__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_axisRotationProjection__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'axisRotationProjection'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::axisRotationProjection(AL::Math::Position3D const &,AL::Math::Transform const &)\n"
			"    AL::Math::axisRotationProjection(AL::Math::Position3D const &,AL::Math::Rotation const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjectionInPlace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "axisRotationProjectionInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjectionInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "axisRotationProjectionInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjectionInPlace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::axisRotationProjectionInPlace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjectionInPlace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "axisRotationProjectionInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjectionInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "axisRotationProjectionInPlace" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "axisRotationProjectionInPlace" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		AL::Math::axisRotationProjectionInPlace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_axisRotationProjectionInPlace(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "axisRotationProjectionInPlace", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_axisRotationProjectionInPlace__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_axisRotationProjectionInPlace__SWIG_1(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'axisRotationProjectionInPlace'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::axisRotationProjectionInPlace(AL::Math::Position3D const &,AL::Math::Transform &)\n"
			"    AL::Math::axisRotationProjectionInPlace(AL::Math::Position3D const &,AL::Math::Rotation &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_orthogonalSpace__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Transform *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "orthogonalSpace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "orthogonalSpace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Transform, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "orthogonalSpace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "orthogonalSpace" "', argument " "2"" of type '" "AL::Math::Transform &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Transform *>(argp2);
		AL::Math::orthogonalSpace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_orthogonalSpace__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Transform result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "orthogonalSpace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "orthogonalSpace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = AL::Math::orthogonalSpace((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_orthogonalSpace(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "orthogonalSpace", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_orthogonalSpace__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_orthogonalSpace__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'orthogonalSpace'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::orthogonalSpace(AL::Math::Position3D const &,AL::Math::Transform &)\n"
			"    AL::Math::orthogonalSpace(AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_transformFromQuaternion(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::transformFromQuaternion((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Quaternion result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::quaternionFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_transformFromDisplacement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Displacement *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Transform result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Displacement, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "transformFromDisplacement" "', argument " "1"" of type '" "AL::Math::Displacement const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "transformFromDisplacement" "', argument " "1"" of type '" "AL::Math::Displacement const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Displacement *>(argp1);
		result = AL::Math::transformFromDisplacement((AL::Math::Displacement const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Transform(static_cast<const AL::Math::Transform&>(result))), SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_displacementFromTransform(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Transform *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Displacement result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Transform, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "displacementFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "displacementFromTransform" "', argument " "1"" of type '" "AL::Math::Transform const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Transform *>(argp1);
		result = AL::Math::displacementFromTransform((AL::Math::Transform const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Displacement(static_cast<const AL::Math::Displacement&>(result))), SWIGTYPE_p_AL__Math__Displacement, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_modulo2PIInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "modulo2PIInPlace" "', argument " "1"" of type '" "float &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "modulo2PIInPlace" "', argument " "1"" of type '" "float &""'");
		}
		arg1 = reinterpret_cast<float *>(argp1);
		AL::Math::modulo2PIInPlace(*arg1);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_modulo2PI(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "modulo2PI" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (float)AL::Math::modulo2PI(arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_meanAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		int res1 = SWIG_OLDOBJ;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "meanAngle" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "meanAngle" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		result = (float)AL::Math::meanAngle((std::vector< float, std::allocator< float > > const &)*arg1);
		resultobj = SWIG_From_float(static_cast<float>(result));
		if (SWIG_IsNewObj(res1)) delete arg1;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_weightedMeanAngle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		std::vector< float, std::allocator< float > > *arg1 = 0;
		std::vector< float, std::allocator< float > > *arg2 = 0;
		int res1 = SWIG_OLDOBJ;
		int res2 = SWIG_OLDOBJ;
		PyObject *swig_obj[2];
		float result;

		if (!SWIG_Python_UnpackTuple(args, "weightedMeanAngle", 2, 2, swig_obj)) SWIG_fail;
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res1 = swig::asptr(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res1)) {
				SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "weightedMeanAngle" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "weightedMeanAngle" "', argument " "1"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg1 = ptr;
		}
		{
			std::vector< float, std::allocator< float > > *ptr = (std::vector< float, std::allocator< float > > *)0;
			res2 = swig::asptr(swig_obj[1], &ptr);
			if (!SWIG_IsOK(res2)) {
				SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "weightedMeanAngle" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			if (!ptr) {
				SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "weightedMeanAngle" "', argument " "2"" of type '" "std::vector< float,std::allocator< float > > const &""'");
			}
			arg2 = ptr;
		}
		result = (float)AL::Math::weightedMeanAngle((std::vector< float, std::allocator< float > > const &)*arg1, (std::vector< float, std::allocator< float > > const &)*arg2);
		resultobj = SWIG_From_float(static_cast<float>(result));
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return resultobj;
	fail:
		if (SWIG_IsNewObj(res1)) delete arg1;
		if (SWIG_IsNewObj(res2)) delete arg2;
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_clipData__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		float *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clipData" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clipData" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_float, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "clipData" "', argument " "3"" of type '" "float &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clipData" "', argument " "3"" of type '" "float &""'");
		}
		arg3 = reinterpret_cast<float *>(argp3);
		result = (bool)AL::Math::clipData((float const &)*arg1, (float const &)*arg2, *arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_clipData__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		std::vector< float, std::allocator< float > > *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clipData" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clipData" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "clipData" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clipData" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg3 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp3);
		result = (bool)AL::Math::clipData((float const &)*arg1, (float const &)*arg2, *arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_clipData__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		float *arg2 = 0;
		std::vector< std::vector< float, std::allocator< float > >, std::allocator< std::vector< float, std::allocator< float > > > > *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		float temp2;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		bool result;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "clipData" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "clipData" "', argument " "2"" of type '" "float""'");
		}
		temp2 = static_cast<float>(val2);
		arg2 = &temp2;
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "clipData" "', argument " "3"" of type '" "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "clipData" "', argument " "3"" of type '" "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > &""'");
		}
		arg3 = reinterpret_cast<std::vector< std::vector< float, std::allocator< float > >, std::allocator< std::vector< float, std::allocator< float > > > > *>(argp3);
		result = (bool)AL::Math::clipData((float const &)*arg1, (float const &)*arg2, *arg3);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_clipData(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "clipData", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_float, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_clipData__SWIG_0(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_clipData__SWIG_1(self, argc, argv);
					}
				}
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					void *vptr = 0;
					int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t, SWIG_POINTER_NO_NULL);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_clipData__SWIG_2(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'clipData'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::clipData(float const &,float const &,float &)\n"
			"    AL::Math::clipData(float const &,float const &,std::vector< float,std::allocator< float > > &)\n"
			"    AL::Math::clipData(float const &,float const &,std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_changeReferencePose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		AL::Math::Pose2D *arg3 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "changeReferencePose2D", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "changeReferencePose2D" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferencePose2D" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePose2D" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "changeReferencePose2D" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePose2D" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Pose2D *>(argp3);
		AL::Math::changeReferencePose2D((float const &)*arg1, (AL::Math::Pose2D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_changeReferencePose2DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "changeReferencePose2DInPlace", 2, 2, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "changeReferencePose2DInPlace" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "changeReferencePose2DInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "changeReferencePose2DInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		AL::Math::changeReferencePose2DInPlace((float const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromVelocity6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Velocity6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Velocity6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromVelocity6D" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromVelocity6D" "', argument " "1"" of type '" "AL::Math::Velocity6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Velocity6D *>(argp1);
		result = AL::Math::position6DFromVelocity6D((AL::Math::Velocity6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position2DFromPose2DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position2DFromPose2DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position2DFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position2DFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Position2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Position2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		AL::Math::position2DFromPose2DInPlace((AL::Math::Pose2D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position2DFromPose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position2DFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position2DFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = AL::Math::position2DFromPose2D((AL::Math::Pose2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position3DFromPosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position3D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position3DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position3DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = AL::Math::position3DFromPosition6D((AL::Math::Position6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::operator *((AL::Math::Rotation const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::operator *((AL::Math::Quaternion const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position3D(static_cast<const AL::Math::Position3D&>(result))), SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_7(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Position6D *arg2 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Velocity6D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position6D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		result = AL::Math::operator *(arg1, (AL::Math::Position6D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity6D(static_cast<const AL::Math::Velocity6D&>(result))), SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_8(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Position3D *arg2 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Velocity3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "__mul__" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::operator *(arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_9(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation *arg1 = 0;
		AL::Math::Velocity3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Velocity3D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Rotation const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Velocity3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Velocity3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Velocity3D *>(argp2);
		result = AL::Math::operator *((AL::Math::Rotation const &)*arg1, (AL::Math::Velocity3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Velocity3D(static_cast<const AL::Math::Velocity3D&>(result))), SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAngleDirection__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		float *arg1 = 0;
		AL::Math::Position3D *arg2 = 0;
		float temp1;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "rotationFromAngleDirection" "', argument " "1"" of type '" "float""'");
		}
		temp1 = static_cast<float>(val1);
		arg1 = &temp1;
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromAngleDirection" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromAngleDirection" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		result = AL::Math::rotationFromAngleDirection((float const &)*arg1, (AL::Math::Position3D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromAngleDirection(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "rotationFromAngleDirection", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_rotationFromAngleDirection__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 4) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_rotationFromAngleDirection__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'rotationFromAngleDirection'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::rotationFromAngleDirection(float const,float const,float const,float const)\n"
			"    AL::Math::rotationFromAngleDirection(float const &,AL::Math::Position3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_position6DFromPose2DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position6DFromPose2DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPose2DInPlace" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position6DFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPose2DInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		AL::Math::position6DFromPose2DInPlace((AL::Math::Pose2D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromPose2D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPose2D" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		result = AL::Math::position6DFromPose2D((AL::Math::Pose2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromPosition3DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		AL::Math::Position6D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "position6DFromPosition3DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromPosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPosition3DInPlace" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position6D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "position6DFromPosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPosition3DInPlace" "', argument " "2"" of type '" "AL::Math::Position6D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position6D *>(argp2);
		AL::Math::position6DFromPosition3DInPlace((AL::Math::Position3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_position6DFromPosition3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position6D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "position6DFromPosition3D" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "position6DFromPosition3D" "', argument " "1"" of type '" "AL::Math::Position3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position3D *>(argp1);
		result = AL::Math::position6DFromPosition3D((AL::Math::Position3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position6D(static_cast<const AL::Math::Position6D&>(result))), SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition6DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "pose2DFromPosition6DInPlace", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromPosition6DInPlace" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition6DInPlace" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pose2DFromPosition6DInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition6DInPlace" "', argument " "2"" of type '" "AL::Math::Pose2D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		AL::Math::pose2DFromPosition6DInPlace((AL::Math::Position6D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Pose2D result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		result = AL::Math::pose2DFromPosition6D((AL::Math::Position6D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition2DInPlace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		float arg2;
		AL::Math::Pose2D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "pose2DFromPosition2DInPlace", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromPosition2DInPlace" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition2DInPlace" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pose2DFromPosition2DInPlace" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Pose2D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pose2DFromPosition2DInPlace" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition2DInPlace" "', argument " "3"" of type '" "AL::Math::Pose2D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Pose2D *>(argp3);
		AL::Math::pose2DFromPosition2DInPlace((AL::Math::Position2D const &)*arg1, arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition2D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromPosition2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "pose2DFromPosition2D" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = AL::Math::pose2DFromPosition2D((AL::Math::Position2D const &)*arg1, arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition2D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Position2D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Pose2D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "pose2DFromPosition2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pose2DFromPosition2D" "', argument " "1"" of type '" "AL::Math::Position2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position2D *>(argp1);
		result = AL::Math::pose2DFromPosition2D((AL::Math::Position2D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pose2DFromPosition2D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "pose2DFromPosition2D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_pose2DFromPosition2D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_pose2DFromPosition2D__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'pose2DFromPosition2D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::pose2DFromPosition2D(AL::Math::Position2D const &,float const)\n"
			"    AL::Math::pose2DFromPosition2D(AL::Math::Position2D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap___mul____SWIG_10(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		AL::Math::Position2D result;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__mul__" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = AL::Math::operator *((AL::Math::Pose2D const &)*arg1, (AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap___mul__(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "__mul__", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_3(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Transform, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_4(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_5(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_6(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_9(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_10(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_7(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Position3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_8(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity3D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Velocity6D, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap___mul____SWIG_2(self, argc, argv);
				}
			}
		}

	fail:
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_quaternionFromRotation3D__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = 0;
		AL::Math::Quaternion *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quaternionFromRotation3D" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionFromRotation3D" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		AL::Math::quaternionFromRotation3D((AL::Math::Rotation3D const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionFromRotation3D__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Rotation3D *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Quaternion result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rotation3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionFromRotation3D" "', argument " "1"" of type '" "AL::Math::Rotation3D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rotation3D *>(argp1);
		result = AL::Math::quaternionFromRotation3D((AL::Math::Rotation3D const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Quaternion(static_cast<const AL::Math::Quaternion&>(result))), SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_quaternionFromRotation3D(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "quaternionFromRotation3D", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_quaternionFromRotation3D__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_quaternionFromRotation3D__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'quaternionFromRotation3D'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::quaternionFromRotation3D(AL::Math::Rotation3D const &,AL::Math::Quaternion &)\n"
			"    AL::Math::quaternionFromRotation3D(AL::Math::Rotation3D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_rotationFromQuaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		AL::Math::Rotation *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotationFromQuaternion" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromQuaternion" "', argument " "2"" of type '" "AL::Math::Rotation &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation *>(argp2);
		AL::Math::rotationFromQuaternion((AL::Math::Quaternion const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromQuaternion__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Rotation result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotationFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::rotationFromQuaternion((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation(static_cast<const AL::Math::Rotation&>(result))), SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotationFromQuaternion(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "rotationFromQuaternion", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_rotationFromQuaternion__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Rotation, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_rotationFromQuaternion__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 4) {
			int _v;
			{
				int res = SWIG_AsVal_float(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_rotationFromQuaternion__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'rotationFromQuaternion'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::rotationFromQuaternion(float const,float const,float const,float const)\n"
			"    AL::Math::rotationFromQuaternion(AL::Math::Quaternion const &,AL::Math::Rotation &)\n"
			"    AL::Math::rotationFromQuaternion(AL::Math::Quaternion const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_rotation3DFromQuaternion__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		AL::Math::Rotation3D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotation3DFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotation3DFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rotation3D, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "rotation3DFromQuaternion" "', argument " "2"" of type '" "AL::Math::Rotation3D &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotation3DFromQuaternion" "', argument " "2"" of type '" "AL::Math::Rotation3D &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rotation3D *>(argp2);
		AL::Math::rotation3DFromQuaternion((AL::Math::Quaternion const &)*arg1, *arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotation3DFromQuaternion__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Quaternion *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Rotation3D result;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Quaternion, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "rotation3DFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "rotation3DFromQuaternion" "', argument " "1"" of type '" "AL::Math::Quaternion const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Quaternion *>(argp1);
		result = AL::Math::rotation3DFromQuaternion((AL::Math::Quaternion const &)*arg1);
		resultobj = SWIG_NewPointerObj((new AL::Math::Rotation3D(static_cast<const AL::Math::Rotation3D&>(result))), SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_rotation3DFromQuaternion(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "rotation3DFromQuaternion", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_rotation3DFromQuaternion__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Quaternion, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				void *vptr = 0;
				int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_AL__Math__Rotation3D, SWIG_POINTER_NO_NULL);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_rotation3DFromQuaternion__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'rotation3DFromQuaternion'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::rotation3DFromQuaternion(AL::Math::Quaternion const &,AL::Math::Rotation3D &)\n"
			"    AL::Math::rotation3DFromQuaternion(AL::Math::Quaternion const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_quaternionPosition3DFromPosition6D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Position6D *arg1 = 0;
		AL::Math::Quaternion *arg2 = 0;
		AL::Math::Position3D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "quaternionPosition3DFromPosition6D", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Position6D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "quaternionPosition3DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionPosition3DFromPosition6D" "', argument " "1"" of type '" "AL::Math::Position6D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Position6D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Quaternion, 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "quaternionPosition3DFromPosition6D" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionPosition3DFromPosition6D" "', argument " "2"" of type '" "AL::Math::Quaternion &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Quaternion *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position3D, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "quaternionPosition3DFromPosition6D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "quaternionPosition3DFromPosition6D" "', argument " "3"" of type '" "AL::Math::Position3D &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position3D *>(argp3);
		AL::Math::quaternionPosition3DFromPosition6D((AL::Math::Position6D const &)*arg1, *arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_pointMassRotationalInertia(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		AL::Math::Position3D *arg2 = 0;
		std::vector< float, std::allocator< float > > *arg3 = 0;
		float val1;
		int ecode1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];

		if (!SWIG_Python_UnpackTuple(args, "pointMassRotationalInertia", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "pointMassRotationalInertia" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position3D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "pointMassRotationalInertia" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pointMassRotationalInertia" "', argument " "2"" of type '" "AL::Math::Position3D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position3D *>(argp2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_std__vectorT_float_std__allocatorT_float_t_t, 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "pointMassRotationalInertia" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "pointMassRotationalInertia" "', argument " "3"" of type '" "std::vector< float,std::allocator< float > > &""'");
		}
		arg3 = reinterpret_cast<std::vector< float, std::allocator< float > > *>(argp3);
		AL::Math::pointMassRotationalInertia(arg1, (AL::Math::Position3D const &)*arg2, *arg3);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Shape3D(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Shape3D *arg1 = (AL::Math::Shape3D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3D, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shape3D" "', argument " "1"" of type '" "AL::Math::Shape3D *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3D *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3D_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Shape3D *arg1 = (AL::Math::Shape3D *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Shape3D_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3D_accept" "', argument " "1"" of type '" "AL::Math::Shape3D const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3D *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3D_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3D_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::Shape3D const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Shape3D_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Shape3D, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *_wrap_new_Sphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Sphere *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Sphere" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (AL::Math::Sphere *)new AL::Math::Sphere(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Sphere, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Sphere_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Sphere *arg1 = (AL::Math::Sphere *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Sphere_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Sphere, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_accept" "', argument " "1"" of type '" "AL::Math::Sphere const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Sphere *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Sphere_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Sphere_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::Sphere const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Sphere_getRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Sphere *arg1 = (AL::Math::Sphere *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Sphere, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Sphere_getRadius" "', argument " "1"" of type '" "AL::Math::Sphere const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Sphere *>(argp1);
		result = (float)((AL::Math::Sphere const *)arg1)->getRadius();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Sphere(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Sphere *arg1 = (AL::Math::Sphere *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Sphere, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Sphere" "', argument " "1"" of type '" "AL::Math::Sphere *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Sphere *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Sphere_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Sphere, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Sphere_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_RoundedRectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float arg3;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		PyObject *swig_obj[3];
		AL::Math::RoundedRectangle *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_RoundedRectangle", 3, 3, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RoundedRectangle" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RoundedRectangle" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_RoundedRectangle" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::RoundedRectangle *)new AL::Math::RoundedRectangle(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__RoundedRectangle, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_RoundedRectangle_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::RoundedRectangle *arg1 = (AL::Math::RoundedRectangle *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "RoundedRectangle_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoundedRectangle_accept" "', argument " "1"" of type '" "AL::Math::RoundedRectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoundedRectangle_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoundedRectangle_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::RoundedRectangle const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_RoundedRectangle_getHalfExtentX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::RoundedRectangle *arg1 = (AL::Math::RoundedRectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoundedRectangle_getHalfExtentX" "', argument " "1"" of type '" "AL::Math::RoundedRectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp1);
		result = (float)((AL::Math::RoundedRectangle const *)arg1)->getHalfExtentX();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_RoundedRectangle_getHalfExtentY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::RoundedRectangle *arg1 = (AL::Math::RoundedRectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoundedRectangle_getHalfExtentY" "', argument " "1"" of type '" "AL::Math::RoundedRectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp1);
		result = (float)((AL::Math::RoundedRectangle const *)arg1)->getHalfExtentY();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_RoundedRectangle_getRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::RoundedRectangle *arg1 = (AL::Math::RoundedRectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoundedRectangle_getRadius" "', argument " "1"" of type '" "AL::Math::RoundedRectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp1);
		result = (float)((AL::Math::RoundedRectangle const *)arg1)->getRadius();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_RoundedRectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::RoundedRectangle *arg1 = (AL::Math::RoundedRectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__RoundedRectangle, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RoundedRectangle" "', argument " "1"" of type '" "AL::Math::RoundedRectangle *""'");
		}
		arg1 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *RoundedRectangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__RoundedRectangle, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *RoundedRectangle_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_Pill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pill *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_Pill", 2, 2, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pill" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pill" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Pill *)new AL::Math::Pill(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pill, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pill_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pill *arg1 = (AL::Math::Pill *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pill_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pill, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pill_accept" "', argument " "1"" of type '" "AL::Math::Pill const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pill *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pill_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pill_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::Pill const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pill_getHalfExtent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pill *arg1 = (AL::Math::Pill *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pill, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pill_getHalfExtent" "', argument " "1"" of type '" "AL::Math::Pill const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pill *>(argp1);
		result = (float)((AL::Math::Pill const *)arg1)->getHalfExtent();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pill_getRadius(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pill *arg1 = (AL::Math::Pill *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pill, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pill_getRadius" "', argument " "1"" of type '" "AL::Math::Pill const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pill *>(argp1);
		result = (float)((AL::Math::Pill const *)arg1)->getRadius();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Pill(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pill *arg1 = (AL::Math::Pill *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pill, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pill" "', argument " "1"" of type '" "AL::Math::Pill *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pill *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Pill_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Pill, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Pill_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_Plane_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Plane *arg1 = (AL::Math::Plane *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Plane_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Plane, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Plane_accept" "', argument " "1"" of type '" "AL::Math::Plane const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Plane *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Plane_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Plane_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::Plane const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Plane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Plane *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_Plane", 0, 0, 0)) SWIG_fail;
		result = (AL::Math::Plane *)new AL::Math::Plane();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Plane, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Plane(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Plane *arg1 = (AL::Math::Plane *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Plane, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Plane" "', argument " "1"" of type '" "AL::Math::Plane *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Plane *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Plane_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Plane, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Plane_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_HalfSpace_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfSpace *arg1 = (AL::Math::HalfSpace *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "HalfSpace_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__HalfSpace, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfSpace_accept" "', argument " "1"" of type '" "AL::Math::HalfSpace const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::HalfSpace *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HalfSpace_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HalfSpace_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::HalfSpace const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_HalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfSpace *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_HalfSpace", 0, 0, 0)) SWIG_fail;
		result = (AL::Math::HalfSpace *)new AL::Math::HalfSpace();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__HalfSpace, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_HalfSpace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfSpace *arg1 = (AL::Math::HalfSpace *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__HalfSpace, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HalfSpace" "', argument " "1"" of type '" "AL::Math::HalfSpace *""'");
		}
		arg1 = reinterpret_cast<AL::Math::HalfSpace *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *HalfSpace_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__HalfSpace, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *HalfSpace_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_Rectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float arg2;
		float val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Rectangle *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_Rectangle", 2, 2, swig_obj)) SWIG_fail;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Rectangle" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Rectangle" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Rectangle *)new AL::Math::Rectangle(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Rectangle, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rectangle_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rectangle *arg1 = (AL::Math::Rectangle *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Rectangle_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_accept" "', argument " "1"" of type '" "AL::Math::Rectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rectangle *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Rectangle_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Rectangle_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::Rectangle const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rectangle_getHalfExtentX(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rectangle *arg1 = (AL::Math::Rectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_getHalfExtentX" "', argument " "1"" of type '" "AL::Math::Rectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rectangle *>(argp1);
		result = (float)((AL::Math::Rectangle const *)arg1)->getHalfExtentX();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Rectangle_getHalfExtentY(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rectangle *arg1 = (AL::Math::Rectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rectangle, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Rectangle_getHalfExtentY" "', argument " "1"" of type '" "AL::Math::Rectangle const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rectangle *>(argp1);
		result = (float)((AL::Math::Rectangle const *)arg1)->getHalfExtentY();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Rectangle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Rectangle *arg1 = (AL::Math::Rectangle *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Rectangle, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Rectangle" "', argument " "1"" of type '" "AL::Math::Rectangle *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Rectangle *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Rectangle_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Rectangle, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Rectangle_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_HalfLine_accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfLine *arg1 = (AL::Math::HalfLine *) 0;
		AL::Math::Shape3DVisitor *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "HalfLine_accept", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__HalfLine, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "HalfLine_accept" "', argument " "1"" of type '" "AL::Math::HalfLine const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::HalfLine *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "HalfLine_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "HalfLine_accept" "', argument " "2"" of type '" "AL::Math::Shape3DVisitor const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp2);
		((AL::Math::HalfLine const *)arg1)->accept((AL::Math::Shape3DVisitor const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_HalfLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfLine *result = 0;

		if (!SWIG_Python_UnpackTuple(args, "new_HalfLine", 0, 0, 0)) SWIG_fail;
		result = (AL::Math::HalfLine *)new AL::Math::HalfLine();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__HalfLine, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_HalfLine(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::HalfLine *arg1 = (AL::Math::HalfLine *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__HalfLine, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_HalfLine" "', argument " "1"" of type '" "AL::Math::HalfLine *""'");
		}
		arg1 = reinterpret_cast<AL::Math::HalfLine *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *HalfLine_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__HalfLine, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *HalfLine_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::Pill *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pill, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Pill const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Pill const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pill *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::Pill const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::Sphere *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Sphere, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Sphere const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Sphere const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Sphere *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::Sphere const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::RoundedRectangle *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::RoundedRectangle const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::RoundedRectangle const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::RoundedRectangle const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::Plane *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Plane, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Plane const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Plane const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Plane *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::Plane const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::HalfSpace *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__HalfSpace, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfSpace const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfSpace const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::HalfSpace *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::HalfSpace const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::Rectangle *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rectangle, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Rectangle const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Rectangle const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rectangle *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::Rectangle const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		AL::Math::HalfLine *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Shape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__HalfLine, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfLine const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Shape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfLine const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::HalfLine *>(argp2);
		((AL::Math::Shape3DVisitor const *)arg1)->visit((AL::Math::HalfLine const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Shape3DVisitor_visit(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "Shape3DVisitor_visit", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pill, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Sphere, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__RoundedRectangle, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Plane, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_3(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__HalfSpace, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_4(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rectangle, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_5(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__Shape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__HalfLine, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_Shape3DVisitor_visit__SWIG_6(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'Shape3DVisitor_visit'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::Pill const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::Sphere const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::RoundedRectangle const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::Plane const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::HalfSpace const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::Rectangle const &) const\n"
			"    AL::Math::Shape3DVisitor::visit(AL::Math::HalfLine const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_delete_Shape3DVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Shape3DVisitor *arg1 = (AL::Math::Shape3DVisitor *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Shape3DVisitor, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Shape3DVisitor" "', argument " "1"" of type '" "AL::Math::Shape3DVisitor *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Shape3DVisitor *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Shape3DVisitor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Shape3DVisitor, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *_wrap_new_NotImplementedShape3DVisitor__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		std::string arg1;
		AL::Math::NotImplementedShape3DVisitor *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		{
			std::string *ptr = (std::string *)0;
			int res = SWIG_AsPtr_std_string(swig_obj[0], &ptr);
			if (!SWIG_IsOK(res) || !ptr) {
				SWIG_exception_fail(SWIG_ArgError((ptr ? res : SWIG_TypeError)), "in method '" "new_NotImplementedShape3DVisitor" "', argument " "1"" of type '" "std::string const""'");
			}
			arg1 = *ptr;
			if (SWIG_IsNewObj(res)) delete ptr;
		}
		result = (AL::Math::NotImplementedShape3DVisitor *)new AL::Math::NotImplementedShape3DVisitor(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_NotImplementedShape3DVisitor__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::NotImplementedShape3DVisitor *)new AL::Math::NotImplementedShape3DVisitor();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_NotImplementedShape3DVisitor(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[2] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_NotImplementedShape3DVisitor", 0, 1, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_NotImplementedShape3DVisitor__SWIG_1(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_NotImplementedShape3DVisitor__SWIG_0(self, argc, argv);
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_NotImplementedShape3DVisitor'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::NotImplementedShape3DVisitor::NotImplementedShape3DVisitor(std::string const)\n"
			"    AL::Math::NotImplementedShape3DVisitor::NotImplementedShape3DVisitor()\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::Pill *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pill, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Pill const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Pill const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pill *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::Pill const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::Sphere *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Sphere, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Sphere const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Sphere const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Sphere *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::Sphere const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::RoundedRectangle *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__RoundedRectangle, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::RoundedRectangle const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::RoundedRectangle const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::RoundedRectangle *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::RoundedRectangle const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::Plane *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Plane, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Plane const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Plane const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Plane *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::Plane const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::HalfSpace *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__HalfSpace, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfSpace const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfSpace const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::HalfSpace *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::HalfSpace const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::Rectangle *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Rectangle, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Rectangle const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::Rectangle const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Rectangle *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::Rectangle const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit__SWIG_6(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		AL::Math::HalfLine *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__HalfLine, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfLine const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "NotImplementedShape3DVisitor_visit" "', argument " "2"" of type '" "AL::Math::HalfLine const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::HalfLine *>(argp2);
		((AL::Math::NotImplementedShape3DVisitor const *)arg1)->visit((AL::Math::HalfLine const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_NotImplementedShape3DVisitor_visit(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "NotImplementedShape3DVisitor_visit", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Pill, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_0(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Sphere, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__RoundedRectangle, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_2(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Plane, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_3(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__HalfSpace, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_4(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__Rectangle, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_5(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			void *vptr = 0;
			int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_AL__Math__HalfLine, SWIG_POINTER_NO_NULL | 0);
				_v = SWIG_CheckState(res);
				if (_v) {
					return _wrap_NotImplementedShape3DVisitor_visit__SWIG_6(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'NotImplementedShape3DVisitor_visit'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::Pill const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::Sphere const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::RoundedRectangle const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::Plane const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::HalfSpace const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::Rectangle const &) const\n"
			"    AL::Math::NotImplementedShape3DVisitor::visit(AL::Math::HalfLine const &) const\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_delete_NotImplementedShape3DVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::NotImplementedShape3DVisitor *arg1 = (AL::Math::NotImplementedShape3DVisitor *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NotImplementedShape3DVisitor" "', argument " "1"" of type '" "AL::Math::NotImplementedShape3DVisitor *""'");
		}
		arg1 = reinterpret_cast<AL::Math::NotImplementedShape3DVisitor *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *NotImplementedShape3DVisitor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__NotImplementedShape3DVisitor, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *NotImplementedShape3DVisitor_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_Point2Di__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		int arg2;
		int val1;
		int ecode1 = 0;
		int val2;
		int ecode2 = 0;
		AL::Math::Point2Di *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point2Di" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Point2Di" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		result = (AL::Math::Point2Di *)new AL::Math::Point2Di(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Point2Di__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		int val1;
		int ecode1 = 0;
		AL::Math::Point2Di *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Point2Di" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		result = (AL::Math::Point2Di *)new AL::Math::Point2Di(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Point2Di__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Point2Di *)new AL::Math::Point2Di();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Point2Di(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[3] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Point2Di", 0, 2, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Point2Di__SWIG_2(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Point2Di__SWIG_1(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_int(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_Point2Di__SWIG_0(self, argc, argv);
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Point2Di'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Point2Di::Point2Di(int,int)\n"
			"    AL::Math::Point2Di::Point2Di(int)\n"
			"    AL::Math::Point2Di::Point2Di()\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Point2Di_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		int arg2;
		void *argp1 = 0;
		int res1 = 0;
		int val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Point2Di_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di_x_set" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point2Di_x_set" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Point2Di_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di_x_get" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		result = (int)((arg1)->x);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Point2Di_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		int arg2;
		void *argp1 = 0;
		int res1 = 0;
		int val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Point2Di_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di_y_set" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Point2Di_y_set" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Point2Di_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di_y_get" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		result = (int)((arg1)->y);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Point2Di___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		AL::Math::Point2Di *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Point2Di___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di___eq__" "', argument " "1"" of type '" "AL::Math::Point2Di const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Point2Di___eq__" "', argument " "2"" of type '" "AL::Math::Point2Di const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Point2Di___eq__" "', argument " "2"" of type '" "AL::Math::Point2Di const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Point2Di *>(argp2);
		result = (bool)((AL::Math::Point2Di const *)arg1)->operator ==((AL::Math::Point2Di const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_Point2Di___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Point2Di___repr__" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		result = (char *)AL_Math_Point2Di___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_Point2Di(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = (AL::Math::Point2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Point2Di" "', argument " "1"" of type '" "AL::Math::Point2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Point2Di_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Point2Di, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Point2Di_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		int arg2;
		float arg3;
		int val1;
		int ecode1 = 0;
		int val2;
		int ecode2 = 0;
		float val3;
		int ecode3 = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pose2Di" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pose2Di" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		ecode3 = SWIG_AsVal_float(swig_obj[2], &val3);
		if (!SWIG_IsOK(ecode3)) {
			SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_Pose2Di" "', argument " "3"" of type '" "float""'");
		}
		arg3 = static_cast<float>(val3);
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di(arg1, arg2, arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		int arg2;
		int val1;
		int ecode1 = 0;
		int val2;
		int ecode2 = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pose2Di" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pose2Di" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di(arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_2(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		int val1;
		int ecode1 = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_Pose2Di" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di(arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_3(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **SWIGUNUSEDPARM(swig_obj)) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 0) || (nobjs > 0)) SWIG_fail;
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di();
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_4(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 2) || (nobjs > 2)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pose2Di" "', argument " "1"" of type '" "AL::Math::Point2Di const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pose2Di" "', argument " "1"" of type '" "AL::Math::Point2Di const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_Pose2Di" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di((AL::Math::Point2Di const &)*arg1, arg2);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di__SWIG_5(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		AL::Math::Point2Di *arg1 = 0;
		void *argp1 = 0;
		int res1 = 0;
		AL::Math::Pose2Di *result = 0;

		if ((nobjs < 1) || (nobjs > 1)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Pose2Di" "', argument " "1"" of type '" "AL::Math::Point2Di const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Pose2Di" "', argument " "1"" of type '" "AL::Math::Point2Di const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Point2Di *>(argp1);
		result = (AL::Math::Pose2Di *)new AL::Math::Pose2Di((AL::Math::Point2Di const &)*arg1);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_Pose2Di(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[4] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_Pose2Di", 0, 3, argv))) SWIG_fail;
		--argc;
		if (argc == 0) {
			return _wrap_new_Pose2Di__SWIG_3(self, argc, argv);
		}
		if (argc == 1) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				return _wrap_new_Pose2Di__SWIG_5(self, argc, argv);
			}
		}
		if (argc == 1) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				return _wrap_new_Pose2Di__SWIG_2(self, argc, argv);
			}
		}
		if (argc == 2) {
			int _v;
			int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_NO_NULL | 0);
			_v = SWIG_CheckState(res);
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_Pose2Di__SWIG_4(self, argc, argv);
				}
			}
		}
		if (argc == 2) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_int(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					return _wrap_new_Pose2Di__SWIG_1(self, argc, argv);
				}
			}
		}
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_int(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					{
						int res = SWIG_AsVal_float(argv[2], NULL);
						_v = SWIG_CheckState(res);
					}
					if (_v) {
						return _wrap_new_Pose2Di__SWIG_0(self, argc, argv);
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_Pose2Di'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::Pose2Di::Pose2Di(int,int,float)\n"
			"    AL::Math::Pose2Di::Pose2Di(int,int)\n"
			"    AL::Math::Pose2Di::Pose2Di(int)\n"
			"    AL::Math::Pose2Di::Pose2Di()\n"
			"    AL::Math::Pose2Di::Pose2Di(AL::Math::Point2Di const &,float)\n"
			"    AL::Math::Pose2Di::Pose2Di(AL::Math::Point2Di const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_x_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		int arg2;
		void *argp1 = 0;
		int res1 = 0;
		int val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2Di_x_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_x_set" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2Di_x_set" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		if (arg1) (arg1)->x = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_x_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_x_get" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		result = (int)((arg1)->x);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_y_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		int arg2;
		void *argp1 = 0;
		int res1 = 0;
		int val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2Di_y_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_y_set" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2Di_y_set" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		if (arg1) (arg1)->y = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_y_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_y_get" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		result = (int)((arg1)->y);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_theta_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "Pose2Di_theta_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_theta_set" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Pose2Di_theta_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->theta = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di_theta_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di_theta_get" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		result = (float)((arg1)->theta);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_Pose2Di___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		AL::Math::Pose2Di *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		bool result;

		if (!SWIG_Python_UnpackTuple(args, "Pose2Di___eq__", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pose2Di___eq__" "', argument " "1"" of type '" "AL::Math::Pose2Di const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Pose2Di___eq__" "', argument " "2"" of type '" "AL::Math::Pose2Di const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Pose2Di___eq__" "', argument " "2"" of type '" "AL::Math::Pose2Di const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2Di *>(argp2);
		result = (bool)((AL::Math::Pose2Di const *)arg1)->operator ==((AL::Math::Pose2Di const &)*arg2);
		resultobj = SWIG_From_bool(static_cast<bool>(result));
		return resultobj;
	fail:
		PyErr_Clear();
		Py_INCREF(Py_NotImplemented);
		return Py_NotImplemented;
	}


	SWIGINTERN PyObject *_wrap_delete_Pose2Di(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2Di *arg1 = (AL::Math::Pose2Di *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2Di, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Pose2Di" "', argument " "1"" of type '" "AL::Math::Pose2Di *""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2Di *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *Pose2Di_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__Pose2Di, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *Pose2Di_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	SWIGINTERN PyObject *_wrap_roundToInt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		float arg1;
		float val1;
		int ecode1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		ecode1 = SWIG_AsVal_float(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "roundToInt" "', argument " "1"" of type '" "float""'");
		}
		arg1 = static_cast<float>(val1);
		result = (int)AL::Math::roundToInt(arg1);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_OccupancyMapParams__SWIG_0(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		float arg2;
		AL::Math::Position2D *arg3 = 0;
		float arg4;
		int val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		float val4;
		int ecode4 = 0;
		AL::Math::OccupancyMapParams *result = 0;

		if ((nobjs < 4) || (nobjs > 4)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OccupancyMapParams" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OccupancyMapParams" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_OccupancyMapParams" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OccupancyMapParams" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position2D *>(argp3);
		ecode4 = SWIG_AsVal_float(swig_obj[3], &val4);
		if (!SWIG_IsOK(ecode4)) {
			SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "new_OccupancyMapParams" "', argument " "4"" of type '" "float""'");
		}
		arg4 = static_cast<float>(val4);
		result = (AL::Math::OccupancyMapParams *)new AL::Math::OccupancyMapParams(arg1, arg2, (AL::Math::Position2D const &)*arg3, arg4);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__OccupancyMapParams, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_OccupancyMapParams__SWIG_1(PyObject *SWIGUNUSEDPARM(self), Py_ssize_t nobjs, PyObject **swig_obj) {
		PyObject *resultobj = 0;
		int arg1;
		float arg2;
		AL::Math::Position2D *arg3 = 0;
		int val1;
		int ecode1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		AL::Math::OccupancyMapParams *result = 0;

		if ((nobjs < 3) || (nobjs > 3)) SWIG_fail;
		ecode1 = SWIG_AsVal_int(swig_obj[0], &val1);
		if (!SWIG_IsOK(ecode1)) {
			SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_OccupancyMapParams" "', argument " "1"" of type '" "int""'");
		}
		arg1 = static_cast<int>(val1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_OccupancyMapParams" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "new_OccupancyMapParams" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_OccupancyMapParams" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position2D *>(argp3);
		result = (AL::Math::OccupancyMapParams *)new AL::Math::OccupancyMapParams(arg1, arg2, (AL::Math::Position2D const &)*arg3);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__OccupancyMapParams, SWIG_POINTER_NEW | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_new_OccupancyMapParams(PyObject *self, PyObject *args) {
		Py_ssize_t argc;
		PyObject *argv[5] = {
		  0
		};

		if (!(argc = SWIG_Python_UnpackTuple(args, "new_OccupancyMapParams", 0, 4, argv))) SWIG_fail;
		--argc;
		if (argc == 3) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						return _wrap_new_OccupancyMapParams__SWIG_1(self, argc, argv);
					}
				}
			}
		}
		if (argc == 4) {
			int _v;
			{
				int res = SWIG_AsVal_int(argv[0], NULL);
				_v = SWIG_CheckState(res);
			}
			if (_v) {
				{
					int res = SWIG_AsVal_float(argv[1], NULL);
					_v = SWIG_CheckState(res);
				}
				if (_v) {
					int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_NO_NULL | 0);
					_v = SWIG_CheckState(res);
					if (_v) {
						{
							int res = SWIG_AsVal_float(argv[3], NULL);
							_v = SWIG_CheckState(res);
						}
						if (_v) {
							return _wrap_new_OccupancyMapParams__SWIG_0(self, argc, argv);
						}
					}
				}
			}
		}

	fail:
		SWIG_Python_RaiseOrModifyTypeError("Wrong number or type of arguments for overloaded function 'new_OccupancyMapParams'.\n"
			"  Possible C/C++ prototypes are:\n"
			"    AL::Math::OccupancyMapParams::OccupancyMapParams(int,float,AL::Math::Position2D const &,float)\n"
			"    AL::Math::OccupancyMapParams::OccupancyMapParams(int,float,AL::Math::Position2D const &)\n");
		return 0;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_initOriginOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_initOriginOffset", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_initOriginOffset" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_initOriginOffset" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_initOriginOffset" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		(arg1)->initOriginOffset((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getPixelFromOffsetAndScale(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::Pose2D *arg1 = 0;
		float arg2;
		AL::Math::Position2D *arg3 = 0;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		void *argp3 = 0;
		int res3 = 0;
		PyObject *swig_obj[3];
		AL::Math::Point2Di result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getPixelFromOffsetAndScale", 3, 3, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getPixelFromOffsetAndScale" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp1) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPixelFromOffsetAndScale" "', argument " "1"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg1 = reinterpret_cast<AL::Math::Pose2D *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OccupancyMapParams_getPixelFromOffsetAndScale" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		res3 = SWIG_ConvertPtr(swig_obj[2], &argp3, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res3)) {
			SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "OccupancyMapParams_getPixelFromOffsetAndScale" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp3) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPixelFromOffsetAndScale" "', argument " "3"" of type '" "AL::Math::Position2D const &""'");
		}
		arg3 = reinterpret_cast<AL::Math::Position2D *>(argp3);
		result = AL::Math::OccupancyMapParams::getPixelFromOffsetAndScale((AL::Math::Pose2D const &)*arg1, arg2, (AL::Math::Position2D const &)*arg3);
		resultobj = SWIG_NewPointerObj((new AL::Math::Point2Di(static_cast<const AL::Math::Point2Di&>(result))), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getPixelFromPose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Pose2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Point2Di result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getPixelFromPose", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getPixelFromPose" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_getPixelFromPose" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPixelFromPose" "', argument " "2"" of type '" "AL::Math::Pose2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2D *>(argp2);
		result = ((AL::Math::OccupancyMapParams const *)arg1)->getPixelFromPose((AL::Math::Pose2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Point2Di(static_cast<const AL::Math::Point2Di&>(result))), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getPixelFromPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Point2Di result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getPixelFromPosition", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getPixelFromPosition" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_getPixelFromPosition" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPixelFromPosition" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = ((AL::Math::OccupancyMapParams const *)arg1)->getPixelFromPosition((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Point2Di(static_cast<const AL::Math::Point2Di&>(result))), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getPoseFromPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Pose2Di *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Pose2D result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getPoseFromPixel", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getPoseFromPixel" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Pose2Di, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_getPoseFromPixel" "', argument " "2"" of type '" "AL::Math::Pose2Di const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPoseFromPixel" "', argument " "2"" of type '" "AL::Math::Pose2Di const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Pose2Di *>(argp2);
		result = ((AL::Math::OccupancyMapParams const *)arg1)->getPoseFromPixel((AL::Math::Pose2Di const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Pose2D(static_cast<const AL::Math::Pose2D&>(result))), SWIGTYPE_p_AL__Math__Pose2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getPositionFromPixel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Point2Di *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Position2D result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getPositionFromPixel", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getPositionFromPixel" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Point2Di, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_getPositionFromPixel" "', argument " "2"" of type '" "AL::Math::Point2Di const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getPositionFromPixel" "', argument " "2"" of type '" "AL::Math::Point2Di const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Point2Di *>(argp2);
		result = ((AL::Math::OccupancyMapParams const *)arg1)->getPositionFromPixel((AL::Math::Point2Di const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Position2D(static_cast<const AL::Math::Position2D&>(result))), SWIGTYPE_p_AL__Math__Position2D, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getDeltaPixelFromDeltaPosition(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Position2D *arg2 = 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];
		AL::Math::Point2Di result;

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_getDeltaPixelFromDeltaPosition", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getDeltaPixelFromDeltaPosition" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_getDeltaPixelFromDeltaPosition" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		if (!argp2) {
			SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "OccupancyMapParams_getDeltaPixelFromDeltaPosition" "', argument " "2"" of type '" "AL::Math::Position2D const &""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		result = ((AL::Math::OccupancyMapParams const *)arg1)->getDeltaPixelFromDeltaPosition((AL::Math::Position2D const &)*arg2);
		resultobj = SWIG_NewPointerObj((new AL::Math::Point2Di(static_cast<const AL::Math::Point2Di&>(result))), SWIGTYPE_p_AL__Math__Point2Di, SWIG_POINTER_OWN | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_getObstacleProbabilityThreshold(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_getObstacleProbabilityThreshold" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams const *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (float)((AL::Math::OccupancyMapParams const *)arg1)->getObstacleProbabilityThreshold();
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_size_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		int arg2;
		void *argp1 = 0;
		int res1 = 0;
		int val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_size_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_size_set" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		ecode2 = SWIG_AsVal_int(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OccupancyMapParams_size_set" "', argument " "2"" of type '" "int""'");
		}
		arg2 = static_cast<int>(val2);
		if (arg1) (arg1)->size = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_size_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		int result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_size_get" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (int)((arg1)->size);
		resultobj = SWIG_From_int(static_cast<int>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_metersPerPixel_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_metersPerPixel_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_metersPerPixel_set" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OccupancyMapParams_metersPerPixel_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->metersPerPixel = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_metersPerPixel_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_metersPerPixel_get" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (float)((arg1)->metersPerPixel);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_originOffset_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		AL::Math::Position2D *arg2 = (AL::Math::Position2D *) 0;
		void *argp1 = 0;
		int res1 = 0;
		void *argp2 = 0;
		int res2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_originOffset_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_originOffset_set" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		res2 = SWIG_ConvertPtr(swig_obj[1], &argp2, SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		if (!SWIG_IsOK(res2)) {
			SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "OccupancyMapParams_originOffset_set" "', argument " "2"" of type '" "AL::Math::Position2D *""'");
		}
		arg2 = reinterpret_cast<AL::Math::Position2D *>(argp2);
		if (arg1) (arg1)->originOffset = *arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_originOffset_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		AL::Math::Position2D *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_originOffset_get" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (AL::Math::Position2D *)& ((arg1)->originOffset);
		resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_AL__Math__Position2D, 0 | 0);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_obstacleProbabilityThreshold_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		float arg2;
		void *argp1 = 0;
		int res1 = 0;
		float val2;
		int ecode2 = 0;
		PyObject *swig_obj[2];

		if (!SWIG_Python_UnpackTuple(args, "OccupancyMapParams_obstacleProbabilityThreshold_set", 2, 2, swig_obj)) SWIG_fail;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_obstacleProbabilityThreshold_set" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		ecode2 = SWIG_AsVal_float(swig_obj[1], &val2);
		if (!SWIG_IsOK(ecode2)) {
			SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "OccupancyMapParams_obstacleProbabilityThreshold_set" "', argument " "2"" of type '" "float""'");
		}
		arg2 = static_cast<float>(val2);
		if (arg1) (arg1)->obstacleProbabilityThreshold = arg2;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams_obstacleProbabilityThreshold_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		float result;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams_obstacleProbabilityThreshold_get" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (float)((arg1)->obstacleProbabilityThreshold);
		resultobj = SWIG_From_float(static_cast<float>(result));
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_OccupancyMapParams___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];
		char *result = 0;

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, 0 | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OccupancyMapParams___repr__" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		result = (char *)AL_Math_OccupancyMapParams___repr__(arg1);
		resultobj = SWIG_FromCharPtr((const char *)result);
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *_wrap_delete_OccupancyMapParams(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *resultobj = 0;
		AL::Math::OccupancyMapParams *arg1 = (AL::Math::OccupancyMapParams *) 0;
		void *argp1 = 0;
		int res1 = 0;
		PyObject *swig_obj[1];

		if (!args) SWIG_fail;
		swig_obj[0] = args;
		res1 = SWIG_ConvertPtr(swig_obj[0], &argp1, SWIGTYPE_p_AL__Math__OccupancyMapParams, SWIG_POINTER_DISOWN | 0);
		if (!SWIG_IsOK(res1)) {
			SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OccupancyMapParams" "', argument " "1"" of type '" "AL::Math::OccupancyMapParams *""'");
		}
		arg1 = reinterpret_cast<AL::Math::OccupancyMapParams *>(argp1);
		delete arg1;
		resultobj = SWIG_Py_Void();
		return resultobj;
	fail:
		return NULL;
	}


	SWIGINTERN PyObject *OccupancyMapParams_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		PyObject *obj;
		if (!SWIG_Python_UnpackTuple(args, "swigregister", 1, 1, &obj)) return NULL;
		SWIG_TypeNewClientData(SWIGTYPE_p_AL__Math__OccupancyMapParams, SWIG_NewClientData(obj));
		return SWIG_Py_Void();
	}

	SWIGINTERN PyObject *OccupancyMapParams_swiginit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
		return SWIG_Python_InitShadowInstance(args);
	}

	static PyMethodDef SwigMethods[] = {
		 { "SWIG_PyInstanceMethod_New", SWIG_PyInstanceMethod_New, METH_O, NULL},
		 { "delete_SwigPyIterator", _wrap_delete_SwigPyIterator, METH_O, "delete_SwigPyIterator(SwigPyIterator self)"},
		 { "SwigPyIterator_value", _wrap_SwigPyIterator_value, METH_O, "SwigPyIterator_value(SwigPyIterator self) -> PyObject *"},
		 { "SwigPyIterator_incr", _wrap_SwigPyIterator_incr, METH_VARARGS, "SwigPyIterator_incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
		 { "SwigPyIterator_decr", _wrap_SwigPyIterator_decr, METH_VARARGS, "SwigPyIterator_decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator"},
		 { "SwigPyIterator_distance", _wrap_SwigPyIterator_distance, METH_VARARGS, "SwigPyIterator_distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"},
		 { "SwigPyIterator_equal", _wrap_SwigPyIterator_equal, METH_VARARGS, "SwigPyIterator_equal(SwigPyIterator self, SwigPyIterator x) -> bool"},
		 { "SwigPyIterator_copy", _wrap_SwigPyIterator_copy, METH_O, "SwigPyIterator_copy(SwigPyIterator self) -> SwigPyIterator"},
		 { "SwigPyIterator_next", _wrap_SwigPyIterator_next, METH_O, "SwigPyIterator_next(SwigPyIterator self) -> PyObject *"},
		 { "SwigPyIterator___next__", _wrap_SwigPyIterator___next__, METH_O, "SwigPyIterator___next__(SwigPyIterator self) -> PyObject *"},
		 { "SwigPyIterator_previous", _wrap_SwigPyIterator_previous, METH_O, "SwigPyIterator_previous(SwigPyIterator self) -> PyObject *"},
		 { "SwigPyIterator_advance", _wrap_SwigPyIterator_advance, METH_VARARGS, "SwigPyIterator_advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
		 { "SwigPyIterator___eq__", _wrap_SwigPyIterator___eq__, METH_VARARGS, "SwigPyIterator___eq__(SwigPyIterator self, SwigPyIterator x) -> bool"},
		 { "SwigPyIterator___ne__", _wrap_SwigPyIterator___ne__, METH_VARARGS, "SwigPyIterator___ne__(SwigPyIterator self, SwigPyIterator x) -> bool"},
		 { "SwigPyIterator___iadd__", _wrap_SwigPyIterator___iadd__, METH_VARARGS, "SwigPyIterator___iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
		 { "SwigPyIterator___isub__", _wrap_SwigPyIterator___isub__, METH_VARARGS, "SwigPyIterator___isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
		 { "SwigPyIterator___add__", _wrap_SwigPyIterator___add__, METH_VARARGS, "SwigPyIterator___add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"},
		 { "SwigPyIterator___sub__", _wrap_SwigPyIterator___sub__, METH_VARARGS, "\n"
			"SwigPyIterator___sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator\n"
			"SwigPyIterator___sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t\n"
			""},
		 { "SwigPyIterator_swigregister", SwigPyIterator_swigregister, METH_O, NULL},
		 { "vectorFloat_iterator", _wrap_vectorFloat_iterator, METH_O, "vectorFloat_iterator(vectorFloat self) -> SwigPyIterator"},
		 { "vectorFloat___nonzero__", _wrap_vectorFloat___nonzero__, METH_O, "vectorFloat___nonzero__(vectorFloat self) -> bool"},
		 { "vectorFloat___bool__", _wrap_vectorFloat___bool__, METH_O, "vectorFloat___bool__(vectorFloat self) -> bool"},
		 { "vectorFloat___len__", _wrap_vectorFloat___len__, METH_O, "vectorFloat___len__(vectorFloat self) -> std::vector< float >::size_type"},
		 { "vectorFloat___getslice__", _wrap_vectorFloat___getslice__, METH_VARARGS, "vectorFloat___getslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vectorFloat"},
		 { "vectorFloat___setslice__", _wrap_vectorFloat___setslice__, METH_VARARGS, "\n"
			"vectorFloat___setslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)\n"
			"vectorFloat___setslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, vectorFloat v)\n"
			""},
		 { "vectorFloat___delslice__", _wrap_vectorFloat___delslice__, METH_VARARGS, "vectorFloat___delslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"},
		 { "vectorFloat___delitem__", _wrap_vectorFloat___delitem__, METH_VARARGS, "\n"
			"vectorFloat___delitem__(vectorFloat self, std::vector< float >::difference_type i)\n"
			"vectorFloat___delitem__(vectorFloat self, PySliceObject * slice)\n"
			""},
		 { "vectorFloat___getitem__", _wrap_vectorFloat___getitem__, METH_VARARGS, "\n"
			"vectorFloat___getitem__(vectorFloat self, PySliceObject * slice) -> vectorFloat\n"
			"vectorFloat___getitem__(vectorFloat self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &\n"
			""},
		 { "vectorFloat___setitem__", _wrap_vectorFloat___setitem__, METH_VARARGS, "\n"
			"vectorFloat___setitem__(vectorFloat self, PySliceObject * slice, vectorFloat v)\n"
			"vectorFloat___setitem__(vectorFloat self, PySliceObject * slice)\n"
			"vectorFloat___setitem__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)\n"
			""},
		 { "vectorFloat_pop", _wrap_vectorFloat_pop, METH_O, "vectorFloat_pop(vectorFloat self) -> std::vector< float >::value_type"},
		 { "vectorFloat_append", _wrap_vectorFloat_append, METH_VARARGS, "vectorFloat_append(vectorFloat self, std::vector< float >::value_type const & x)"},
		 { "vectorFloat_empty", _wrap_vectorFloat_empty, METH_O, "vectorFloat_empty(vectorFloat self) -> bool"},
		 { "vectorFloat_size", _wrap_vectorFloat_size, METH_O, "vectorFloat_size(vectorFloat self) -> std::vector< float >::size_type"},
		 { "vectorFloat_swap", _wrap_vectorFloat_swap, METH_VARARGS, "vectorFloat_swap(vectorFloat self, vectorFloat v)"},
		 { "vectorFloat_begin", _wrap_vectorFloat_begin, METH_O, "vectorFloat_begin(vectorFloat self) -> std::vector< float >::iterator"},
		 { "vectorFloat_end", _wrap_vectorFloat_end, METH_O, "vectorFloat_end(vectorFloat self) -> std::vector< float >::iterator"},
		 { "vectorFloat_rbegin", _wrap_vectorFloat_rbegin, METH_O, "vectorFloat_rbegin(vectorFloat self) -> std::vector< float >::reverse_iterator"},
		 { "vectorFloat_rend", _wrap_vectorFloat_rend, METH_O, "vectorFloat_rend(vectorFloat self) -> std::vector< float >::reverse_iterator"},
		 { "vectorFloat_clear", _wrap_vectorFloat_clear, METH_O, "vectorFloat_clear(vectorFloat self)"},
		 { "vectorFloat_get_allocator", _wrap_vectorFloat_get_allocator, METH_O, "vectorFloat_get_allocator(vectorFloat self) -> std::vector< float >::allocator_type"},
		 { "vectorFloat_pop_back", _wrap_vectorFloat_pop_back, METH_O, "vectorFloat_pop_back(vectorFloat self)"},
		 { "vectorFloat_erase", _wrap_vectorFloat_erase, METH_VARARGS, "\n"
			"vectorFloat_erase(vectorFloat self, std::vector< float >::iterator pos) -> std::vector< float >::iterator\n"
			"vectorFloat_erase(vectorFloat self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator\n"
			""},
		 { "new_vectorFloat", _wrap_new_vectorFloat, METH_VARARGS, "\n"
			"vectorFloat()\n"
			"vectorFloat(vectorFloat other)\n"
			"vectorFloat(std::vector< float >::size_type size)\n"
			"new_vectorFloat(std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vectorFloat\n"
			""},
		 { "vectorFloat_push_back", _wrap_vectorFloat_push_back, METH_VARARGS, "vectorFloat_push_back(vectorFloat self, std::vector< float >::value_type const & x)"},
		 { "vectorFloat_front", _wrap_vectorFloat_front, METH_O, "vectorFloat_front(vectorFloat self) -> std::vector< float >::value_type const &"},
		 { "vectorFloat_back", _wrap_vectorFloat_back, METH_O, "vectorFloat_back(vectorFloat self) -> std::vector< float >::value_type const &"},
		 { "vectorFloat_assign", _wrap_vectorFloat_assign, METH_VARARGS, "vectorFloat_assign(vectorFloat self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"},
		 { "vectorFloat_resize", _wrap_vectorFloat_resize, METH_VARARGS, "\n"
			"vectorFloat_resize(vectorFloat self, std::vector< float >::size_type new_size)\n"
			"vectorFloat_resize(vectorFloat self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)\n"
			""},
		 { "vectorFloat_insert", _wrap_vectorFloat_insert, METH_VARARGS, "\n"
			"vectorFloat_insert(vectorFloat self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator\n"
			"vectorFloat_insert(vectorFloat self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)\n"
			""},
		 { "vectorFloat_reserve", _wrap_vectorFloat_reserve, METH_VARARGS, "vectorFloat_reserve(vectorFloat self, std::vector< float >::size_type n)"},
		 { "vectorFloat_capacity", _wrap_vectorFloat_capacity, METH_O, "vectorFloat_capacity(vectorFloat self) -> std::vector< float >::size_type"},
		 { "vectorFloat___repr__", _wrap_vectorFloat___repr__, METH_O, "vectorFloat___repr__(vectorFloat self) -> std::string"},
		 { "delete_vectorFloat", _wrap_delete_vectorFloat, METH_O, "delete_vectorFloat(vectorFloat self)"},
		 { "vectorFloat_swigregister", vectorFloat_swigregister, METH_O, NULL},
		 { "vectorFloat_swiginit", vectorFloat_swiginit, METH_VARARGS, NULL},
		 { "vectorPosition2D_iterator", _wrap_vectorPosition2D_iterator, METH_O, "vectorPosition2D_iterator(vectorPosition2D self) -> SwigPyIterator"},
		 { "vectorPosition2D___nonzero__", _wrap_vectorPosition2D___nonzero__, METH_O, "vectorPosition2D___nonzero__(vectorPosition2D self) -> bool"},
		 { "vectorPosition2D___bool__", _wrap_vectorPosition2D___bool__, METH_O, "vectorPosition2D___bool__(vectorPosition2D self) -> bool"},
		 { "vectorPosition2D___len__", _wrap_vectorPosition2D___len__, METH_O, "vectorPosition2D___len__(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::size_type"},
		 { "vectorPosition2D___getslice__", _wrap_vectorPosition2D___getslice__, METH_VARARGS, "vectorPosition2D___getslice__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j) -> vectorPosition2D"},
		 { "vectorPosition2D___setslice__", _wrap_vectorPosition2D___setslice__, METH_VARARGS, "\n"
			"vectorPosition2D___setslice__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j)\n"
			"vectorPosition2D___setslice__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j, vectorPosition2D v)\n"
			""},
		 { "vectorPosition2D___delslice__", _wrap_vectorPosition2D___delslice__, METH_VARARGS, "vectorPosition2D___delslice__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i, std::vector< AL::Math::Position2D >::difference_type j)"},
		 { "vectorPosition2D___delitem__", _wrap_vectorPosition2D___delitem__, METH_VARARGS, "\n"
			"vectorPosition2D___delitem__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i)\n"
			"vectorPosition2D___delitem__(vectorPosition2D self, PySliceObject * slice)\n"
			""},
		 { "vectorPosition2D___getitem__", _wrap_vectorPosition2D___getitem__, METH_VARARGS, "\n"
			"vectorPosition2D___getitem__(vectorPosition2D self, PySliceObject * slice) -> vectorPosition2D\n"
			"vectorPosition2D___getitem__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i) -> Position2D\n"
			""},
		 { "vectorPosition2D___setitem__", _wrap_vectorPosition2D___setitem__, METH_VARARGS, "\n"
			"vectorPosition2D___setitem__(vectorPosition2D self, PySliceObject * slice, vectorPosition2D v)\n"
			"vectorPosition2D___setitem__(vectorPosition2D self, PySliceObject * slice)\n"
			"vectorPosition2D___setitem__(vectorPosition2D self, std::vector< AL::Math::Position2D >::difference_type i, Position2D x)\n"
			""},
		 { "vectorPosition2D_pop", _wrap_vectorPosition2D_pop, METH_O, "vectorPosition2D_pop(vectorPosition2D self) -> Position2D"},
		 { "vectorPosition2D_append", _wrap_vectorPosition2D_append, METH_VARARGS, "vectorPosition2D_append(vectorPosition2D self, Position2D x)"},
		 { "vectorPosition2D_empty", _wrap_vectorPosition2D_empty, METH_O, "vectorPosition2D_empty(vectorPosition2D self) -> bool"},
		 { "vectorPosition2D_size", _wrap_vectorPosition2D_size, METH_O, "vectorPosition2D_size(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::size_type"},
		 { "vectorPosition2D_swap", _wrap_vectorPosition2D_swap, METH_VARARGS, "vectorPosition2D_swap(vectorPosition2D self, vectorPosition2D v)"},
		 { "vectorPosition2D_begin", _wrap_vectorPosition2D_begin, METH_O, "vectorPosition2D_begin(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::iterator"},
		 { "vectorPosition2D_end", _wrap_vectorPosition2D_end, METH_O, "vectorPosition2D_end(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::iterator"},
		 { "vectorPosition2D_rbegin", _wrap_vectorPosition2D_rbegin, METH_O, "vectorPosition2D_rbegin(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::reverse_iterator"},
		 { "vectorPosition2D_rend", _wrap_vectorPosition2D_rend, METH_O, "vectorPosition2D_rend(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::reverse_iterator"},
		 { "vectorPosition2D_clear", _wrap_vectorPosition2D_clear, METH_O, "vectorPosition2D_clear(vectorPosition2D self)"},
		 { "vectorPosition2D_get_allocator", _wrap_vectorPosition2D_get_allocator, METH_O, "vectorPosition2D_get_allocator(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::allocator_type"},
		 { "vectorPosition2D_pop_back", _wrap_vectorPosition2D_pop_back, METH_O, "vectorPosition2D_pop_back(vectorPosition2D self)"},
		 { "vectorPosition2D_erase", _wrap_vectorPosition2D_erase, METH_VARARGS, "\n"
			"vectorPosition2D_erase(vectorPosition2D self, std::vector< AL::Math::Position2D >::iterator pos) -> std::vector< AL::Math::Position2D >::iterator\n"
			"vectorPosition2D_erase(vectorPosition2D self, std::vector< AL::Math::Position2D >::iterator first, std::vector< AL::Math::Position2D >::iterator last) -> std::vector< AL::Math::Position2D >::iterator\n"
			""},
		 { "new_vectorPosition2D", _wrap_new_vectorPosition2D, METH_VARARGS, "\n"
			"vectorPosition2D()\n"
			"vectorPosition2D(vectorPosition2D other)\n"
			"vectorPosition2D(std::vector< AL::Math::Position2D >::size_type size)\n"
			"new_vectorPosition2D(std::vector< AL::Math::Position2D >::size_type size, Position2D value) -> vectorPosition2D\n"
			""},
		 { "vectorPosition2D_push_back", _wrap_vectorPosition2D_push_back, METH_VARARGS, "vectorPosition2D_push_back(vectorPosition2D self, Position2D x)"},
		 { "vectorPosition2D_front", _wrap_vectorPosition2D_front, METH_O, "vectorPosition2D_front(vectorPosition2D self) -> Position2D"},
		 { "vectorPosition2D_back", _wrap_vectorPosition2D_back, METH_O, "vectorPosition2D_back(vectorPosition2D self) -> Position2D"},
		 { "vectorPosition2D_assign", _wrap_vectorPosition2D_assign, METH_VARARGS, "vectorPosition2D_assign(vectorPosition2D self, std::vector< AL::Math::Position2D >::size_type n, Position2D x)"},
		 { "vectorPosition2D_resize", _wrap_vectorPosition2D_resize, METH_VARARGS, "\n"
			"vectorPosition2D_resize(vectorPosition2D self, std::vector< AL::Math::Position2D >::size_type new_size)\n"
			"vectorPosition2D_resize(vectorPosition2D self, std::vector< AL::Math::Position2D >::size_type new_size, Position2D x)\n"
			""},
		 { "vectorPosition2D_insert", _wrap_vectorPosition2D_insert, METH_VARARGS, "\n"
			"vectorPosition2D_insert(vectorPosition2D self, std::vector< AL::Math::Position2D >::iterator pos, Position2D x) -> std::vector< AL::Math::Position2D >::iterator\n"
			"vectorPosition2D_insert(vectorPosition2D self, std::vector< AL::Math::Position2D >::iterator pos, std::vector< AL::Math::Position2D >::size_type n, Position2D x)\n"
			""},
		 { "vectorPosition2D_reserve", _wrap_vectorPosition2D_reserve, METH_VARARGS, "vectorPosition2D_reserve(vectorPosition2D self, std::vector< AL::Math::Position2D >::size_type n)"},
		 { "vectorPosition2D_capacity", _wrap_vectorPosition2D_capacity, METH_O, "vectorPosition2D_capacity(vectorPosition2D self) -> std::vector< AL::Math::Position2D >::size_type"},
		 { "vectorPosition2D___repr__", _wrap_vectorPosition2D___repr__, METH_O, "vectorPosition2D___repr__(vectorPosition2D self) -> std::string"},
		 { "delete_vectorPosition2D", _wrap_delete_vectorPosition2D, METH_O, "delete_vectorPosition2D(vectorPosition2D self)"},
		 { "vectorPosition2D_swigregister", vectorPosition2D_swigregister, METH_O, NULL},
		 { "vectorPosition2D_swiginit", vectorPosition2D_swiginit, METH_VARARGS, NULL},
		 { "vectorPose2D_iterator", _wrap_vectorPose2D_iterator, METH_O, "vectorPose2D_iterator(vectorPose2D self) -> SwigPyIterator"},
		 { "vectorPose2D___nonzero__", _wrap_vectorPose2D___nonzero__, METH_O, "vectorPose2D___nonzero__(vectorPose2D self) -> bool"},
		 { "vectorPose2D___bool__", _wrap_vectorPose2D___bool__, METH_O, "vectorPose2D___bool__(vectorPose2D self) -> bool"},
		 { "vectorPose2D___len__", _wrap_vectorPose2D___len__, METH_O, "vectorPose2D___len__(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::size_type"},
		 { "vectorPose2D___getslice__", _wrap_vectorPose2D___getslice__, METH_VARARGS, "vectorPose2D___getslice__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j) -> vectorPose2D"},
		 { "vectorPose2D___setslice__", _wrap_vectorPose2D___setslice__, METH_VARARGS, "\n"
			"vectorPose2D___setslice__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j)\n"
			"vectorPose2D___setslice__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j, vectorPose2D v)\n"
			""},
		 { "vectorPose2D___delslice__", _wrap_vectorPose2D___delslice__, METH_VARARGS, "vectorPose2D___delslice__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i, std::vector< AL::Math::Pose2D >::difference_type j)"},
		 { "vectorPose2D___delitem__", _wrap_vectorPose2D___delitem__, METH_VARARGS, "\n"
			"vectorPose2D___delitem__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i)\n"
			"vectorPose2D___delitem__(vectorPose2D self, PySliceObject * slice)\n"
			""},
		 { "vectorPose2D___getitem__", _wrap_vectorPose2D___getitem__, METH_VARARGS, "\n"
			"vectorPose2D___getitem__(vectorPose2D self, PySliceObject * slice) -> vectorPose2D\n"
			"vectorPose2D___getitem__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i) -> Pose2D\n"
			""},
		 { "vectorPose2D___setitem__", _wrap_vectorPose2D___setitem__, METH_VARARGS, "\n"
			"vectorPose2D___setitem__(vectorPose2D self, PySliceObject * slice, vectorPose2D v)\n"
			"vectorPose2D___setitem__(vectorPose2D self, PySliceObject * slice)\n"
			"vectorPose2D___setitem__(vectorPose2D self, std::vector< AL::Math::Pose2D >::difference_type i, Pose2D x)\n"
			""},
		 { "vectorPose2D_pop", _wrap_vectorPose2D_pop, METH_O, "vectorPose2D_pop(vectorPose2D self) -> Pose2D"},
		 { "vectorPose2D_append", _wrap_vectorPose2D_append, METH_VARARGS, "vectorPose2D_append(vectorPose2D self, Pose2D x)"},
		 { "vectorPose2D_empty", _wrap_vectorPose2D_empty, METH_O, "vectorPose2D_empty(vectorPose2D self) -> bool"},
		 { "vectorPose2D_size", _wrap_vectorPose2D_size, METH_O, "vectorPose2D_size(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::size_type"},
		 { "vectorPose2D_swap", _wrap_vectorPose2D_swap, METH_VARARGS, "vectorPose2D_swap(vectorPose2D self, vectorPose2D v)"},
		 { "vectorPose2D_begin", _wrap_vectorPose2D_begin, METH_O, "vectorPose2D_begin(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::iterator"},
		 { "vectorPose2D_end", _wrap_vectorPose2D_end, METH_O, "vectorPose2D_end(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::iterator"},
		 { "vectorPose2D_rbegin", _wrap_vectorPose2D_rbegin, METH_O, "vectorPose2D_rbegin(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::reverse_iterator"},
		 { "vectorPose2D_rend", _wrap_vectorPose2D_rend, METH_O, "vectorPose2D_rend(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::reverse_iterator"},
		 { "vectorPose2D_clear", _wrap_vectorPose2D_clear, METH_O, "vectorPose2D_clear(vectorPose2D self)"},
		 { "vectorPose2D_get_allocator", _wrap_vectorPose2D_get_allocator, METH_O, "vectorPose2D_get_allocator(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::allocator_type"},
		 { "vectorPose2D_pop_back", _wrap_vectorPose2D_pop_back, METH_O, "vectorPose2D_pop_back(vectorPose2D self)"},
		 { "vectorPose2D_erase", _wrap_vectorPose2D_erase, METH_VARARGS, "\n"
			"vectorPose2D_erase(vectorPose2D self, std::vector< AL::Math::Pose2D >::iterator pos) -> std::vector< AL::Math::Pose2D >::iterator\n"
			"vectorPose2D_erase(vectorPose2D self, std::vector< AL::Math::Pose2D >::iterator first, std::vector< AL::Math::Pose2D >::iterator last) -> std::vector< AL::Math::Pose2D >::iterator\n"
			""},
		 { "new_vectorPose2D", _wrap_new_vectorPose2D, METH_VARARGS, "\n"
			"vectorPose2D()\n"
			"vectorPose2D(vectorPose2D other)\n"
			"vectorPose2D(std::vector< AL::Math::Pose2D >::size_type size)\n"
			"new_vectorPose2D(std::vector< AL::Math::Pose2D >::size_type size, Pose2D value) -> vectorPose2D\n"
			""},
		 { "vectorPose2D_push_back", _wrap_vectorPose2D_push_back, METH_VARARGS, "vectorPose2D_push_back(vectorPose2D self, Pose2D x)"},
		 { "vectorPose2D_front", _wrap_vectorPose2D_front, METH_O, "vectorPose2D_front(vectorPose2D self) -> Pose2D"},
		 { "vectorPose2D_back", _wrap_vectorPose2D_back, METH_O, "vectorPose2D_back(vectorPose2D self) -> Pose2D"},
		 { "vectorPose2D_assign", _wrap_vectorPose2D_assign, METH_VARARGS, "vectorPose2D_assign(vectorPose2D self, std::vector< AL::Math::Pose2D >::size_type n, Pose2D x)"},
		 { "vectorPose2D_resize", _wrap_vectorPose2D_resize, METH_VARARGS, "\n"
			"vectorPose2D_resize(vectorPose2D self, std::vector< AL::Math::Pose2D >::size_type new_size)\n"
			"vectorPose2D_resize(vectorPose2D self, std::vector< AL::Math::Pose2D >::size_type new_size, Pose2D x)\n"
			""},
		 { "vectorPose2D_insert", _wrap_vectorPose2D_insert, METH_VARARGS, "\n"
			"vectorPose2D_insert(vectorPose2D self, std::vector< AL::Math::Pose2D >::iterator pos, Pose2D x) -> std::vector< AL::Math::Pose2D >::iterator\n"
			"vectorPose2D_insert(vectorPose2D self, std::vector< AL::Math::Pose2D >::iterator pos, std::vector< AL::Math::Pose2D >::size_type n, Pose2D x)\n"
			""},
		 { "vectorPose2D_reserve", _wrap_vectorPose2D_reserve, METH_VARARGS, "vectorPose2D_reserve(vectorPose2D self, std::vector< AL::Math::Pose2D >::size_type n)"},
		 { "vectorPose2D_capacity", _wrap_vectorPose2D_capacity, METH_O, "vectorPose2D_capacity(vectorPose2D self) -> std::vector< AL::Math::Pose2D >::size_type"},
		 { "vectorPose2D___repr__", _wrap_vectorPose2D___repr__, METH_O, "vectorPose2D___repr__(vectorPose2D self) -> std::string"},
		 { "delete_vectorPose2D", _wrap_delete_vectorPose2D, METH_O, "delete_vectorPose2D(vectorPose2D self)"},
		 { "vectorPose2D_swigregister", vectorPose2D_swigregister, METH_O, NULL},
		 { "vectorPose2D_swiginit", vectorPose2D_swiginit, METH_VARARGS, NULL},
		 { "vectorPosition6D_iterator", _wrap_vectorPosition6D_iterator, METH_O, "vectorPosition6D_iterator(vectorPosition6D self) -> SwigPyIterator"},
		 { "vectorPosition6D___nonzero__", _wrap_vectorPosition6D___nonzero__, METH_O, "vectorPosition6D___nonzero__(vectorPosition6D self) -> bool"},
		 { "vectorPosition6D___bool__", _wrap_vectorPosition6D___bool__, METH_O, "vectorPosition6D___bool__(vectorPosition6D self) -> bool"},
		 { "vectorPosition6D___len__", _wrap_vectorPosition6D___len__, METH_O, "vectorPosition6D___len__(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::size_type"},
		 { "vectorPosition6D___getslice__", _wrap_vectorPosition6D___getslice__, METH_VARARGS, "vectorPosition6D___getslice__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j) -> vectorPosition6D"},
		 { "vectorPosition6D___setslice__", _wrap_vectorPosition6D___setslice__, METH_VARARGS, "\n"
			"vectorPosition6D___setslice__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j)\n"
			"vectorPosition6D___setslice__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j, vectorPosition6D v)\n"
			""},
		 { "vectorPosition6D___delslice__", _wrap_vectorPosition6D___delslice__, METH_VARARGS, "vectorPosition6D___delslice__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i, std::vector< AL::Math::Position6D >::difference_type j)"},
		 { "vectorPosition6D___delitem__", _wrap_vectorPosition6D___delitem__, METH_VARARGS, "\n"
			"vectorPosition6D___delitem__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i)\n"
			"vectorPosition6D___delitem__(vectorPosition6D self, PySliceObject * slice)\n"
			""},
		 { "vectorPosition6D___getitem__", _wrap_vectorPosition6D___getitem__, METH_VARARGS, "\n"
			"vectorPosition6D___getitem__(vectorPosition6D self, PySliceObject * slice) -> vectorPosition6D\n"
			"vectorPosition6D___getitem__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i) -> Position6D\n"
			""},
		 { "vectorPosition6D___setitem__", _wrap_vectorPosition6D___setitem__, METH_VARARGS, "\n"
			"vectorPosition6D___setitem__(vectorPosition6D self, PySliceObject * slice, vectorPosition6D v)\n"
			"vectorPosition6D___setitem__(vectorPosition6D self, PySliceObject * slice)\n"
			"vectorPosition6D___setitem__(vectorPosition6D self, std::vector< AL::Math::Position6D >::difference_type i, Position6D x)\n"
			""},
		 { "vectorPosition6D_pop", _wrap_vectorPosition6D_pop, METH_O, "vectorPosition6D_pop(vectorPosition6D self) -> Position6D"},
		 { "vectorPosition6D_append", _wrap_vectorPosition6D_append, METH_VARARGS, "vectorPosition6D_append(vectorPosition6D self, Position6D x)"},
		 { "vectorPosition6D_empty", _wrap_vectorPosition6D_empty, METH_O, "vectorPosition6D_empty(vectorPosition6D self) -> bool"},
		 { "vectorPosition6D_size", _wrap_vectorPosition6D_size, METH_O, "vectorPosition6D_size(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::size_type"},
		 { "vectorPosition6D_swap", _wrap_vectorPosition6D_swap, METH_VARARGS, "vectorPosition6D_swap(vectorPosition6D self, vectorPosition6D v)"},
		 { "vectorPosition6D_begin", _wrap_vectorPosition6D_begin, METH_O, "vectorPosition6D_begin(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::iterator"},
		 { "vectorPosition6D_end", _wrap_vectorPosition6D_end, METH_O, "vectorPosition6D_end(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::iterator"},
		 { "vectorPosition6D_rbegin", _wrap_vectorPosition6D_rbegin, METH_O, "vectorPosition6D_rbegin(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::reverse_iterator"},
		 { "vectorPosition6D_rend", _wrap_vectorPosition6D_rend, METH_O, "vectorPosition6D_rend(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::reverse_iterator"},
		 { "vectorPosition6D_clear", _wrap_vectorPosition6D_clear, METH_O, "vectorPosition6D_clear(vectorPosition6D self)"},
		 { "vectorPosition6D_get_allocator", _wrap_vectorPosition6D_get_allocator, METH_O, "vectorPosition6D_get_allocator(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::allocator_type"},
		 { "vectorPosition6D_pop_back", _wrap_vectorPosition6D_pop_back, METH_O, "vectorPosition6D_pop_back(vectorPosition6D self)"},
		 { "vectorPosition6D_erase", _wrap_vectorPosition6D_erase, METH_VARARGS, "\n"
			"vectorPosition6D_erase(vectorPosition6D self, std::vector< AL::Math::Position6D >::iterator pos) -> std::vector< AL::Math::Position6D >::iterator\n"
			"vectorPosition6D_erase(vectorPosition6D self, std::vector< AL::Math::Position6D >::iterator first, std::vector< AL::Math::Position6D >::iterator last) -> std::vector< AL::Math::Position6D >::iterator\n"
			""},
		 { "new_vectorPosition6D", _wrap_new_vectorPosition6D, METH_VARARGS, "\n"
			"vectorPosition6D()\n"
			"vectorPosition6D(vectorPosition6D other)\n"
			"vectorPosition6D(std::vector< AL::Math::Position6D >::size_type size)\n"
			"new_vectorPosition6D(std::vector< AL::Math::Position6D >::size_type size, Position6D value) -> vectorPosition6D\n"
			""},
		 { "vectorPosition6D_push_back", _wrap_vectorPosition6D_push_back, METH_VARARGS, "vectorPosition6D_push_back(vectorPosition6D self, Position6D x)"},
		 { "vectorPosition6D_front", _wrap_vectorPosition6D_front, METH_O, "vectorPosition6D_front(vectorPosition6D self) -> Position6D"},
		 { "vectorPosition6D_back", _wrap_vectorPosition6D_back, METH_O, "vectorPosition6D_back(vectorPosition6D self) -> Position6D"},
		 { "vectorPosition6D_assign", _wrap_vectorPosition6D_assign, METH_VARARGS, "vectorPosition6D_assign(vectorPosition6D self, std::vector< AL::Math::Position6D >::size_type n, Position6D x)"},
		 { "vectorPosition6D_resize", _wrap_vectorPosition6D_resize, METH_VARARGS, "\n"
			"vectorPosition6D_resize(vectorPosition6D self, std::vector< AL::Math::Position6D >::size_type new_size)\n"
			"vectorPosition6D_resize(vectorPosition6D self, std::vector< AL::Math::Position6D >::size_type new_size, Position6D x)\n"
			""},
		 { "vectorPosition6D_insert", _wrap_vectorPosition6D_insert, METH_VARARGS, "\n"
			"vectorPosition6D_insert(vectorPosition6D self, std::vector< AL::Math::Position6D >::iterator pos, Position6D x) -> std::vector< AL::Math::Position6D >::iterator\n"
			"vectorPosition6D_insert(vectorPosition6D self, std::vector< AL::Math::Position6D >::iterator pos, std::vector< AL::Math::Position6D >::size_type n, Position6D x)\n"
			""},
		 { "vectorPosition6D_reserve", _wrap_vectorPosition6D_reserve, METH_VARARGS, "vectorPosition6D_reserve(vectorPosition6D self, std::vector< AL::Math::Position6D >::size_type n)"},
		 { "vectorPosition6D_capacity", _wrap_vectorPosition6D_capacity, METH_O, "vectorPosition6D_capacity(vectorPosition6D self) -> std::vector< AL::Math::Position6D >::size_type"},
		 { "vectorPosition6D___repr__", _wrap_vectorPosition6D___repr__, METH_O, "vectorPosition6D___repr__(vectorPosition6D self) -> std::string"},
		 { "delete_vectorPosition6D", _wrap_delete_vectorPosition6D, METH_O, "delete_vectorPosition6D(vectorPosition6D self)"},
		 { "vectorPosition6D_swigregister", vectorPosition6D_swigregister, METH_O, NULL},
		 { "vectorPosition6D_swiginit", vectorPosition6D_swiginit, METH_VARARGS, NULL},
		 { "new_DigitalFilter", _wrap_new_DigitalFilter, METH_NOARGS, "new_DigitalFilter() -> DigitalFilter"},
		 { "delete_DigitalFilter", _wrap_delete_DigitalFilter, METH_O, "delete_DigitalFilter(DigitalFilter self)"},
		 { "DigitalFilter_configureFilter", _wrap_DigitalFilter_configureFilter, METH_VARARGS, "DigitalFilter_configureFilter(DigitalFilter self, vectorFloat pWeightsIn, vectorFloat pWeightsOut, float pDcGain)"},
		 { "DigitalFilter_resetFilter", _wrap_DigitalFilter_resetFilter, METH_O, "DigitalFilter_resetFilter(DigitalFilter self)"},
		 { "DigitalFilter_processFilter", _wrap_DigitalFilter_processFilter, METH_VARARGS, "DigitalFilter_processFilter(DigitalFilter self, float pInputData) -> float"},
		 { "DigitalFilter_swigregister", DigitalFilter_swigregister, METH_O, NULL},
		 { "DigitalFilter_swiginit", DigitalFilter_swiginit, METH_VARARGS, NULL},
		 { "new_PIDController", _wrap_new_PIDController, METH_VARARGS, "\n"
			"PIDController()\n"
			"new_PIDController(float pKp, float pKv, float pKi, float pThreshold, float pStaticOffset, float pPeriod) -> PIDController\n"
			""},
		 { "delete_PIDController", _wrap_delete_PIDController, METH_O, "delete_PIDController(PIDController self)"},
		 { "PIDController_initialize", _wrap_PIDController_initialize, METH_VARARGS, "\n"
			"PIDController_initialize(PIDController self)\n"
			"PIDController_initialize(PIDController self, float pKp, float pKv, float pKi, float pThreshold, float pStaticOffset, float pPeriod)\n"
			""},
		 { "PIDController_computeFeedback", _wrap_PIDController_computeFeedback, METH_VARARGS, "PIDController_computeFeedback(PIDController self, float pCommand, float pSensor, float pPeriod=-1.0) -> float"},
		 { "PIDController_computeFeedbackAbsolute", _wrap_PIDController_computeFeedbackAbsolute, METH_VARARGS, "PIDController_computeFeedbackAbsolute(PIDController self, float pAbsoluteErr) -> float"},
		 { "PIDController_setGains", _wrap_PIDController_setGains, METH_VARARGS, "PIDController_setGains(PIDController self, float pKp, float pKv, float pKi)"},
		 { "PIDController_swigregister", PIDController_swigregister, METH_O, NULL},
		 { "PIDController_swiginit", PIDController_swiginit, METH_VARARGS, NULL},
		 { "isAxisMask", _wrap_isAxisMask, METH_O, "isAxisMask(int const pAxisMask) -> bool"},
		 { "Pose2D_x_set", _wrap_Pose2D_x_set, METH_VARARGS, "Pose2D_x_set(Pose2D self, float x)"},
		 { "Pose2D_x_get", _wrap_Pose2D_x_get, METH_O, "Pose2D_x_get(Pose2D self) -> float"},
		 { "Pose2D_y_set", _wrap_Pose2D_y_set, METH_VARARGS, "Pose2D_y_set(Pose2D self, float y)"},
		 { "Pose2D_y_get", _wrap_Pose2D_y_get, METH_O, "Pose2D_y_get(Pose2D self) -> float"},
		 { "Pose2D_theta_set", _wrap_Pose2D_theta_set, METH_VARARGS, "Pose2D_theta_set(Pose2D self, float theta)"},
		 { "Pose2D_theta_get", _wrap_Pose2D_theta_get, METH_O, "Pose2D_theta_get(Pose2D self) -> float"},
		 { "new_Pose2D", _wrap_new_Pose2D, METH_VARARGS, "\n"
			"Pose2D()\n"
			"Pose2D(float pInit)\n"
			"Pose2D(float pX, float pY, float pTheta)\n"
			"new_Pose2D(vectorFloat pFloats) -> Pose2D\n"
			""},
		 { "Pose2D_fromPolarCoordinates", _wrap_Pose2D_fromPolarCoordinates, METH_VARARGS, "Pose2D_fromPolarCoordinates(float const pRadius, float const pAngle) -> Pose2D"},
		 { "Pose2D___add__", _wrap_Pose2D___add__, METH_VARARGS, "Pose2D___add__(Pose2D self, Pose2D pPos2) -> Pose2D"},
		 { "Pose2D___sub__", _wrap_Pose2D___sub__, METH_VARARGS, "Pose2D___sub__(Pose2D self, Pose2D pPos2) -> Pose2D"},
		 { "Pose2D___pos__", _wrap_Pose2D___pos__, METH_O, "Pose2D___pos__(Pose2D self) -> Pose2D"},
		 { "Pose2D___neg__", _wrap_Pose2D___neg__, METH_O, "Pose2D___neg__(Pose2D self) -> Pose2D"},
		 { "Pose2D___iadd__", _wrap_Pose2D___iadd__, METH_VARARGS, "Pose2D___iadd__(Pose2D self, Pose2D pPos2) -> Pose2D"},
		 { "Pose2D___isub__", _wrap_Pose2D___isub__, METH_VARARGS, "Pose2D___isub__(Pose2D self, Pose2D pPos2) -> Pose2D"},
		 { "Pose2D___eq__", _wrap_Pose2D___eq__, METH_VARARGS, "Pose2D___eq__(Pose2D self, Pose2D pPos2) -> bool"},
		 { "Pose2D___ne__", _wrap_Pose2D___ne__, METH_VARARGS, "Pose2D___ne__(Pose2D self, Pose2D pPos2) -> bool"},
		 { "Pose2D___mul__", _wrap_Pose2D___mul__, METH_VARARGS, "\n"
			"Pose2D___mul__(Pose2D self, Pose2D pPos2) -> Pose2D\n"
			"Pose2D___mul__(Pose2D self, float pVal) -> Pose2D\n"
			""},
		 { "Pose2D___truediv__", _wrap_Pose2D___truediv__, METH_VARARGS, "Pose2D___truediv__(Pose2D self, float pVal) -> Pose2D"},
		 { "Pose2D___imul__", _wrap_Pose2D___imul__, METH_VARARGS, "\n"
			"Pose2D___imul__(Pose2D self, Pose2D pPos2) -> Pose2D\n"
			"Pose2D___imul__(Pose2D self, float pVal) -> Pose2D\n"
			""},
		 { "Pose2D___itruediv__", _wrap_Pose2D___itruediv__, METH_VARARGS, "Pose2D___itruediv__(Pose2D self, float pVal) -> Pose2D"},
		 { "Pose2D_distanceSquared", _wrap_Pose2D_distanceSquared, METH_VARARGS, "Pose2D_distanceSquared(Pose2D self, Pose2D pPos2) -> float"},
		 { "Pose2D_distance", _wrap_Pose2D_distance, METH_VARARGS, "Pose2D_distance(Pose2D self, Pose2D pPos2) -> float"},
		 { "Pose2D_inverse", _wrap_Pose2D_inverse, METH_O, "Pose2D_inverse(Pose2D self) -> Pose2D"},
		 { "Pose2D_diff", _wrap_Pose2D_diff, METH_VARARGS, "Pose2D_diff(Pose2D self, Pose2D pPos2) -> Pose2D"},
		 { "Pose2D_isNear", _wrap_Pose2D_isNear, METH_VARARGS, "Pose2D_isNear(Pose2D self, Pose2D pPos2, float const & pEpsilon=0.0001) -> bool"},
		 { "Pose2D_toVector", _wrap_Pose2D_toVector, METH_VARARGS, "\n"
			"Pose2D_toVector(Pose2D self, vectorFloat pReturnVector)\n"
			"Pose2D_toVector(Pose2D self) -> vectorFloat\n"
			""},
		 { "Pose2D_writeToVector", _wrap_Pose2D_writeToVector, METH_VARARGS, "Pose2D_writeToVector(Pose2D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Pose2D_norm", _wrap_Pose2D_norm, METH_O, "Pose2D_norm(Pose2D self) -> float"},
		 { "Pose2D_normalize", _wrap_Pose2D_normalize, METH_O, "Pose2D_normalize(Pose2D self) -> Pose2D"},
		 { "Pose2D_getAngle", _wrap_Pose2D_getAngle, METH_O, "Pose2D_getAngle(Pose2D self) -> float"},
		 { "Pose2D___repr__", _wrap_Pose2D___repr__, METH_O, "Pose2D___repr__(Pose2D self) -> char *"},
		 { "Pose2D___rmul__", _wrap_Pose2D___rmul__, METH_VARARGS, "Pose2D___rmul__(Pose2D self, float const lhs) -> Pose2D"},
		 { "delete_Pose2D", _wrap_delete_Pose2D, METH_O, "delete_Pose2D(Pose2D self)"},
		 { "Pose2D_swigregister", Pose2D_swigregister, METH_O, NULL},
		 { "Pose2D_swiginit", Pose2D_swiginit, METH_VARARGS, NULL},
		 { "pose2dInvertInPlace", _wrap_pose2dInvertInPlace, METH_O, "pose2dInvertInPlace(Pose2D pPos)"},
		 { "pose2dDiff", _wrap_pose2dDiff, METH_VARARGS, "pose2dDiff(Pose2D pPos1, Pose2D pPos2) -> Pose2D"},
		 { "pose2DInverse", _wrap_pose2DInverse, METH_VARARGS, "\n"
			"pose2DInverse(Pose2D pPos) -> Pose2D\n"
			"pose2DInverse(Pose2D pPos, Pose2D pRes)\n"
			""},
		 { "Position2D_x_set", _wrap_Position2D_x_set, METH_VARARGS, "Position2D_x_set(Position2D self, float x)"},
		 { "Position2D_x_get", _wrap_Position2D_x_get, METH_O, "Position2D_x_get(Position2D self) -> float"},
		 { "Position2D_y_set", _wrap_Position2D_y_set, METH_VARARGS, "Position2D_y_set(Position2D self, float y)"},
		 { "Position2D_y_get", _wrap_Position2D_y_get, METH_O, "Position2D_y_get(Position2D self) -> float"},
		 { "new_Position2D", _wrap_new_Position2D, METH_VARARGS, "\n"
			"Position2D()\n"
			"Position2D(float pInit)\n"
			"Position2D(float pX, float pY)\n"
			"new_Position2D(vectorFloat pFloats) -> Position2D\n"
			""},
		 { "Position2D_fromPolarCoordinates", _wrap_Position2D_fromPolarCoordinates, METH_VARARGS, "Position2D_fromPolarCoordinates(float const pRadius, float const pAngle) -> Position2D"},
		 { "Position2D___add__", _wrap_Position2D___add__, METH_VARARGS, "Position2D___add__(Position2D self, Position2D pPos2) -> Position2D"},
		 { "Position2D___sub__", _wrap_Position2D___sub__, METH_VARARGS, "Position2D___sub__(Position2D self, Position2D pPos2) -> Position2D"},
		 { "Position2D___pos__", _wrap_Position2D___pos__, METH_O, "Position2D___pos__(Position2D self) -> Position2D"},
		 { "Position2D___neg__", _wrap_Position2D___neg__, METH_O, "Position2D___neg__(Position2D self) -> Position2D"},
		 { "Position2D___iadd__", _wrap_Position2D___iadd__, METH_VARARGS, "Position2D___iadd__(Position2D self, Position2D pPos2) -> Position2D"},
		 { "Position2D___isub__", _wrap_Position2D___isub__, METH_VARARGS, "Position2D___isub__(Position2D self, Position2D pPos2) -> Position2D"},
		 { "Position2D___eq__", _wrap_Position2D___eq__, METH_VARARGS, "Position2D___eq__(Position2D self, Position2D pPos2) -> bool"},
		 { "Position2D___ne__", _wrap_Position2D___ne__, METH_VARARGS, "Position2D___ne__(Position2D self, Position2D pPos2) -> bool"},
		 { "Position2D___mul__", _wrap_Position2D___mul__, METH_VARARGS, "Position2D___mul__(Position2D self, float pVal) -> Position2D"},
		 { "Position2D___truediv__", _wrap_Position2D___truediv__, METH_VARARGS, "Position2D___truediv__(Position2D self, float pVal) -> Position2D"},
		 { "Position2D___imul__", _wrap_Position2D___imul__, METH_VARARGS, "Position2D___imul__(Position2D self, float pVal) -> Position2D"},
		 { "Position2D___itruediv__", _wrap_Position2D___itruediv__, METH_VARARGS, "Position2D___itruediv__(Position2D self, float pVal) -> Position2D"},
		 { "Position2D_distanceSquared", _wrap_Position2D_distanceSquared, METH_VARARGS, "Position2D_distanceSquared(Position2D self, Position2D pPos2) -> float"},
		 { "Position2D_distance", _wrap_Position2D_distance, METH_VARARGS, "Position2D_distance(Position2D self, Position2D pPos2) -> float"},
		 { "Position2D_isNear", _wrap_Position2D_isNear, METH_VARARGS, "Position2D_isNear(Position2D self, Position2D pPos2, float const & pEpsilon=0.0001) -> bool"},
		 { "Position2D_norm", _wrap_Position2D_norm, METH_O, "Position2D_norm(Position2D self) -> float"},
		 { "Position2D_normalize", _wrap_Position2D_normalize, METH_O, "Position2D_normalize(Position2D self) -> Position2D"},
		 { "Position2D_dotProduct", _wrap_Position2D_dotProduct, METH_VARARGS, "Position2D_dotProduct(Position2D self, Position2D pPos2) -> float"},
		 { "Position2D_crossProduct", _wrap_Position2D_crossProduct, METH_VARARGS, "Position2D_crossProduct(Position2D self, Position2D pPos2) -> float"},
		 { "Position2D_toVector", _wrap_Position2D_toVector, METH_VARARGS, "\n"
			"Position2D_toVector(Position2D self, vectorFloat pReturnVector)\n"
			"Position2D_toVector(Position2D self) -> vectorFloat\n"
			""},
		 { "Position2D_writeToVector", _wrap_Position2D_writeToVector, METH_VARARGS, "Position2D_writeToVector(Position2D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Position2D_getAngle", _wrap_Position2D_getAngle, METH_O, "Position2D_getAngle(Position2D self) -> float"},
		 { "Position2D___repr__", _wrap_Position2D___repr__, METH_O, "Position2D___repr__(Position2D self) -> char *"},
		 { "Position2D___rmul__", _wrap_Position2D___rmul__, METH_VARARGS, "Position2D___rmul__(Position2D self, float const lhs) -> Position2D"},
		 { "delete_Position2D", _wrap_delete_Position2D, METH_O, "delete_Position2D(Position2D self)"},
		 { "Position2D_swigregister", Position2D_swigregister, METH_O, NULL},
		 { "Position2D_swiginit", Position2D_swiginit, METH_VARARGS, NULL},
		 { "Position3D_x_set", _wrap_Position3D_x_set, METH_VARARGS, "Position3D_x_set(Position3D self, float x)"},
		 { "Position3D_x_get", _wrap_Position3D_x_get, METH_O, "Position3D_x_get(Position3D self) -> float"},
		 { "Position3D_y_set", _wrap_Position3D_y_set, METH_VARARGS, "Position3D_y_set(Position3D self, float y)"},
		 { "Position3D_y_get", _wrap_Position3D_y_get, METH_O, "Position3D_y_get(Position3D self) -> float"},
		 { "Position3D_z_set", _wrap_Position3D_z_set, METH_VARARGS, "Position3D_z_set(Position3D self, float z)"},
		 { "Position3D_z_get", _wrap_Position3D_z_get, METH_O, "Position3D_z_get(Position3D self) -> float"},
		 { "new_Position3D", _wrap_new_Position3D, METH_VARARGS, "\n"
			"Position3D()\n"
			"Position3D(float pInit)\n"
			"Position3D(float pX, float pY, float pZ)\n"
			"new_Position3D(vectorFloat pFloats) -> Position3D\n"
			""},
		 { "Position3D___add__", _wrap_Position3D___add__, METH_VARARGS, "Position3D___add__(Position3D self, Position3D pPos2) -> Position3D"},
		 { "Position3D___sub__", _wrap_Position3D___sub__, METH_VARARGS, "Position3D___sub__(Position3D self, Position3D pPos2) -> Position3D"},
		 { "Position3D___pos__", _wrap_Position3D___pos__, METH_O, "Position3D___pos__(Position3D self) -> Position3D"},
		 { "Position3D___neg__", _wrap_Position3D___neg__, METH_O, "Position3D___neg__(Position3D self) -> Position3D"},
		 { "Position3D___iadd__", _wrap_Position3D___iadd__, METH_VARARGS, "Position3D___iadd__(Position3D self, Position3D pPos2) -> Position3D"},
		 { "Position3D___isub__", _wrap_Position3D___isub__, METH_VARARGS, "Position3D___isub__(Position3D self, Position3D pPos2) -> Position3D"},
		 { "Position3D___eq__", _wrap_Position3D___eq__, METH_VARARGS, "Position3D___eq__(Position3D self, Position3D pPos2) -> bool"},
		 { "Position3D___ne__", _wrap_Position3D___ne__, METH_VARARGS, "Position3D___ne__(Position3D self, Position3D pPos2) -> bool"},
		 { "Position3D___mul__", _wrap_Position3D___mul__, METH_VARARGS, "Position3D___mul__(Position3D self, float pVal) -> Position3D"},
		 { "Position3D___truediv__", _wrap_Position3D___truediv__, METH_VARARGS, "Position3D___truediv__(Position3D self, float pVal) -> Position3D"},
		 { "Position3D___imul__", _wrap_Position3D___imul__, METH_VARARGS, "Position3D___imul__(Position3D self, float pVal) -> Position3D"},
		 { "Position3D___itruediv__", _wrap_Position3D___itruediv__, METH_VARARGS, "Position3D___itruediv__(Position3D self, float pVal) -> Position3D"},
		 { "Position3D_distanceSquared", _wrap_Position3D_distanceSquared, METH_VARARGS, "Position3D_distanceSquared(Position3D self, Position3D pPos2) -> float"},
		 { "Position3D_distance", _wrap_Position3D_distance, METH_VARARGS, "Position3D_distance(Position3D self, Position3D pPos2) -> float"},
		 { "Position3D_isNear", _wrap_Position3D_isNear, METH_VARARGS, "Position3D_isNear(Position3D self, Position3D pPos2, float const & pEpsilon=0.0001) -> bool"},
		 { "Position3D_norm", _wrap_Position3D_norm, METH_O, "Position3D_norm(Position3D self) -> float"},
		 { "Position3D_normalize", _wrap_Position3D_normalize, METH_O, "Position3D_normalize(Position3D self) -> Position3D"},
		 { "Position3D_dotProduct", _wrap_Position3D_dotProduct, METH_VARARGS, "Position3D_dotProduct(Position3D self, Position3D pPos2) -> float"},
		 { "Position3D_crossProduct", _wrap_Position3D_crossProduct, METH_VARARGS, "Position3D_crossProduct(Position3D self, Position3D pPos2) -> Position3D"},
		 { "Position3D_toVector", _wrap_Position3D_toVector, METH_VARARGS, "\n"
			"Position3D_toVector(Position3D self, vectorFloat pReturnVector)\n"
			"Position3D_toVector(Position3D self) -> vectorFloat\n"
			""},
		 { "Position3D_writeToVector", _wrap_Position3D_writeToVector, METH_VARARGS, "Position3D_writeToVector(Position3D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Position3D_isUnitVector", _wrap_Position3D_isUnitVector, METH_VARARGS, "Position3D_isUnitVector(Position3D self, float const & pEpsilon=0.0001) -> bool"},
		 { "Position3D_isOrthogonal", _wrap_Position3D_isOrthogonal, METH_VARARGS, "Position3D_isOrthogonal(Position3D self, Position3D pPos, float const & pEpsilon=0.0001) -> bool"},
		 { "Position3D___repr__", _wrap_Position3D___repr__, METH_O, "Position3D___repr__(Position3D self) -> char *"},
		 { "Position3D___rmul__", _wrap_Position3D___rmul__, METH_VARARGS, "Position3D___rmul__(Position3D self, float const lhs) -> Position3D"},
		 { "delete_Position3D", _wrap_delete_Position3D, METH_O, "delete_Position3D(Position3D self)"},
		 { "Position3D_swigregister", Position3D_swigregister, METH_O, NULL},
		 { "Position3D_swiginit", Position3D_swiginit, METH_VARARGS, NULL},
		 { "dotProduct", _wrap_dotProduct, METH_VARARGS, "\n"
			"dotProduct(Position2D pPos1, Position2D pPos2) -> float\n"
			"dotProduct(Position3D pPos1, Position3D pPos2) -> float\n"
			""},
		 { "crossProduct", _wrap_crossProduct, METH_VARARGS, "\n"
			"crossProduct(Position2D pPos1, Position2D pPos2) -> float\n"
			"crossProduct(Position2D pPos1, Position2D pPos2, float & pRes)\n"
			"crossProduct(Position3D pPos1, Position3D pPos2) -> Position3D\n"
			"crossProduct(Position3D pPos1, Position3D pPos2, Position3D pRes)\n"
			""},
		 { "isUnitVector", _wrap_isUnitVector, METH_VARARGS, "isUnitVector(Position3D pPos, float const & pEpsilon=0.0001) -> bool"},
		 { "isOrthogonal", _wrap_isOrthogonal, METH_VARARGS, "isOrthogonal(Position3D pPos1, Position3D pPos2, float const & pEpsilon=0.0001) -> bool"},
		 { "Position6D_x_set", _wrap_Position6D_x_set, METH_VARARGS, "Position6D_x_set(Position6D self, float x)"},
		 { "Position6D_x_get", _wrap_Position6D_x_get, METH_O, "Position6D_x_get(Position6D self) -> float"},
		 { "Position6D_y_set", _wrap_Position6D_y_set, METH_VARARGS, "Position6D_y_set(Position6D self, float y)"},
		 { "Position6D_y_get", _wrap_Position6D_y_get, METH_O, "Position6D_y_get(Position6D self) -> float"},
		 { "Position6D_z_set", _wrap_Position6D_z_set, METH_VARARGS, "Position6D_z_set(Position6D self, float z)"},
		 { "Position6D_z_get", _wrap_Position6D_z_get, METH_O, "Position6D_z_get(Position6D self) -> float"},
		 { "Position6D_wx_set", _wrap_Position6D_wx_set, METH_VARARGS, "Position6D_wx_set(Position6D self, float wx)"},
		 { "Position6D_wx_get", _wrap_Position6D_wx_get, METH_O, "Position6D_wx_get(Position6D self) -> float"},
		 { "Position6D_wy_set", _wrap_Position6D_wy_set, METH_VARARGS, "Position6D_wy_set(Position6D self, float wy)"},
		 { "Position6D_wy_get", _wrap_Position6D_wy_get, METH_O, "Position6D_wy_get(Position6D self) -> float"},
		 { "Position6D_wz_set", _wrap_Position6D_wz_set, METH_VARARGS, "Position6D_wz_set(Position6D self, float wz)"},
		 { "Position6D_wz_get", _wrap_Position6D_wz_get, METH_O, "Position6D_wz_get(Position6D self) -> float"},
		 { "new_Position6D", _wrap_new_Position6D, METH_VARARGS, "\n"
			"Position6D()\n"
			"Position6D(float pInit)\n"
			"Position6D(float pX, float pY, float pZ, float pWx, float pWy, float pWz)\n"
			"new_Position6D(vectorFloat pFloats) -> Position6D\n"
			""},
		 { "Position6D___add__", _wrap_Position6D___add__, METH_VARARGS, "Position6D___add__(Position6D self, Position6D pPos2) -> Position6D"},
		 { "Position6D___sub__", _wrap_Position6D___sub__, METH_VARARGS, "Position6D___sub__(Position6D self, Position6D pPos2) -> Position6D"},
		 { "Position6D___pos__", _wrap_Position6D___pos__, METH_O, "Position6D___pos__(Position6D self) -> Position6D"},
		 { "Position6D___neg__", _wrap_Position6D___neg__, METH_O, "Position6D___neg__(Position6D self) -> Position6D"},
		 { "Position6D___iadd__", _wrap_Position6D___iadd__, METH_VARARGS, "Position6D___iadd__(Position6D self, Position6D pPos2) -> Position6D"},
		 { "Position6D___isub__", _wrap_Position6D___isub__, METH_VARARGS, "Position6D___isub__(Position6D self, Position6D pPos2) -> Position6D"},
		 { "Position6D___eq__", _wrap_Position6D___eq__, METH_VARARGS, "Position6D___eq__(Position6D self, Position6D pPos2) -> bool"},
		 { "Position6D___ne__", _wrap_Position6D___ne__, METH_VARARGS, "Position6D___ne__(Position6D self, Position6D pPos2) -> bool"},
		 { "Position6D___mul__", _wrap_Position6D___mul__, METH_VARARGS, "Position6D___mul__(Position6D self, float pVal) -> Position6D"},
		 { "Position6D___truediv__", _wrap_Position6D___truediv__, METH_VARARGS, "Position6D___truediv__(Position6D self, float pVal) -> Position6D"},
		 { "Position6D___imul__", _wrap_Position6D___imul__, METH_VARARGS, "Position6D___imul__(Position6D self, float pVal) -> Position6D"},
		 { "Position6D___itruediv__", _wrap_Position6D___itruediv__, METH_VARARGS, "Position6D___itruediv__(Position6D self, float pVal) -> Position6D"},
		 { "Position6D_isNear", _wrap_Position6D_isNear, METH_VARARGS, "Position6D_isNear(Position6D self, Position6D pPos2, float const & pEpsilon=0.0001) -> bool"},
		 { "Position6D_distanceSquared", _wrap_Position6D_distanceSquared, METH_VARARGS, "Position6D_distanceSquared(Position6D self, Position6D pPos2) -> float"},
		 { "Position6D_distance", _wrap_Position6D_distance, METH_VARARGS, "Position6D_distance(Position6D self, Position6D pPos2) -> float"},
		 { "Position6D_norm", _wrap_Position6D_norm, METH_O, "Position6D_norm(Position6D self) -> float"},
		 { "Position6D_toVector", _wrap_Position6D_toVector, METH_VARARGS, "\n"
			"Position6D_toVector(Position6D self, vectorFloat pReturnVector)\n"
			"Position6D_toVector(Position6D self) -> vectorFloat\n"
			""},
		 { "Position6D_writeToVector", _wrap_Position6D_writeToVector, METH_VARARGS, "Position6D_writeToVector(Position6D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Position6D___repr__", _wrap_Position6D___repr__, METH_O, "Position6D___repr__(Position6D self) -> char *"},
		 { "Position6D___rmul__", _wrap_Position6D___rmul__, METH_VARARGS, "Position6D___rmul__(Position6D self, float const lhs) -> Position6D"},
		 { "delete_Position6D", _wrap_delete_Position6D, METH_O, "delete_Position6D(Position6D self)"},
		 { "Position6D_swigregister", Position6D_swigregister, METH_O, NULL},
		 { "Position6D_swiginit", Position6D_swiginit, METH_VARARGS, NULL},
		 { "distanceSquared", _wrap_distanceSquared, METH_VARARGS, "\n"
			"distanceSquared(Pose2D pPos1, Pose2D pPos2) -> float\n"
			"distanceSquared(Position2D pPos1, Position2D pPos2) -> float\n"
			"distanceSquared(Position3D pPos1, Position3D pPos2) -> float\n"
			"distanceSquared(Position6D pPos1, Position6D pPos2) -> float\n"
			""},
		 { "distance", _wrap_distance, METH_VARARGS, "\n"
			"distance(Pose2D pPos1, Pose2D pPos2) -> float\n"
			"distance(Position2D pPos1, Position2D pPos2) -> float\n"
			"distance(Position3D pPos1, Position3D pPos2) -> float\n"
			"distance(Position6D pPos1, Position6D pPos2) -> float\n"
			""},
		 { "PositionAndVelocity_q_set", _wrap_PositionAndVelocity_q_set, METH_VARARGS, "PositionAndVelocity_q_set(PositionAndVelocity self, float q)"},
		 { "PositionAndVelocity_q_get", _wrap_PositionAndVelocity_q_get, METH_O, "PositionAndVelocity_q_get(PositionAndVelocity self) -> float"},
		 { "PositionAndVelocity_dq_set", _wrap_PositionAndVelocity_dq_set, METH_VARARGS, "PositionAndVelocity_dq_set(PositionAndVelocity self, float dq)"},
		 { "PositionAndVelocity_dq_get", _wrap_PositionAndVelocity_dq_get, METH_O, "PositionAndVelocity_dq_get(PositionAndVelocity self) -> float"},
		 { "new_PositionAndVelocity", _wrap_new_PositionAndVelocity, METH_VARARGS, "PositionAndVelocity(float const pq=0.0, float const pdq=0.0)"},
		 { "PositionAndVelocity_isNear", _wrap_PositionAndVelocity_isNear, METH_VARARGS, "PositionAndVelocity_isNear(PositionAndVelocity self, PositionAndVelocity pDat2, float const & pEpsilon=0.0001) -> bool"},
		 { "PositionAndVelocity_toVector", _wrap_PositionAndVelocity_toVector, METH_VARARGS, "\n"
			"PositionAndVelocity_toVector(PositionAndVelocity self, vectorFloat pReturnVector)\n"
			"PositionAndVelocity_toVector(PositionAndVelocity self) -> vectorFloat\n"
			""},
		 { "PositionAndVelocity___repr__", _wrap_PositionAndVelocity___repr__, METH_O, "PositionAndVelocity___repr__(PositionAndVelocity self) -> char *"},
		 { "delete_PositionAndVelocity", _wrap_delete_PositionAndVelocity, METH_O, "delete_PositionAndVelocity(PositionAndVelocity self)"},
		 { "PositionAndVelocity_swigregister", PositionAndVelocity_swigregister, METH_O, NULL},
		 { "PositionAndVelocity_swiginit", PositionAndVelocity_swiginit, METH_VARARGS, NULL},
		 { "Quaternion_w_set", _wrap_Quaternion_w_set, METH_VARARGS, "Quaternion_w_set(Quaternion self, float w)"},
		 { "Quaternion_w_get", _wrap_Quaternion_w_get, METH_O, "Quaternion_w_get(Quaternion self) -> float"},
		 { "Quaternion_x_set", _wrap_Quaternion_x_set, METH_VARARGS, "Quaternion_x_set(Quaternion self, float x)"},
		 { "Quaternion_x_get", _wrap_Quaternion_x_get, METH_O, "Quaternion_x_get(Quaternion self) -> float"},
		 { "Quaternion_y_set", _wrap_Quaternion_y_set, METH_VARARGS, "Quaternion_y_set(Quaternion self, float y)"},
		 { "Quaternion_y_get", _wrap_Quaternion_y_get, METH_O, "Quaternion_y_get(Quaternion self) -> float"},
		 { "Quaternion_z_set", _wrap_Quaternion_z_set, METH_VARARGS, "Quaternion_z_set(Quaternion self, float z)"},
		 { "Quaternion_z_get", _wrap_Quaternion_z_get, METH_O, "Quaternion_z_get(Quaternion self) -> float"},
		 { "new_Quaternion", _wrap_new_Quaternion, METH_VARARGS, "\n"
			"Quaternion()\n"
			"Quaternion(float pW, float pX, float pY, float pZ)\n"
			"new_Quaternion(vectorFloat pFloats) -> Quaternion\n"
			""},
		 { "Quaternion___eq__", _wrap_Quaternion___eq__, METH_VARARGS, "Quaternion___eq__(Quaternion self, Quaternion pQua2) -> bool"},
		 { "Quaternion___ne__", _wrap_Quaternion___ne__, METH_VARARGS, "Quaternion___ne__(Quaternion self, Quaternion pQua2) -> bool"},
		 { "Quaternion___mul__", _wrap_Quaternion___mul__, METH_VARARGS, "\n"
			"Quaternion___mul__(Quaternion self, Quaternion pQua2) -> Quaternion\n"
			"Quaternion___mul__(Quaternion self, float pVal) -> Quaternion\n"
			""},
		 { "Quaternion___truediv__", _wrap_Quaternion___truediv__, METH_VARARGS, "Quaternion___truediv__(Quaternion self, float pVal) -> Quaternion"},
		 { "Quaternion___imul__", _wrap_Quaternion___imul__, METH_VARARGS, "\n"
			"Quaternion___imul__(Quaternion self, Quaternion pQua2) -> Quaternion\n"
			"Quaternion___imul__(Quaternion self, float pVal) -> Quaternion\n"
			""},
		 { "Quaternion___itruediv__", _wrap_Quaternion___itruediv__, METH_VARARGS, "Quaternion___itruediv__(Quaternion self, float pVal) -> Quaternion"},
		 { "Quaternion_isNear", _wrap_Quaternion_isNear, METH_VARARGS, "Quaternion_isNear(Quaternion self, Quaternion pQua2, float const & pEpsilon=0.0001) -> bool"},
		 { "Quaternion_norm", _wrap_Quaternion_norm, METH_O, "Quaternion_norm(Quaternion self) -> float"},
		 { "Quaternion_normalize", _wrap_Quaternion_normalize, METH_O, "Quaternion_normalize(Quaternion self) -> Quaternion"},
		 { "Quaternion_inverse", _wrap_Quaternion_inverse, METH_O, "Quaternion_inverse(Quaternion self) -> Quaternion"},
		 { "Quaternion_fromAngleAndAxisRotation", _wrap_Quaternion_fromAngleAndAxisRotation, METH_VARARGS, "Quaternion_fromAngleAndAxisRotation(float const pAngle, float const pAxisX, float const pAxisY, float const pAxisZ) -> Quaternion"},
		 { "Quaternion_toVector", _wrap_Quaternion_toVector, METH_VARARGS, "\n"
			"Quaternion_toVector(Quaternion self, vectorFloat pReturnVector)\n"
			"Quaternion_toVector(Quaternion self) -> vectorFloat\n"
			""},
		 { "Quaternion___repr__", _wrap_Quaternion___repr__, METH_O, "Quaternion___repr__(Quaternion self) -> char *"},
		 { "delete_Quaternion", _wrap_delete_Quaternion, METH_O, "delete_Quaternion(Quaternion self)"},
		 { "Quaternion_swigregister", Quaternion_swigregister, METH_O, NULL},
		 { "Quaternion_swiginit", Quaternion_swiginit, METH_VARARGS, NULL},
		 { "quaternionInverse", _wrap_quaternionInverse, METH_VARARGS, "\n"
			"quaternionInverse(Quaternion pQua, Quaternion pQuaOut)\n"
			"quaternionInverse(Quaternion pQua) -> Quaternion\n"
			""},
		 { "quaternionFromAngleAndAxisRotation", _wrap_quaternionFromAngleAndAxisRotation, METH_VARARGS, "quaternionFromAngleAndAxisRotation(float const pAngle, float const pAxisX, float const pAxisY, float const pAxisZ) -> Quaternion"},
		 { "angleAndAxisRotationFromQuaternion", _wrap_angleAndAxisRotationFromQuaternion, METH_VARARGS, "\n"
			"angleAndAxisRotationFromQuaternion(Quaternion pQuaternion, float & pAngle, float & pAxisX, float & pAxisY, float & pAxisZ)\n"
			"angleAndAxisRotationFromQuaternion(Quaternion pQuaternion) -> vectorFloat\n"
			""},
		 { "Displacement_P_set", _wrap_Displacement_P_set, METH_VARARGS, "Displacement_P_set(Displacement self, Position3D P)"},
		 { "Displacement_P_get", _wrap_Displacement_P_get, METH_O, "Displacement_P_get(Displacement self) -> Position3D"},
		 { "Displacement_Q_set", _wrap_Displacement_Q_set, METH_VARARGS, "Displacement_Q_set(Displacement self, Quaternion Q)"},
		 { "Displacement_Q_get", _wrap_Displacement_Q_get, METH_O, "Displacement_Q_get(Displacement self) -> Quaternion"},
		 { "new_Displacement", _wrap_new_Displacement, METH_VARARGS, "\n"
			"Displacement()\n"
			"Displacement(Position3D pos3d, Quaternion quat=AL::Math::Quaternion())\n"
			""},
		 { "Displacement___imul__", _wrap_Displacement___imul__, METH_VARARGS, "Displacement___imul__(Displacement self, Displacement pDisp) -> Displacement"},
		 { "Displacement___mul__", _wrap_Displacement___mul__, METH_VARARGS, "Displacement___mul__(Displacement self, Displacement pDisp) -> Displacement"},
		 { "Displacement_isNear", _wrap_Displacement_isNear, METH_VARARGS, "Displacement_isNear(Displacement self, Displacement pDisp2, float const pEpsilon=0.0001) -> bool"},
		 { "Displacement___repr__", _wrap_Displacement___repr__, METH_O, "Displacement___repr__(Displacement self) -> char *"},
		 { "delete_Displacement", _wrap_delete_Displacement, METH_O, "delete_Displacement(Displacement self)"},
		 { "Displacement_swigregister", Displacement_swigregister, METH_O, NULL},
		 { "Displacement_swiginit", Displacement_swiginit, METH_VARARGS, NULL},
		 { "Rotation_r1_c1_set", _wrap_Rotation_r1_c1_set, METH_VARARGS, "Rotation_r1_c1_set(Rotation self, float r1_c1)"},
		 { "Rotation_r1_c1_get", _wrap_Rotation_r1_c1_get, METH_O, "Rotation_r1_c1_get(Rotation self) -> float"},
		 { "Rotation_r1_c2_set", _wrap_Rotation_r1_c2_set, METH_VARARGS, "Rotation_r1_c2_set(Rotation self, float r1_c2)"},
		 { "Rotation_r1_c2_get", _wrap_Rotation_r1_c2_get, METH_O, "Rotation_r1_c2_get(Rotation self) -> float"},
		 { "Rotation_r1_c3_set", _wrap_Rotation_r1_c3_set, METH_VARARGS, "Rotation_r1_c3_set(Rotation self, float r1_c3)"},
		 { "Rotation_r1_c3_get", _wrap_Rotation_r1_c3_get, METH_O, "Rotation_r1_c3_get(Rotation self) -> float"},
		 { "Rotation_r2_c1_set", _wrap_Rotation_r2_c1_set, METH_VARARGS, "Rotation_r2_c1_set(Rotation self, float r2_c1)"},
		 { "Rotation_r2_c1_get", _wrap_Rotation_r2_c1_get, METH_O, "Rotation_r2_c1_get(Rotation self) -> float"},
		 { "Rotation_r2_c2_set", _wrap_Rotation_r2_c2_set, METH_VARARGS, "Rotation_r2_c2_set(Rotation self, float r2_c2)"},
		 { "Rotation_r2_c2_get", _wrap_Rotation_r2_c2_get, METH_O, "Rotation_r2_c2_get(Rotation self) -> float"},
		 { "Rotation_r2_c3_set", _wrap_Rotation_r2_c3_set, METH_VARARGS, "Rotation_r2_c3_set(Rotation self, float r2_c3)"},
		 { "Rotation_r2_c3_get", _wrap_Rotation_r2_c3_get, METH_O, "Rotation_r2_c3_get(Rotation self) -> float"},
		 { "Rotation_r3_c1_set", _wrap_Rotation_r3_c1_set, METH_VARARGS, "Rotation_r3_c1_set(Rotation self, float r3_c1)"},
		 { "Rotation_r3_c1_get", _wrap_Rotation_r3_c1_get, METH_O, "Rotation_r3_c1_get(Rotation self) -> float"},
		 { "Rotation_r3_c2_set", _wrap_Rotation_r3_c2_set, METH_VARARGS, "Rotation_r3_c2_set(Rotation self, float r3_c2)"},
		 { "Rotation_r3_c2_get", _wrap_Rotation_r3_c2_get, METH_O, "Rotation_r3_c2_get(Rotation self) -> float"},
		 { "Rotation_r3_c3_set", _wrap_Rotation_r3_c3_set, METH_VARARGS, "Rotation_r3_c3_set(Rotation self, float r3_c3)"},
		 { "Rotation_r3_c3_get", _wrap_Rotation_r3_c3_get, METH_O, "Rotation_r3_c3_get(Rotation self) -> float"},
		 { "new_Rotation", _wrap_new_Rotation, METH_VARARGS, "\n"
			"Rotation()\n"
			"new_Rotation(vectorFloat pFloats) -> Rotation\n"
			""},
		 { "Rotation___imul__", _wrap_Rotation___imul__, METH_VARARGS, "Rotation___imul__(Rotation self, Rotation pRot2) -> Rotation"},
		 { "Rotation___eq__", _wrap_Rotation___eq__, METH_VARARGS, "Rotation___eq__(Rotation self, Rotation pRot2) -> bool"},
		 { "Rotation___ne__", _wrap_Rotation___ne__, METH_VARARGS, "Rotation___ne__(Rotation self, Rotation pRot2) -> bool"},
		 { "Rotation_isNear", _wrap_Rotation_isNear, METH_VARARGS, "Rotation_isNear(Rotation self, Rotation pRot2, float const & pEpsilon=0.0001) -> bool"},
		 { "Rotation_normalizeRotation", _wrap_Rotation_normalizeRotation, METH_O, "Rotation_normalizeRotation(Rotation self)"},
		 { "Rotation_isRotation", _wrap_Rotation_isRotation, METH_VARARGS, "Rotation_isRotation(Rotation self, float const & pEpsilon=0.0001) -> bool"},
		 { "Rotation_transpose", _wrap_Rotation_transpose, METH_O, "Rotation_transpose(Rotation self) -> Rotation"},
		 { "Rotation_determinant", _wrap_Rotation_determinant, METH_O, "Rotation_determinant(Rotation self) -> float"},
		 { "Rotation_fromQuaternion", _wrap_Rotation_fromQuaternion, METH_VARARGS, "Rotation_fromQuaternion(float const pA, float const pB, float const pC, float const pD) -> Rotation"},
		 { "Rotation_fromAngleDirection", _wrap_Rotation_fromAngleDirection, METH_VARARGS, "Rotation_fromAngleDirection(float const pAngle, float const pX, float const pY, float const pZ) -> Rotation"},
		 { "Rotation_fromRotX", _wrap_Rotation_fromRotX, METH_O, "Rotation_fromRotX(float const pRotX) -> Rotation"},
		 { "Rotation_fromRotXPi", _wrap_Rotation_fromRotXPi, METH_NOARGS, "Rotation_fromRotXPi() -> Rotation"},
		 { "Rotation_fromRotY", _wrap_Rotation_fromRotY, METH_O, "Rotation_fromRotY(float const pRotY) -> Rotation"},
		 { "Rotation_fromRotYPi", _wrap_Rotation_fromRotYPi, METH_NOARGS, "Rotation_fromRotYPi() -> Rotation"},
		 { "Rotation_fromRotZ", _wrap_Rotation_fromRotZ, METH_O, "Rotation_fromRotZ(float const pRotZ) -> Rotation"},
		 { "Rotation_fromRotZPi", _wrap_Rotation_fromRotZPi, METH_NOARGS, "Rotation_fromRotZPi() -> Rotation"},
		 { "Rotation_fromRotZHalfPi", _wrap_Rotation_fromRotZHalfPi, METH_NOARGS, "Rotation_fromRotZHalfPi() -> Rotation"},
		 { "Rotation_from3DRotation", _wrap_Rotation_from3DRotation, METH_VARARGS, "Rotation_from3DRotation(float const & pWX, float const & pWY, float const & pWZ) -> Rotation"},
		 { "Rotation_toVector", _wrap_Rotation_toVector, METH_VARARGS, "\n"
			"Rotation_toVector(Rotation self, vectorFloat pReturnValue)\n"
			"Rotation_toVector(Rotation self) -> vectorFloat\n"
			""},
		 { "Rotation___str__", _wrap_Rotation___str__, METH_O, "Rotation___str__(Rotation self) -> char *"},
		 { "Rotation___repr__", _wrap_Rotation___repr__, METH_O, "Rotation___repr__(Rotation self) -> char *"},
		 { "Rotation___mul__", _wrap_Rotation___mul__, METH_VARARGS, "\n"
			"Rotation___mul__(Rotation self, Rotation pRot2) -> Rotation\n"
			"Rotation___mul__(Rotation self, Position3D rhs) -> Position3D\n"
			""},
		 { "delete_Rotation", _wrap_delete_Rotation, METH_O, "delete_Rotation(Rotation self)"},
		 { "Rotation_swigregister", Rotation_swigregister, METH_O, NULL},
		 { "Rotation_swiginit", Rotation_swiginit, METH_VARARGS, NULL},
		 { "transpose", _wrap_transpose, METH_O, "transpose(Rotation pRot) -> Rotation"},
		 { "normalizeRotation", _wrap_normalizeRotation, METH_O, "normalizeRotation(Rotation pRot)"},
		 { "applyRotation", _wrap_applyRotation, METH_VARARGS, "applyRotation(Rotation pRot, float & pX, float & pY, float & pZ)"},
		 { "rotationFromRotX", _wrap_rotationFromRotX, METH_O, "rotationFromRotX(float const pRotX) -> Rotation"},
		 { "rotationFromRotY", _wrap_rotationFromRotY, METH_O, "rotationFromRotY(float const pRotY) -> Rotation"},
		 { "rotationFromRotZ", _wrap_rotationFromRotZ, METH_O, "rotationFromRotZ(float const pRotZ) -> Rotation"},
		 { "rotationFrom3DRotation", _wrap_rotationFrom3DRotation, METH_VARARGS, "rotationFrom3DRotation(float const & pWX, float const & pWY, float const & pWZ) -> Rotation"},
		 { "Rotation3D_wx_set", _wrap_Rotation3D_wx_set, METH_VARARGS, "Rotation3D_wx_set(Rotation3D self, float wx)"},
		 { "Rotation3D_wx_get", _wrap_Rotation3D_wx_get, METH_O, "Rotation3D_wx_get(Rotation3D self) -> float"},
		 { "Rotation3D_wy_set", _wrap_Rotation3D_wy_set, METH_VARARGS, "Rotation3D_wy_set(Rotation3D self, float wy)"},
		 { "Rotation3D_wy_get", _wrap_Rotation3D_wy_get, METH_O, "Rotation3D_wy_get(Rotation3D self) -> float"},
		 { "Rotation3D_wz_set", _wrap_Rotation3D_wz_set, METH_VARARGS, "Rotation3D_wz_set(Rotation3D self, float wz)"},
		 { "Rotation3D_wz_get", _wrap_Rotation3D_wz_get, METH_O, "Rotation3D_wz_get(Rotation3D self) -> float"},
		 { "new_Rotation3D", _wrap_new_Rotation3D, METH_VARARGS, "\n"
			"Rotation3D()\n"
			"Rotation3D(float pInit)\n"
			"Rotation3D(float pWx, float pWy, float pWz)\n"
			"new_Rotation3D(vectorFloat pFloats) -> Rotation3D\n"
			""},
		 { "Rotation3D___add__", _wrap_Rotation3D___add__, METH_VARARGS, "Rotation3D___add__(Rotation3D self, Rotation3D pRot2) -> Rotation3D"},
		 { "Rotation3D___sub__", _wrap_Rotation3D___sub__, METH_VARARGS, "Rotation3D___sub__(Rotation3D self, Rotation3D pRot2) -> Rotation3D"},
		 { "Rotation3D___iadd__", _wrap_Rotation3D___iadd__, METH_VARARGS, "Rotation3D___iadd__(Rotation3D self, Rotation3D pRot2) -> Rotation3D"},
		 { "Rotation3D___isub__", _wrap_Rotation3D___isub__, METH_VARARGS, "Rotation3D___isub__(Rotation3D self, Rotation3D pRot2) -> Rotation3D"},
		 { "Rotation3D___eq__", _wrap_Rotation3D___eq__, METH_VARARGS, "Rotation3D___eq__(Rotation3D self, Rotation3D pRot2) -> bool"},
		 { "Rotation3D___ne__", _wrap_Rotation3D___ne__, METH_VARARGS, "Rotation3D___ne__(Rotation3D self, Rotation3D pRot2) -> bool"},
		 { "Rotation3D___mul__", _wrap_Rotation3D___mul__, METH_VARARGS, "Rotation3D___mul__(Rotation3D self, float const pVal) -> Rotation3D"},
		 { "Rotation3D___truediv__", _wrap_Rotation3D___truediv__, METH_VARARGS, "Rotation3D___truediv__(Rotation3D self, float const pVal) -> Rotation3D"},
		 { "Rotation3D___imul__", _wrap_Rotation3D___imul__, METH_VARARGS, "Rotation3D___imul__(Rotation3D self, float const pVal) -> Rotation3D"},
		 { "Rotation3D___itruediv__", _wrap_Rotation3D___itruediv__, METH_VARARGS, "Rotation3D___itruediv__(Rotation3D self, float const pVal) -> Rotation3D"},
		 { "Rotation3D_isNear", _wrap_Rotation3D_isNear, METH_VARARGS, "Rotation3D_isNear(Rotation3D self, Rotation3D pRot2, float const & pEpsilon=0.0001) -> bool"},
		 { "Rotation3D_norm", _wrap_Rotation3D_norm, METH_O, "Rotation3D_norm(Rotation3D self) -> float"},
		 { "Rotation3D_toVector", _wrap_Rotation3D_toVector, METH_VARARGS, "\n"
			"Rotation3D_toVector(Rotation3D self, vectorFloat pReturnVector)\n"
			"Rotation3D_toVector(Rotation3D self) -> vectorFloat\n"
			""},
		 { "Rotation3D___repr__", _wrap_Rotation3D___repr__, METH_O, "Rotation3D___repr__(Rotation3D self) -> char *"},
		 { "delete_Rotation3D", _wrap_delete_Rotation3D, METH_O, "delete_Rotation3D(Rotation3D self)"},
		 { "Rotation3D_swigregister", Rotation3D_swigregister, METH_O, NULL},
		 { "Rotation3D_swiginit", Rotation3D_swiginit, METH_VARARGS, NULL},
		 { "Transform_r1_c1_set", _wrap_Transform_r1_c1_set, METH_VARARGS, "Transform_r1_c1_set(Transform self, float r1_c1)"},
		 { "Transform_r1_c1_get", _wrap_Transform_r1_c1_get, METH_O, "Transform_r1_c1_get(Transform self) -> float"},
		 { "Transform_r1_c2_set", _wrap_Transform_r1_c2_set, METH_VARARGS, "Transform_r1_c2_set(Transform self, float r1_c2)"},
		 { "Transform_r1_c2_get", _wrap_Transform_r1_c2_get, METH_O, "Transform_r1_c2_get(Transform self) -> float"},
		 { "Transform_r1_c3_set", _wrap_Transform_r1_c3_set, METH_VARARGS, "Transform_r1_c3_set(Transform self, float r1_c3)"},
		 { "Transform_r1_c3_get", _wrap_Transform_r1_c3_get, METH_O, "Transform_r1_c3_get(Transform self) -> float"},
		 { "Transform_r1_c4_set", _wrap_Transform_r1_c4_set, METH_VARARGS, "Transform_r1_c4_set(Transform self, float r1_c4)"},
		 { "Transform_r1_c4_get", _wrap_Transform_r1_c4_get, METH_O, "Transform_r1_c4_get(Transform self) -> float"},
		 { "Transform_r2_c1_set", _wrap_Transform_r2_c1_set, METH_VARARGS, "Transform_r2_c1_set(Transform self, float r2_c1)"},
		 { "Transform_r2_c1_get", _wrap_Transform_r2_c1_get, METH_O, "Transform_r2_c1_get(Transform self) -> float"},
		 { "Transform_r2_c2_set", _wrap_Transform_r2_c2_set, METH_VARARGS, "Transform_r2_c2_set(Transform self, float r2_c2)"},
		 { "Transform_r2_c2_get", _wrap_Transform_r2_c2_get, METH_O, "Transform_r2_c2_get(Transform self) -> float"},
		 { "Transform_r2_c3_set", _wrap_Transform_r2_c3_set, METH_VARARGS, "Transform_r2_c3_set(Transform self, float r2_c3)"},
		 { "Transform_r2_c3_get", _wrap_Transform_r2_c3_get, METH_O, "Transform_r2_c3_get(Transform self) -> float"},
		 { "Transform_r2_c4_set", _wrap_Transform_r2_c4_set, METH_VARARGS, "Transform_r2_c4_set(Transform self, float r2_c4)"},
		 { "Transform_r2_c4_get", _wrap_Transform_r2_c4_get, METH_O, "Transform_r2_c4_get(Transform self) -> float"},
		 { "Transform_r3_c1_set", _wrap_Transform_r3_c1_set, METH_VARARGS, "Transform_r3_c1_set(Transform self, float r3_c1)"},
		 { "Transform_r3_c1_get", _wrap_Transform_r3_c1_get, METH_O, "Transform_r3_c1_get(Transform self) -> float"},
		 { "Transform_r3_c2_set", _wrap_Transform_r3_c2_set, METH_VARARGS, "Transform_r3_c2_set(Transform self, float r3_c2)"},
		 { "Transform_r3_c2_get", _wrap_Transform_r3_c2_get, METH_O, "Transform_r3_c2_get(Transform self) -> float"},
		 { "Transform_r3_c3_set", _wrap_Transform_r3_c3_set, METH_VARARGS, "Transform_r3_c3_set(Transform self, float r3_c3)"},
		 { "Transform_r3_c3_get", _wrap_Transform_r3_c3_get, METH_O, "Transform_r3_c3_get(Transform self) -> float"},
		 { "Transform_r3_c4_set", _wrap_Transform_r3_c4_set, METH_VARARGS, "Transform_r3_c4_set(Transform self, float r3_c4)"},
		 { "Transform_r3_c4_get", _wrap_Transform_r3_c4_get, METH_O, "Transform_r3_c4_get(Transform self) -> float"},
		 { "new_Transform", _wrap_new_Transform, METH_VARARGS, "\n"
			"Transform()\n"
			"Transform(vectorFloat pFloats)\n"
			"new_Transform(float const & pPosX, float const & pPosY, float const & pPosZ) -> Transform\n"
			""},
		 { "Transform___imul__", _wrap_Transform___imul__, METH_VARARGS, "Transform___imul__(Transform self, Transform pT2) -> Transform"},
		 { "Transform___eq__", _wrap_Transform___eq__, METH_VARARGS, "Transform___eq__(Transform self, Transform pT2) -> bool"},
		 { "Transform___ne__", _wrap_Transform___ne__, METH_VARARGS, "Transform___ne__(Transform self, Transform pT2) -> bool"},
		 { "Transform_isNear", _wrap_Transform_isNear, METH_VARARGS, "Transform_isNear(Transform self, Transform pT2, float const & pEpsilon=0.0001) -> bool"},
		 { "Transform_isTransform", _wrap_Transform_isTransform, METH_VARARGS, "Transform_isTransform(Transform self, float const & pEpsilon=0.0001) -> bool"},
		 { "Transform_normalizeTransform", _wrap_Transform_normalizeTransform, METH_O, "Transform_normalizeTransform(Transform self)"},
		 { "Transform_norm", _wrap_Transform_norm, METH_O, "Transform_norm(Transform self) -> float"},
		 { "Transform_determinant", _wrap_Transform_determinant, METH_O, "Transform_determinant(Transform self) -> float"},
		 { "Transform_inverse", _wrap_Transform_inverse, METH_O, "Transform_inverse(Transform self) -> Transform"},
		 { "Transform_fromRotX", _wrap_Transform_fromRotX, METH_O, "Transform_fromRotX(float const pRotX) -> Transform"},
		 { "Transform_fromRotY", _wrap_Transform_fromRotY, METH_O, "Transform_fromRotY(float const pRotY) -> Transform"},
		 { "Transform_fromRotZ", _wrap_Transform_fromRotZ, METH_O, "Transform_fromRotZ(float const pRotZ) -> Transform"},
		 { "Transform_from3DRotation", _wrap_Transform_from3DRotation, METH_VARARGS, "Transform_from3DRotation(float const & pWX, float const & pWY, float const & pWZ) -> Transform"},
		 { "Transform_fromPosition", _wrap_Transform_fromPosition, METH_VARARGS, "\n"
			"Transform_fromPosition(float const pX, float const pY, float const pZ) -> Transform\n"
			"Transform_fromPosition(float const & pX, float const & pY, float const & pZ, float const & pWX, float const & pWY, float const & pWZ) -> Transform\n"
			""},
		 { "Transform_diff", _wrap_Transform_diff, METH_VARARGS, "Transform_diff(Transform self, Transform pT2) -> Transform"},
		 { "Transform_distanceSquared", _wrap_Transform_distanceSquared, METH_VARARGS, "Transform_distanceSquared(Transform self, Transform pT2) -> float"},
		 { "Transform_distance", _wrap_Transform_distance, METH_VARARGS, "Transform_distance(Transform self, Transform pT2) -> float"},
		 { "Transform_toVector", _wrap_Transform_toVector, METH_VARARGS, "\n"
			"Transform_toVector(Transform self, vectorFloat pReturnVector)\n"
			"Transform_toVector(Transform self) -> vectorFloat\n"
			""},
		 { "Transform_writeToVector", _wrap_Transform_writeToVector, METH_VARARGS, "Transform_writeToVector(Transform self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Transform___str__", _wrap_Transform___str__, METH_O, "Transform___str__(Transform self) -> char *"},
		 { "Transform___repr__", _wrap_Transform___repr__, METH_O, "Transform___repr__(Transform self) -> char *"},
		 { "Transform___mul__", _wrap_Transform___mul__, METH_VARARGS, "\n"
			"Transform___mul__(Transform self, Transform pT2) -> Transform\n"
			"Transform___mul__(Transform self, Position3D rhs) -> Position3D\n"
			""},
		 { "delete_Transform", _wrap_delete_Transform, METH_O, "delete_Transform(Transform self)"},
		 { "Transform_swigregister", Transform_swigregister, METH_O, NULL},
		 { "Transform_swiginit", Transform_swiginit, METH_VARARGS, NULL},
		 { "transformPreMultiply", _wrap_transformPreMultiply, METH_VARARGS, "transformPreMultiply(Transform pT, Transform pTOut)"},
		 { "normalizeTransform", _wrap_normalizeTransform, METH_O, "normalizeTransform(Transform pT)"},
		 { "transformToFloatVector", _wrap_transformToFloatVector, METH_VARARGS, "\n"
			"transformToFloatVector(Transform pT, vectorFloat pTOut)\n"
			"transformToFloatVector(Transform pT) -> vectorFloat\n"
			""},
		 { "determinant", _wrap_determinant, METH_VARARGS, "\n"
			"determinant(Rotation pRot) -> float\n"
			"determinant(Transform pT) -> float\n"
			"determinant(vectorFloat pFloats) -> float\n"
			""},
		 { "transformInverse", _wrap_transformInverse, METH_VARARGS, "\n"
			"transformInverse(Transform pT, Transform pTOut)\n"
			"transformInverse(Transform pT) -> Transform\n"
			""},
		 { "transformFromRotX", _wrap_transformFromRotX, METH_O, "transformFromRotX(float const pRotX) -> Transform"},
		 { "transformFromRotY", _wrap_transformFromRotY, METH_O, "transformFromRotY(float const pRotY) -> Transform"},
		 { "transformFromRotZ", _wrap_transformFromRotZ, METH_O, "transformFromRotZ(float const pRotZ) -> Transform"},
		 { "transformFrom3DRotation", _wrap_transformFrom3DRotation, METH_VARARGS, "transformFrom3DRotation(float const & pWX, float const & pWY, float const & pWZ) -> Transform"},
		 { "transformFromPosition", _wrap_transformFromPosition, METH_VARARGS, "\n"
			"transformFromPosition(float const & pX, float const & pY, float const & pZ) -> Transform\n"
			"transformFromPosition(float const & pX, float const & pY, float const & pZ, float const & pWX, float const & pWY, float const & pWZ) -> Transform\n"
			""},
		 { "transformInvertInPlace", _wrap_transformInvertInPlace, METH_O, "transformInvertInPlace(Transform pT)"},
		 { "pinv", _wrap_pinv, METH_VARARGS, "\n"
			"pinv(Pose2D pPos) -> Pose2D\n"
			"pinv(Transform pT) -> Transform\n"
			""},
		 { "transformDiff", _wrap_transformDiff, METH_VARARGS, "transformDiff(Transform pT1, Transform pT2) -> Transform"},
		 { "transformDistanceSquared", _wrap_transformDistanceSquared, METH_VARARGS, "transformDistanceSquared(Transform pT1, Transform pT2) -> float"},
		 { "transformDistance", _wrap_transformDistance, METH_VARARGS, "transformDistance(Transform pT1, Transform pT2) -> float"},
		 { "Velocity3D_xd_set", _wrap_Velocity3D_xd_set, METH_VARARGS, "Velocity3D_xd_set(Velocity3D self, float xd)"},
		 { "Velocity3D_xd_get", _wrap_Velocity3D_xd_get, METH_O, "Velocity3D_xd_get(Velocity3D self) -> float"},
		 { "Velocity3D_yd_set", _wrap_Velocity3D_yd_set, METH_VARARGS, "Velocity3D_yd_set(Velocity3D self, float yd)"},
		 { "Velocity3D_yd_get", _wrap_Velocity3D_yd_get, METH_O, "Velocity3D_yd_get(Velocity3D self) -> float"},
		 { "Velocity3D_zd_set", _wrap_Velocity3D_zd_set, METH_VARARGS, "Velocity3D_zd_set(Velocity3D self, float zd)"},
		 { "Velocity3D_zd_get", _wrap_Velocity3D_zd_get, METH_O, "Velocity3D_zd_get(Velocity3D self) -> float"},
		 { "new_Velocity3D", _wrap_new_Velocity3D, METH_VARARGS, "\n"
			"Velocity3D()\n"
			"Velocity3D(float pInit)\n"
			"Velocity3D(float pXd, float pYd, float pZd)\n"
			"new_Velocity3D(vectorFloat pFloats) -> Velocity3D\n"
			""},
		 { "Velocity3D___add__", _wrap_Velocity3D___add__, METH_VARARGS, "Velocity3D___add__(Velocity3D self, Velocity3D pVel2) -> Velocity3D"},
		 { "Velocity3D___sub__", _wrap_Velocity3D___sub__, METH_VARARGS, "Velocity3D___sub__(Velocity3D self, Velocity3D pVel2) -> Velocity3D"},
		 { "Velocity3D___pos__", _wrap_Velocity3D___pos__, METH_O, "Velocity3D___pos__(Velocity3D self) -> Velocity3D"},
		 { "Velocity3D___neg__", _wrap_Velocity3D___neg__, METH_O, "Velocity3D___neg__(Velocity3D self) -> Velocity3D"},
		 { "Velocity3D___iadd__", _wrap_Velocity3D___iadd__, METH_VARARGS, "Velocity3D___iadd__(Velocity3D self, Velocity3D pVel2) -> Velocity3D"},
		 { "Velocity3D___isub__", _wrap_Velocity3D___isub__, METH_VARARGS, "Velocity3D___isub__(Velocity3D self, Velocity3D pVel2) -> Velocity3D"},
		 { "Velocity3D___eq__", _wrap_Velocity3D___eq__, METH_VARARGS, "Velocity3D___eq__(Velocity3D self, Velocity3D pVel2) -> bool"},
		 { "Velocity3D___ne__", _wrap_Velocity3D___ne__, METH_VARARGS, "Velocity3D___ne__(Velocity3D self, Velocity3D pVel2) -> bool"},
		 { "Velocity3D___mul__", _wrap_Velocity3D___mul__, METH_VARARGS, "Velocity3D___mul__(Velocity3D self, float const pVal) -> Velocity3D"},
		 { "Velocity3D___truediv__", _wrap_Velocity3D___truediv__, METH_VARARGS, "Velocity3D___truediv__(Velocity3D self, float const pVal) -> Velocity3D"},
		 { "Velocity3D___imul__", _wrap_Velocity3D___imul__, METH_VARARGS, "Velocity3D___imul__(Velocity3D self, float const pVal) -> Velocity3D"},
		 { "Velocity3D___itruediv__", _wrap_Velocity3D___itruediv__, METH_VARARGS, "Velocity3D___itruediv__(Velocity3D self, float const pVal) -> Velocity3D"},
		 { "Velocity3D_isNear", _wrap_Velocity3D_isNear, METH_VARARGS, "Velocity3D_isNear(Velocity3D self, Velocity3D pVel2, float const & pEpsilon=0.0001) -> bool"},
		 { "Velocity3D_norm", _wrap_Velocity3D_norm, METH_O, "Velocity3D_norm(Velocity3D self) -> float"},
		 { "Velocity3D_normalize", _wrap_Velocity3D_normalize, METH_O, "Velocity3D_normalize(Velocity3D self) -> Velocity3D"},
		 { "Velocity3D_toVector", _wrap_Velocity3D_toVector, METH_VARARGS, "\n"
			"Velocity3D_toVector(Velocity3D self, vectorFloat pReturnValue)\n"
			"Velocity3D_toVector(Velocity3D self) -> vectorFloat\n"
			""},
		 { "Velocity3D_writeToVector", _wrap_Velocity3D_writeToVector, METH_VARARGS, "Velocity3D_writeToVector(Velocity3D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Velocity3D___repr__", _wrap_Velocity3D___repr__, METH_O, "Velocity3D___repr__(Velocity3D self) -> char *"},
		 { "Velocity3D___rmul__", _wrap_Velocity3D___rmul__, METH_VARARGS, "Velocity3D___rmul__(Velocity3D self, float const lhs) -> Velocity3D"},
		 { "delete_Velocity3D", _wrap_delete_Velocity3D, METH_O, "delete_Velocity3D(Velocity3D self)"},
		 { "Velocity3D_swigregister", Velocity3D_swigregister, METH_O, NULL},
		 { "Velocity3D_swiginit", Velocity3D_swiginit, METH_VARARGS, NULL},
		 { "Velocity6D_xd_set", _wrap_Velocity6D_xd_set, METH_VARARGS, "Velocity6D_xd_set(Velocity6D self, float xd)"},
		 { "Velocity6D_xd_get", _wrap_Velocity6D_xd_get, METH_O, "Velocity6D_xd_get(Velocity6D self) -> float"},
		 { "Velocity6D_yd_set", _wrap_Velocity6D_yd_set, METH_VARARGS, "Velocity6D_yd_set(Velocity6D self, float yd)"},
		 { "Velocity6D_yd_get", _wrap_Velocity6D_yd_get, METH_O, "Velocity6D_yd_get(Velocity6D self) -> float"},
		 { "Velocity6D_zd_set", _wrap_Velocity6D_zd_set, METH_VARARGS, "Velocity6D_zd_set(Velocity6D self, float zd)"},
		 { "Velocity6D_zd_get", _wrap_Velocity6D_zd_get, METH_O, "Velocity6D_zd_get(Velocity6D self) -> float"},
		 { "Velocity6D_wxd_set", _wrap_Velocity6D_wxd_set, METH_VARARGS, "Velocity6D_wxd_set(Velocity6D self, float wxd)"},
		 { "Velocity6D_wxd_get", _wrap_Velocity6D_wxd_get, METH_O, "Velocity6D_wxd_get(Velocity6D self) -> float"},
		 { "Velocity6D_wyd_set", _wrap_Velocity6D_wyd_set, METH_VARARGS, "Velocity6D_wyd_set(Velocity6D self, float wyd)"},
		 { "Velocity6D_wyd_get", _wrap_Velocity6D_wyd_get, METH_O, "Velocity6D_wyd_get(Velocity6D self) -> float"},
		 { "Velocity6D_wzd_set", _wrap_Velocity6D_wzd_set, METH_VARARGS, "Velocity6D_wzd_set(Velocity6D self, float wzd)"},
		 { "Velocity6D_wzd_get", _wrap_Velocity6D_wzd_get, METH_O, "Velocity6D_wzd_get(Velocity6D self) -> float"},
		 { "new_Velocity6D", _wrap_new_Velocity6D, METH_VARARGS, "\n"
			"Velocity6D()\n"
			"Velocity6D(float pInit)\n"
			"Velocity6D(float pXd, float pYd, float pZd, float pWxd, float pWyd, float pWzd)\n"
			"new_Velocity6D(vectorFloat pFloats) -> Velocity6D\n"
			""},
		 { "Velocity6D___add__", _wrap_Velocity6D___add__, METH_VARARGS, "Velocity6D___add__(Velocity6D self, Velocity6D pVel2) -> Velocity6D"},
		 { "Velocity6D___sub__", _wrap_Velocity6D___sub__, METH_VARARGS, "Velocity6D___sub__(Velocity6D self, Velocity6D pVel2) -> Velocity6D"},
		 { "Velocity6D___pos__", _wrap_Velocity6D___pos__, METH_O, "Velocity6D___pos__(Velocity6D self) -> Velocity6D"},
		 { "Velocity6D___neg__", _wrap_Velocity6D___neg__, METH_O, "Velocity6D___neg__(Velocity6D self) -> Velocity6D"},
		 { "Velocity6D___mul__", _wrap_Velocity6D___mul__, METH_VARARGS, "Velocity6D___mul__(Velocity6D self, float const pVal) -> Velocity6D"},
		 { "Velocity6D___truediv__", _wrap_Velocity6D___truediv__, METH_VARARGS, "Velocity6D___truediv__(Velocity6D self, float const pVal) -> Velocity6D"},
		 { "Velocity6D___eq__", _wrap_Velocity6D___eq__, METH_VARARGS, "Velocity6D___eq__(Velocity6D self, Velocity6D pVel2) -> bool"},
		 { "Velocity6D___ne__", _wrap_Velocity6D___ne__, METH_VARARGS, "Velocity6D___ne__(Velocity6D self, Velocity6D pVel2) -> bool"},
		 { "Velocity6D___imul__", _wrap_Velocity6D___imul__, METH_VARARGS, "Velocity6D___imul__(Velocity6D self, float const pVal) -> Velocity6D"},
		 { "Velocity6D___itruediv__", _wrap_Velocity6D___itruediv__, METH_VARARGS, "Velocity6D___itruediv__(Velocity6D self, float const pVal) -> Velocity6D"},
		 { "Velocity6D_isNear", _wrap_Velocity6D_isNear, METH_VARARGS, "Velocity6D_isNear(Velocity6D self, Velocity6D pVel2, float const & pEpsilon=0.0001) -> bool"},
		 { "Velocity6D_norm", _wrap_Velocity6D_norm, METH_O, "Velocity6D_norm(Velocity6D self) -> float"},
		 { "Velocity6D_normalize", _wrap_Velocity6D_normalize, METH_O, "Velocity6D_normalize(Velocity6D self) -> Velocity6D"},
		 { "Velocity6D_toVector", _wrap_Velocity6D_toVector, METH_VARARGS, "\n"
			"Velocity6D_toVector(Velocity6D self, vectorFloat pReturnVector)\n"
			"Velocity6D_toVector(Velocity6D self) -> vectorFloat\n"
			""},
		 { "Velocity6D_writeToVector", _wrap_Velocity6D_writeToVector, METH_VARARGS, "Velocity6D_writeToVector(Velocity6D self, std::vector< float,std::allocator< float > >::iterator & pIt)"},
		 { "Velocity6D___repr__", _wrap_Velocity6D___repr__, METH_O, "Velocity6D___repr__(Velocity6D self) -> char *"},
		 { "Velocity6D___rmul__", _wrap_Velocity6D___rmul__, METH_VARARGS, "Velocity6D___rmul__(Velocity6D self, float const lhs) -> Velocity6D"},
		 { "delete_Velocity6D", _wrap_delete_Velocity6D, METH_O, "delete_Velocity6D(Velocity6D self)"},
		 { "Velocity6D_swigregister", Velocity6D_swigregister, METH_O, NULL},
		 { "Velocity6D_swiginit", Velocity6D_swiginit, METH_VARARGS, NULL},
		 { "norm", _wrap_norm, METH_VARARGS, "\n"
			"norm(Position2D pPos) -> float\n"
			"norm(Position3D pPos) -> float\n"
			"norm(Position6D pPos) -> float\n"
			"norm(Quaternion pQua) -> float\n"
			"norm(Rotation3D pRot) -> float\n"
			"norm(Transform pT) -> float\n"
			"norm(Velocity3D pVel) -> float\n"
			"norm(Velocity6D pVel) -> float\n"
			""},
		 { "normalize", _wrap_normalize, METH_VARARGS, "\n"
			"normalize(Position2D pPos) -> Position2D\n"
			"normalize(Position3D pPos) -> Position3D\n"
			"normalize(Position6D pPos) -> Position6D\n"
			"normalize(Quaternion pQua) -> Quaternion\n"
			"normalize(Velocity3D pVel) -> Velocity3D\n"
			"normalize(Velocity6D pVel) -> Velocity6D\n"
			""},
		 { "TransformAndVelocity6D_T_set", _wrap_TransformAndVelocity6D_T_set, METH_VARARGS, "TransformAndVelocity6D_T_set(TransformAndVelocity6D self, Transform T)"},
		 { "TransformAndVelocity6D_T_get", _wrap_TransformAndVelocity6D_T_get, METH_O, "TransformAndVelocity6D_T_get(TransformAndVelocity6D self) -> Transform"},
		 { "TransformAndVelocity6D_V_set", _wrap_TransformAndVelocity6D_V_set, METH_VARARGS, "TransformAndVelocity6D_V_set(TransformAndVelocity6D self, Velocity6D V)"},
		 { "TransformAndVelocity6D_V_get", _wrap_TransformAndVelocity6D_V_get, METH_O, "TransformAndVelocity6D_V_get(TransformAndVelocity6D self) -> Velocity6D"},
		 { "new_TransformAndVelocity6D", _wrap_new_TransformAndVelocity6D, METH_VARARGS, "\n"
			"TransformAndVelocity6D()\n"
			"new_TransformAndVelocity6D(Transform pT, Velocity6D pV) -> TransformAndVelocity6D\n"
			""},
		 { "TransformAndVelocity6D_isNear", _wrap_TransformAndVelocity6D_isNear, METH_VARARGS, "TransformAndVelocity6D_isNear(TransformAndVelocity6D self, TransformAndVelocity6D pTV2, float const & pEpsilon=0.0001) -> bool"},
		 { "TransformAndVelocity6D___repr__", _wrap_TransformAndVelocity6D___repr__, METH_O, "TransformAndVelocity6D___repr__(TransformAndVelocity6D self) -> char *"},
		 { "delete_TransformAndVelocity6D", _wrap_delete_TransformAndVelocity6D, METH_O, "delete_TransformAndVelocity6D(TransformAndVelocity6D self)"},
		 { "TransformAndVelocity6D_swigregister", TransformAndVelocity6D_swigregister, METH_O, NULL},
		 { "TransformAndVelocity6D_swiginit", TransformAndVelocity6D_swiginit, METH_VARARGS, NULL},
		 { "getDubinsSolutions", _wrap_getDubinsSolutions, METH_VARARGS, "getDubinsSolutions(Pose2D pTargetPose, float const pCircleRadius) -> vectorPose2D"},
		 { "avoidFootCollision", _wrap_avoidFootCollision, METH_VARARGS, "avoidFootCollision(vectorPosition2D pLFootBoundingBox, vectorPosition2D pRFootBoundingBox, bool const & pIsLeftSupport, Pose2D pMove) -> bool const"},
		 { "clipFootWithEllipse", _wrap_clipFootWithEllipse, METH_VARARGS, "clipFootWithEllipse(float const & pMaxFootX, float const & pMaxFootY, Pose2D pMove) -> bool const"},
		 { "areTwoBoxesInCollision", _wrap_areTwoBoxesInCollision, METH_VARARGS, "areTwoBoxesInCollision(vectorPosition2D pBoxA, vectorPosition2D pBoxB) -> bool const"},
		 { "computeBox", _wrap_computeBox, METH_VARARGS, "computeBox(vectorPosition2D pInitBox, Pose2D pMove, vectorPosition2D pMovedBox)"},
		 { "dichotomie", _wrap_dichotomie, METH_VARARGS, "dichotomie(vectorPosition2D pFixedBox, vectorPosition2D pMovingBox, Pose2D pMove) -> void const"},
		 { "intersectionSegment2D", _wrap_intersectionSegment2D, METH_VARARGS, "intersectionSegment2D(Position2D pA1, Position2D pA2, Position2D pB1, Position2D pB2, Position2D pC) -> bool"},
		 { "transformLogarithmInPlace", _wrap_transformLogarithmInPlace, METH_VARARGS, "transformLogarithmInPlace(Transform pT, Velocity6D pVel)"},
		 { "transformLogarithm", _wrap_transformLogarithm, METH_O, "transformLogarithm(Transform pT) -> Velocity6D"},
		 { "velocityExponential", _wrap_velocityExponential, METH_O, "velocityExponential(Velocity6D pVel) -> Transform"},
		 { "velocityExponentialInPlace", _wrap_velocityExponentialInPlace, METH_VARARGS, "velocityExponentialInPlace(Velocity6D pVel, Transform pT)"},
		 { "changeReferenceVelocity6D", _wrap_changeReferenceVelocity6D, METH_VARARGS, "changeReferenceVelocity6D(Transform pT, Velocity6D pVelIn, Velocity6D pVelOut)"},
		 { "changeReferencePosition6D", _wrap_changeReferencePosition6D, METH_VARARGS, "changeReferencePosition6D(Transform pT, Position6D pPosIn, Position6D pPosOut)"},
		 { "changeReferencePosition3DInPlace", _wrap_changeReferencePosition3DInPlace, METH_VARARGS, "changeReferencePosition3DInPlace(Transform pT, Position3D pPosOut)"},
		 { "changeReferenceTransposePosition3DInPlace", _wrap_changeReferenceTransposePosition3DInPlace, METH_VARARGS, "changeReferenceTransposePosition3DInPlace(Transform pT, Position3D pPosOut)"},
		 { "changeReferencePosition3D", _wrap_changeReferencePosition3D, METH_VARARGS, "changeReferencePosition3D(Transform pT, Position3D pPosIn, Position3D pPosOut)"},
		 { "changeReferenceTransposePosition3D", _wrap_changeReferenceTransposePosition3D, METH_VARARGS, "changeReferenceTransposePosition3D(Transform pT, Position3D pPosIn, Position3D pPosOut)"},
		 { "changeReferenceTransform", _wrap_changeReferenceTransform, METH_VARARGS, "changeReferenceTransform(Transform pT, Transform pTIn, Transform pTOut)"},
		 { "changeReferenceTransposeTransform", _wrap_changeReferenceTransposeTransform, METH_VARARGS, "changeReferenceTransposeTransform(Transform pT, Transform pTIn, Transform pTOut)"},
		 { "changeReferenceTransposeVelocity6D", _wrap_changeReferenceTransposeVelocity6D, METH_VARARGS, "changeReferenceTransposeVelocity6D(Transform pT, Velocity6D pVelIn, Velocity6D pVelOut)"},
		 { "changeReferenceTransposePosition6D", _wrap_changeReferenceTransposePosition6D, METH_VARARGS, "changeReferenceTransposePosition6D(Transform pT, Position6D pPosIn, Position6D pPosOut)"},
		 { "transformMeanInPlace", _wrap_transformMeanInPlace, METH_VARARGS, "transformMeanInPlace(Transform pTIn1, Transform pTIn2, float const & pVal, Transform pTOut)"},
		 { "transformMean", _wrap_transformMean, METH_VARARGS, "transformMean(Transform pTIn1, Transform pTIn2, float const & pVal=0.5) -> Transform"},
		 { "transformFromRotationPosition3D", _wrap_transformFromRotationPosition3D, METH_VARARGS, "\n"
			"transformFromRotationPosition3D(Rotation pRot, float const & pX, float const & pY, float const & pZ) -> Transform\n"
			"transformFromRotationPosition3D(Rotation pRot, Position3D pPos) -> Transform\n"
			""},
		 { "transformFromPosition3DInPlace", _wrap_transformFromPosition3DInPlace, METH_VARARGS, "transformFromPosition3DInPlace(Position3D pPosition, Transform pTransform)"},
		 { "transformFromPosition3D", _wrap_transformFromPosition3D, METH_O, "transformFromPosition3D(Position3D pPosition) -> Transform"},
		 { "transformFromRotationInPlace", _wrap_transformFromRotationInPlace, METH_VARARGS, "transformFromRotationInPlace(Rotation pRotation, Transform pTransform)"},
		 { "transformFromRotation", _wrap_transformFromRotation, METH_O, "transformFromRotation(Rotation pRotation) -> Transform"},
		 { "rotationFromTransformInPlace", _wrap_rotationFromTransformInPlace, METH_VARARGS, "rotationFromTransformInPlace(Transform pTransform, Rotation pRotation)"},
		 { "rotationFromTransform", _wrap_rotationFromTransform, METH_O, "rotationFromTransform(Transform pTransform) -> Rotation"},
		 { "rotation3DFromRotation", _wrap_rotation3DFromRotation, METH_O, "rotation3DFromRotation(Rotation pRotation) -> Rotation3D"},
		 { "rotationFromAxesXY", _wrap_rotationFromAxesXY, METH_VARARGS, "rotationFromAxesXY(Position3D pX, Position3D pY) -> Rotation"},
		 { "rotationFromAxesXZ", _wrap_rotationFromAxesXZ, METH_VARARGS, "rotationFromAxesXZ(Position3D pX, Position3D pZ) -> Rotation"},
		 { "rotationFromAxesYZ", _wrap_rotationFromAxesYZ, METH_VARARGS, "rotationFromAxesYZ(Position3D pY, Position3D pZ) -> Rotation"},
		 { "rotationFromAxesXYZ", _wrap_rotationFromAxesXYZ, METH_VARARGS, "rotationFromAxesXYZ(Position3D pX, Position3D pY, Position3D pZ) -> Rotation"},
		 { "position6DFromTransformInPlace", _wrap_position6DFromTransformInPlace, METH_VARARGS, "position6DFromTransformInPlace(Transform pT, Position6D pPos)"},
		 { "position6DFromTransform", _wrap_position6DFromTransform, METH_O, "position6DFromTransform(Transform pT) -> Position6D"},
		 { "transformFromPose2DInPlace", _wrap_transformFromPose2DInPlace, METH_VARARGS, "transformFromPose2DInPlace(Pose2D pPose, Transform pT)"},
		 { "transformFromPose2D", _wrap_transformFromPose2D, METH_O, "transformFromPose2D(Pose2D pPose) -> Transform"},
		 { "pose2DFromTransformInPlace", _wrap_pose2DFromTransformInPlace, METH_VARARGS, "pose2DFromTransformInPlace(Transform pT, Pose2D pPos)"},
		 { "pose2DFromTransform", _wrap_pose2DFromTransform, METH_O, "pose2DFromTransform(Transform pT) -> Pose2D"},
		 { "position2DFromTransformInPlace", _wrap_position2DFromTransformInPlace, METH_VARARGS, "position2DFromTransformInPlace(Transform pT, Position2D pPos)"},
		 { "position2DFromTransform", _wrap_position2DFromTransform, METH_O, "position2DFromTransform(Transform pT) -> Position2D"},
		 { "transformFromRotation3D", _wrap_transformFromRotation3D, METH_O, "transformFromRotation3D(Rotation3D pRotation) -> Transform"},
		 { "transformFromPosition6D", _wrap_transformFromPosition6D, METH_O, "transformFromPosition6D(Position6D pPosition6D) -> Transform"},
		 { "position6DFromTransformDiffInPlace", _wrap_position6DFromTransformDiffInPlace, METH_VARARGS, "position6DFromTransformDiffInPlace(Transform pCurrent, Transform pTarget, Position6D result)"},
		 { "position6DFromTransformDiff", _wrap_position6DFromTransformDiff, METH_VARARGS, "position6DFromTransformDiff(Transform pCurrent, Transform pTarget) -> Position6D"},
		 { "position3DFromTransformInPlace", _wrap_position3DFromTransformInPlace, METH_VARARGS, "position3DFromTransformInPlace(Transform pT, Position3D pPos)"},
		 { "position3DFromTransform", _wrap_position3DFromTransform, METH_O, "position3DFromTransform(Transform pT) -> Position3D"},
		 { "rotation3DFromTransform", _wrap_rotation3DFromTransform, METH_O, "rotation3DFromTransform(Transform pT) -> Rotation3D"},
		 { "transformFromRotVecInPlace", _wrap_transformFromRotVecInPlace, METH_VARARGS, "\n"
			"transformFromRotVecInPlace(int const pAxis, float const pTheta, Position3D pPos, Transform pT)\n"
			"transformFromRotVecInPlace(Position3D pPos, Transform pT)\n"
			""},
		 { "transformFromRotVec", _wrap_transformFromRotVec, METH_VARARGS, "\n"
			"transformFromRotVec(int const pAxis, float const pTheta, Position3D pPos) -> Transform\n"
			"transformFromRotVec(Position3D pPos) -> Transform\n"
			"transformFromRotVec(int const & pAxis, float const & pTheta) -> Transform\n"
			""},
		 { "axisRotationProjection", _wrap_axisRotationProjection, METH_VARARGS, "\n"
			"axisRotationProjection(Position3D pAxis, Transform pT) -> Transform\n"
			"axisRotationProjection(Position3D pAxis, Rotation pRot) -> Rotation\n"
			""},
		 { "axisRotationProjectionInPlace", _wrap_axisRotationProjectionInPlace, METH_VARARGS, "\n"
			"axisRotationProjectionInPlace(Position3D pAxis, Transform pT)\n"
			"axisRotationProjectionInPlace(Position3D pAxis, Rotation pRot)\n"
			""},
		 { "orthogonalSpace", _wrap_orthogonalSpace, METH_VARARGS, "\n"
			"orthogonalSpace(Position3D pPos, Transform pTf)\n"
			"orthogonalSpace(Position3D pPos) -> Transform\n"
			""},
		 { "transformFromQuaternion", _wrap_transformFromQuaternion, METH_O, "transformFromQuaternion(Quaternion pQua) -> Transform"},
		 { "quaternionFromTransform", _wrap_quaternionFromTransform, METH_O, "quaternionFromTransform(Transform pT) -> Quaternion"},
		 { "transformFromDisplacement", _wrap_transformFromDisplacement, METH_O, "transformFromDisplacement(Displacement pDisp) -> Transform"},
		 { "displacementFromTransform", _wrap_displacementFromTransform, METH_O, "displacementFromTransform(Transform pTrans) -> Displacement"},
		 { "modulo2PIInPlace", _wrap_modulo2PIInPlace, METH_O, "modulo2PIInPlace(float & pAngle)"},
		 { "modulo2PI", _wrap_modulo2PI, METH_O, "modulo2PI(float pAngle) -> float"},
		 { "meanAngle", _wrap_meanAngle, METH_O, "meanAngle(vectorFloat pAngles) -> float"},
		 { "weightedMeanAngle", _wrap_weightedMeanAngle, METH_VARARGS, "weightedMeanAngle(vectorFloat pAngles, vectorFloat pWeights) -> float"},
		 { "clipData", _wrap_clipData, METH_VARARGS, "\n"
			"clipData(float const & pMin, float const & pMax, float & pData) -> bool\n"
			"clipData(float const & pMin, float const & pMax, vectorFloat pData) -> bool\n"
			"clipData(float const & pMin, float const & pMax, std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > & pData) -> bool\n"
			""},
		 { "changeReferencePose2D", _wrap_changeReferencePose2D, METH_VARARGS, "changeReferencePose2D(float const & pTheta, Pose2D pPosIn, Pose2D pPosOut)"},
		 { "changeReferencePose2DInPlace", _wrap_changeReferencePose2DInPlace, METH_VARARGS, "changeReferencePose2DInPlace(float const & pTheta, Pose2D pPosOut)"},
		 { "position6DFromVelocity6D", _wrap_position6DFromVelocity6D, METH_O, "position6DFromVelocity6D(Velocity6D pVel) -> Position6D"},
		 { "position2DFromPose2DInPlace", _wrap_position2DFromPose2DInPlace, METH_VARARGS, "position2DFromPose2DInPlace(Pose2D pPose2D, Position2D pPosition2D)"},
		 { "position2DFromPose2D", _wrap_position2DFromPose2D, METH_O, "position2DFromPose2D(Pose2D pPose2D) -> Position2D"},
		 { "position3DFromPosition6D", _wrap_position3DFromPosition6D, METH_O, "position3DFromPosition6D(Position6D pPosition6D) -> Position3D"},
		 { "rotationFromAngleDirection", _wrap_rotationFromAngleDirection, METH_VARARGS, "\n"
			"rotationFromAngleDirection(float const pAngle, float const pX, float const pY, float const pZ) -> Rotation\n"
			"rotationFromAngleDirection(float const & pTheta, Position3D pPos) -> Rotation\n"
			""},
		 { "position6DFromPose2DInPlace", _wrap_position6DFromPose2DInPlace, METH_VARARGS, "position6DFromPose2DInPlace(Pose2D pPose2D, Position6D pPosition6D)"},
		 { "position6DFromPose2D", _wrap_position6DFromPose2D, METH_O, "position6DFromPose2D(Pose2D pPose2D) -> Position6D"},
		 { "position6DFromPosition3DInPlace", _wrap_position6DFromPosition3DInPlace, METH_VARARGS, "position6DFromPosition3DInPlace(Position3D pPosition3D, Position6D pPosition6D)"},
		 { "position6DFromPosition3D", _wrap_position6DFromPosition3D, METH_O, "position6DFromPosition3D(Position3D pPosition3D) -> Position6D"},
		 { "pose2DFromPosition6DInPlace", _wrap_pose2DFromPosition6DInPlace, METH_VARARGS, "pose2DFromPosition6DInPlace(Position6D pPosition6D, Pose2D pPose2D)"},
		 { "pose2DFromPosition6D", _wrap_pose2DFromPosition6D, METH_O, "pose2DFromPosition6D(Position6D pPosition6D) -> Pose2D"},
		 { "pose2DFromPosition2DInPlace", _wrap_pose2DFromPosition2DInPlace, METH_VARARGS, "pose2DFromPosition2DInPlace(Position2D pPosition2D, float const pAngle, Pose2D pPose2D)"},
		 { "pose2DFromPosition2D", _wrap_pose2DFromPosition2D, METH_VARARGS, "pose2DFromPosition2D(Position2D pPosition2D, float const pAngle=0.0) -> Pose2D"},
		 { "__mul__", _wrap___mul__, METH_VARARGS, "\n"
			"__mul__(float const pM, Position2D pPos1) -> Position2D\n"
			"__mul__(float const pM, Velocity3D pVel1) -> Velocity3D\n"
			"__mul__(float const pVal, Velocity6D pVel) -> Velocity6D\n"
			"__mul__(Transform pT, Position2D pPos) -> Position3D\n"
			"__mul__(Transform pT, Position3D pPos) -> Position3D\n"
			"__mul__(Rotation pRot, Position3D pPos) -> Position3D\n"
			"__mul__(Quaternion pQuat, Position3D pPos) -> Position3D\n"
			"__mul__(float const pVal, Position6D pPos) -> Velocity6D\n"
			"__mul__(float const pVal, Position3D pPos) -> Velocity3D\n"
			"__mul__(Rotation pRot, Velocity3D pVel) -> Velocity3D\n"
			"__mul__(Pose2D pVal, Position2D pPos) -> Position2D\n"
			""},
		 { "quaternionFromRotation3D", _wrap_quaternionFromRotation3D, METH_VARARGS, "\n"
			"quaternionFromRotation3D(Rotation3D pRot3D, Quaternion pQuaternion)\n"
			"quaternionFromRotation3D(Rotation3D pRot3D) -> Quaternion\n"
			""},
		 { "rotationFromQuaternion", _wrap_rotationFromQuaternion, METH_VARARGS, "\n"
			"rotationFromQuaternion(float const pA, float const pB, float const pC, float const pD) -> Rotation\n"
			"rotationFromQuaternion(Quaternion pQua, Rotation pRot)\n"
			"rotationFromQuaternion(Quaternion pQua) -> Rotation\n"
			""},
		 { "rotation3DFromQuaternion", _wrap_rotation3DFromQuaternion, METH_VARARGS, "\n"
			"rotation3DFromQuaternion(Quaternion pQuaterion, Rotation3D pRot3D)\n"
			"rotation3DFromQuaternion(Quaternion pQuaternion) -> Rotation3D\n"
			""},
		 { "quaternionPosition3DFromPosition6D", _wrap_quaternionPosition3DFromPosition6D, METH_VARARGS, "quaternionPosition3DFromPosition6D(Position6D pPos6D, Quaternion pQua, Position3D pPos3D)"},
		 { "pointMassRotationalInertia", _wrap_pointMassRotationalInertia, METH_VARARGS, "pointMassRotationalInertia(float pMass, Position3D pPos, vectorFloat pInertia)"},
		 { "delete_Shape3D", _wrap_delete_Shape3D, METH_O, "delete_Shape3D(Shape3D self)"},
		 { "Shape3D_accept", _wrap_Shape3D_accept, METH_VARARGS, "Shape3D_accept(Shape3D self, Shape3DVisitor v)"},
		 { "Shape3D_swigregister", Shape3D_swigregister, METH_O, NULL},
		 { "new_Sphere", _wrap_new_Sphere, METH_O, "new_Sphere(float pRadius) -> Sphere"},
		 { "Sphere_accept", _wrap_Sphere_accept, METH_VARARGS, "Sphere_accept(Sphere self, Shape3DVisitor v)"},
		 { "Sphere_getRadius", _wrap_Sphere_getRadius, METH_O, "Sphere_getRadius(Sphere self) -> float"},
		 { "delete_Sphere", _wrap_delete_Sphere, METH_O, "delete_Sphere(Sphere self)"},
		 { "Sphere_swigregister", Sphere_swigregister, METH_O, NULL},
		 { "Sphere_swiginit", Sphere_swiginit, METH_VARARGS, NULL},
		 { "new_RoundedRectangle", _wrap_new_RoundedRectangle, METH_VARARGS, "new_RoundedRectangle(float pHalfExtentX, float pHalfExtentY, float pRadius) -> RoundedRectangle"},
		 { "RoundedRectangle_accept", _wrap_RoundedRectangle_accept, METH_VARARGS, "RoundedRectangle_accept(RoundedRectangle self, Shape3DVisitor v)"},
		 { "RoundedRectangle_getHalfExtentX", _wrap_RoundedRectangle_getHalfExtentX, METH_O, "RoundedRectangle_getHalfExtentX(RoundedRectangle self) -> float"},
		 { "RoundedRectangle_getHalfExtentY", _wrap_RoundedRectangle_getHalfExtentY, METH_O, "RoundedRectangle_getHalfExtentY(RoundedRectangle self) -> float"},
		 { "RoundedRectangle_getRadius", _wrap_RoundedRectangle_getRadius, METH_O, "RoundedRectangle_getRadius(RoundedRectangle self) -> float"},
		 { "delete_RoundedRectangle", _wrap_delete_RoundedRectangle, METH_O, "delete_RoundedRectangle(RoundedRectangle self)"},
		 { "RoundedRectangle_swigregister", RoundedRectangle_swigregister, METH_O, NULL},
		 { "RoundedRectangle_swiginit", RoundedRectangle_swiginit, METH_VARARGS, NULL},
		 { "new_Pill", _wrap_new_Pill, METH_VARARGS, "new_Pill(float pHalfExtent, float pRadius) -> Pill"},
		 { "Pill_accept", _wrap_Pill_accept, METH_VARARGS, "Pill_accept(Pill self, Shape3DVisitor v)"},
		 { "Pill_getHalfExtent", _wrap_Pill_getHalfExtent, METH_O, "Pill_getHalfExtent(Pill self) -> float"},
		 { "Pill_getRadius", _wrap_Pill_getRadius, METH_O, "Pill_getRadius(Pill self) -> float"},
		 { "delete_Pill", _wrap_delete_Pill, METH_O, "delete_Pill(Pill self)"},
		 { "Pill_swigregister", Pill_swigregister, METH_O, NULL},
		 { "Pill_swiginit", Pill_swiginit, METH_VARARGS, NULL},
		 { "Plane_accept", _wrap_Plane_accept, METH_VARARGS, "Plane_accept(Plane self, Shape3DVisitor v)"},
		 { "new_Plane", _wrap_new_Plane, METH_NOARGS, "new_Plane() -> Plane"},
		 { "delete_Plane", _wrap_delete_Plane, METH_O, "delete_Plane(Plane self)"},
		 { "Plane_swigregister", Plane_swigregister, METH_O, NULL},
		 { "Plane_swiginit", Plane_swiginit, METH_VARARGS, NULL},
		 { "HalfSpace_accept", _wrap_HalfSpace_accept, METH_VARARGS, "HalfSpace_accept(HalfSpace self, Shape3DVisitor v)"},
		 { "new_HalfSpace", _wrap_new_HalfSpace, METH_NOARGS, "new_HalfSpace() -> HalfSpace"},
		 { "delete_HalfSpace", _wrap_delete_HalfSpace, METH_O, "delete_HalfSpace(HalfSpace self)"},
		 { "HalfSpace_swigregister", HalfSpace_swigregister, METH_O, NULL},
		 { "HalfSpace_swiginit", HalfSpace_swiginit, METH_VARARGS, NULL},
		 { "new_Rectangle", _wrap_new_Rectangle, METH_VARARGS, "new_Rectangle(float pHalfExtentX, float pHalfExtentY) -> Rectangle"},
		 { "Rectangle_accept", _wrap_Rectangle_accept, METH_VARARGS, "Rectangle_accept(Rectangle self, Shape3DVisitor v)"},
		 { "Rectangle_getHalfExtentX", _wrap_Rectangle_getHalfExtentX, METH_O, "Rectangle_getHalfExtentX(Rectangle self) -> float"},
		 { "Rectangle_getHalfExtentY", _wrap_Rectangle_getHalfExtentY, METH_O, "Rectangle_getHalfExtentY(Rectangle self) -> float"},
		 { "delete_Rectangle", _wrap_delete_Rectangle, METH_O, "delete_Rectangle(Rectangle self)"},
		 { "Rectangle_swigregister", Rectangle_swigregister, METH_O, NULL},
		 { "Rectangle_swiginit", Rectangle_swiginit, METH_VARARGS, NULL},
		 { "HalfLine_accept", _wrap_HalfLine_accept, METH_VARARGS, "HalfLine_accept(HalfLine self, Shape3DVisitor v)"},
		 { "new_HalfLine", _wrap_new_HalfLine, METH_NOARGS, "new_HalfLine() -> HalfLine"},
		 { "delete_HalfLine", _wrap_delete_HalfLine, METH_O, "delete_HalfLine(HalfLine self)"},
		 { "HalfLine_swigregister", HalfLine_swigregister, METH_O, NULL},
		 { "HalfLine_swiginit", HalfLine_swiginit, METH_VARARGS, NULL},
		 { "Shape3DVisitor_visit", _wrap_Shape3DVisitor_visit, METH_VARARGS, "\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, Pill pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, Sphere pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, RoundedRectangle pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, Plane pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, HalfSpace pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, Rectangle pShape)\n"
			"Shape3DVisitor_visit(Shape3DVisitor self, HalfLine pShape)\n"
			""},
		 { "delete_Shape3DVisitor", _wrap_delete_Shape3DVisitor, METH_O, "delete_Shape3DVisitor(Shape3DVisitor self)"},
		 { "Shape3DVisitor_swigregister", Shape3DVisitor_swigregister, METH_O, NULL},
		 { "new_NotImplementedShape3DVisitor", _wrap_new_NotImplementedShape3DVisitor, METH_VARARGS, "NotImplementedShape3DVisitor(std::string const msg=\"not implemented\")"},
		 { "NotImplementedShape3DVisitor_visit", _wrap_NotImplementedShape3DVisitor_visit, METH_VARARGS, "\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, Pill pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, Sphere pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, RoundedRectangle pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, Plane pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, HalfSpace pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, Rectangle pShape)\n"
			"NotImplementedShape3DVisitor_visit(NotImplementedShape3DVisitor self, HalfLine pShape)\n"
			""},
		 { "delete_NotImplementedShape3DVisitor", _wrap_delete_NotImplementedShape3DVisitor, METH_O, "delete_NotImplementedShape3DVisitor(NotImplementedShape3DVisitor self)"},
		 { "NotImplementedShape3DVisitor_swigregister", NotImplementedShape3DVisitor_swigregister, METH_O, NULL},
		 { "NotImplementedShape3DVisitor_swiginit", NotImplementedShape3DVisitor_swiginit, METH_VARARGS, NULL},
		 { "new_Point2Di", _wrap_new_Point2Di, METH_VARARGS, "Point2Di(int _x=0, int _y=0)"},
		 { "Point2Di_x_set", _wrap_Point2Di_x_set, METH_VARARGS, "Point2Di_x_set(Point2Di self, int x)"},
		 { "Point2Di_x_get", _wrap_Point2Di_x_get, METH_O, "Point2Di_x_get(Point2Di self) -> int"},
		 { "Point2Di_y_set", _wrap_Point2Di_y_set, METH_VARARGS, "Point2Di_y_set(Point2Di self, int y)"},
		 { "Point2Di_y_get", _wrap_Point2Di_y_get, METH_O, "Point2Di_y_get(Point2Di self) -> int"},
		 { "Point2Di___eq__", _wrap_Point2Di___eq__, METH_VARARGS, "Point2Di___eq__(Point2Di self, Point2Di other) -> bool"},
		 { "Point2Di___repr__", _wrap_Point2Di___repr__, METH_O, "Point2Di___repr__(Point2Di self) -> char *"},
		 { "delete_Point2Di", _wrap_delete_Point2Di, METH_O, "delete_Point2Di(Point2Di self)"},
		 { "Point2Di_swigregister", Point2Di_swigregister, METH_O, NULL},
		 { "Point2Di_swiginit", Point2Di_swiginit, METH_VARARGS, NULL},
		 { "new_Pose2Di", _wrap_new_Pose2Di, METH_VARARGS, "\n"
			"Pose2Di(int _x=0, int _y=0, float _angle=0.0)\n"
			"Pose2Di(Point2Di pt, float _angle=0.0)\n"
			""},
		 { "Pose2Di_x_set", _wrap_Pose2Di_x_set, METH_VARARGS, "Pose2Di_x_set(Pose2Di self, int x)"},
		 { "Pose2Di_x_get", _wrap_Pose2Di_x_get, METH_O, "Pose2Di_x_get(Pose2Di self) -> int"},
		 { "Pose2Di_y_set", _wrap_Pose2Di_y_set, METH_VARARGS, "Pose2Di_y_set(Pose2Di self, int y)"},
		 { "Pose2Di_y_get", _wrap_Pose2Di_y_get, METH_O, "Pose2Di_y_get(Pose2Di self) -> int"},
		 { "Pose2Di_theta_set", _wrap_Pose2Di_theta_set, METH_VARARGS, "Pose2Di_theta_set(Pose2Di self, float theta)"},
		 { "Pose2Di_theta_get", _wrap_Pose2Di_theta_get, METH_O, "Pose2Di_theta_get(Pose2Di self) -> float"},
		 { "Pose2Di___eq__", _wrap_Pose2Di___eq__, METH_VARARGS, "Pose2Di___eq__(Pose2Di self, Pose2Di other) -> bool"},
		 { "delete_Pose2Di", _wrap_delete_Pose2Di, METH_O, "delete_Pose2Di(Pose2Di self)"},
		 { "Pose2Di_swigregister", Pose2Di_swigregister, METH_O, NULL},
		 { "Pose2Di_swiginit", Pose2Di_swiginit, METH_VARARGS, NULL},
		 { "roundToInt", _wrap_roundToInt, METH_O, "roundToInt(float x) -> int"},
		 { "new_OccupancyMapParams", _wrap_new_OccupancyMapParams, METH_VARARGS, "OccupancyMapParams(int size, float metersPerPixel, Position2D mapCenter, float obstacleThreshold=0.25)"},
		 { "OccupancyMapParams_initOriginOffset", _wrap_OccupancyMapParams_initOriginOffset, METH_VARARGS, "OccupancyMapParams_initOriginOffset(OccupancyMapParams self, Position2D mapCenter)"},
		 { "OccupancyMapParams_getPixelFromOffsetAndScale", _wrap_OccupancyMapParams_getPixelFromOffsetAndScale, METH_VARARGS, "OccupancyMapParams_getPixelFromOffsetAndScale(Pose2D pose, float metersPerPixel, Position2D originOffset) -> Point2Di"},
		 { "OccupancyMapParams_getPixelFromPose", _wrap_OccupancyMapParams_getPixelFromPose, METH_VARARGS, "OccupancyMapParams_getPixelFromPose(OccupancyMapParams self, Pose2D pose) -> Point2Di"},
		 { "OccupancyMapParams_getPixelFromPosition", _wrap_OccupancyMapParams_getPixelFromPosition, METH_VARARGS, "OccupancyMapParams_getPixelFromPosition(OccupancyMapParams self, Position2D position) -> Point2Di"},
		 { "OccupancyMapParams_getPoseFromPixel", _wrap_OccupancyMapParams_getPoseFromPixel, METH_VARARGS, "OccupancyMapParams_getPoseFromPixel(OccupancyMapParams self, Pose2Di pixel) -> Pose2D"},
		 { "OccupancyMapParams_getPositionFromPixel", _wrap_OccupancyMapParams_getPositionFromPixel, METH_VARARGS, "OccupancyMapParams_getPositionFromPixel(OccupancyMapParams self, Point2Di pixel) -> Position2D"},
		 { "OccupancyMapParams_getDeltaPixelFromDeltaPosition", _wrap_OccupancyMapParams_getDeltaPixelFromDeltaPosition, METH_VARARGS, "OccupancyMapParams_getDeltaPixelFromDeltaPosition(OccupancyMapParams self, Position2D position) -> Point2Di"},
		 { "OccupancyMapParams_getObstacleProbabilityThreshold", _wrap_OccupancyMapParams_getObstacleProbabilityThreshold, METH_O, "OccupancyMapParams_getObstacleProbabilityThreshold(OccupancyMapParams self) -> float"},
		 { "OccupancyMapParams_size_set", _wrap_OccupancyMapParams_size_set, METH_VARARGS, "OccupancyMapParams_size_set(OccupancyMapParams self, int size)"},
		 { "OccupancyMapParams_size_get", _wrap_OccupancyMapParams_size_get, METH_O, "OccupancyMapParams_size_get(OccupancyMapParams self) -> int"},
		 { "OccupancyMapParams_metersPerPixel_set", _wrap_OccupancyMapParams_metersPerPixel_set, METH_VARARGS, "OccupancyMapParams_metersPerPixel_set(OccupancyMapParams self, float metersPerPixel)"},
		 { "OccupancyMapParams_metersPerPixel_get", _wrap_OccupancyMapParams_metersPerPixel_get, METH_O, "OccupancyMapParams_metersPerPixel_get(OccupancyMapParams self) -> float"},
		 { "OccupancyMapParams_originOffset_set", _wrap_OccupancyMapParams_originOffset_set, METH_VARARGS, "OccupancyMapParams_originOffset_set(OccupancyMapParams self, Position2D originOffset)"},
		 { "OccupancyMapParams_originOffset_get", _wrap_OccupancyMapParams_originOffset_get, METH_O, "OccupancyMapParams_originOffset_get(OccupancyMapParams self) -> Position2D"},
		 { "OccupancyMapParams_obstacleProbabilityThreshold_set", _wrap_OccupancyMapParams_obstacleProbabilityThreshold_set, METH_VARARGS, "OccupancyMapParams_obstacleProbabilityThreshold_set(OccupancyMapParams self, float obstacleProbabilityThreshold)"},
		 { "OccupancyMapParams_obstacleProbabilityThreshold_get", _wrap_OccupancyMapParams_obstacleProbabilityThreshold_get, METH_O, "OccupancyMapParams_obstacleProbabilityThreshold_get(OccupancyMapParams self) -> float"},
		 { "OccupancyMapParams___repr__", _wrap_OccupancyMapParams___repr__, METH_O, "OccupancyMapParams___repr__(OccupancyMapParams self) -> char *"},
		 { "delete_OccupancyMapParams", _wrap_delete_OccupancyMapParams, METH_O, "delete_OccupancyMapParams(OccupancyMapParams self)"},
		 { "OccupancyMapParams_swigregister", OccupancyMapParams_swigregister, METH_O, NULL},
		 { "OccupancyMapParams_swiginit", OccupancyMapParams_swiginit, METH_VARARGS, NULL},
		 { NULL, NULL, 0, NULL }
	};

	static PyMethodDef SwigMethods_proxydocs[] = {
		 { NULL, NULL, 0, NULL }
	};


	/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

	static void *_p_AL__Math__HalfSpaceTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::HalfSpace *) x));
	}
	static void *_p_AL__Math__PillTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::Pill *) x));
	}
	static void *_p_AL__Math__RoundedRectangleTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::RoundedRectangle *) x));
	}
	static void *_p_AL__Math__RectangleTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::Rectangle *) x));
	}
	static void *_p_AL__Math__SphereTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::Sphere *) x));
	}
	static void *_p_AL__Math__PlaneTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::Plane *) x));
	}
	static void *_p_AL__Math__HalfLineTo_p_AL__Math__Shape3D(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3D *)  ((AL::Math::HalfLine *) x));
	}
	static void *_p_AL__Math__NotImplementedShape3DVisitorTo_p_AL__Math__Shape3DVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
		return (void *)((AL::Math::Shape3DVisitor *)  ((AL::Math::NotImplementedShape3DVisitor *) x));
	}
	static swig_type_info _swigt__p_AL__Math__DSP__DigitalFilter = { "_p_AL__Math__DSP__DigitalFilter", "AL::Math::DSP::DigitalFilter *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__DSP__PIDController = { "_p_AL__Math__DSP__PIDController", "AL::Math::DSP::PIDController *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Displacement = { "_p_AL__Math__Displacement", "AL::Math::Displacement *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__HalfLine = { "_p_AL__Math__HalfLine", "AL::Math::HalfLine *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__HalfSpace = { "_p_AL__Math__HalfSpace", "AL::Math::HalfSpace *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__NotImplementedShape3DVisitor = { "_p_AL__Math__NotImplementedShape3DVisitor", "AL::Math::NotImplementedShape3DVisitor *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__OccupancyMapParams = { "_p_AL__Math__OccupancyMapParams", "AL::Math::OccupancyMapParams *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Pill = { "_p_AL__Math__Pill", "AL::Math::Pill *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Plane = { "_p_AL__Math__Plane", "AL::Math::Plane *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Point2Di = { "_p_AL__Math__Point2Di", "AL::Math::Point2Di *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Pose2D = { "_p_AL__Math__Pose2D", "AL::Math::Pose2D *|std::vector< AL::Math::Pose2D >::value_type *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Pose2Di = { "_p_AL__Math__Pose2Di", "AL::Math::Pose2Di *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Position2D = { "_p_AL__Math__Position2D", "AL::Math::Position2D *|std::vector< AL::Math::Position2D >::value_type *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Position3D = { "_p_AL__Math__Position3D", "AL::Math::Position3D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Position6D = { "_p_AL__Math__Position6D", "std::vector< AL::Math::Position6D >::value_type *|AL::Math::Position6D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__PositionAndVelocity = { "_p_AL__Math__PositionAndVelocity", "AL::Math::PositionAndVelocity *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Quaternion = { "_p_AL__Math__Quaternion", "AL::Math::Quaternion *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Rectangle = { "_p_AL__Math__Rectangle", "AL::Math::Rectangle *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Rotation = { "_p_AL__Math__Rotation", "AL::Math::Rotation *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Rotation3D = { "_p_AL__Math__Rotation3D", "AL::Math::Rotation3D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__RoundedRectangle = { "_p_AL__Math__RoundedRectangle", "AL::Math::RoundedRectangle *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Shape3D = { "_p_AL__Math__Shape3D", "AL::Math::Shape3D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Shape3DVisitor = { "_p_AL__Math__Shape3DVisitor", "AL::Math::Shape3DVisitor *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Sphere = { "_p_AL__Math__Sphere", "AL::Math::Sphere *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Transform = { "_p_AL__Math__Transform", "AL::Math::Transform *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__TransformAndVelocity6D = { "_p_AL__Math__TransformAndVelocity6D", "AL::Math::TransformAndVelocity6D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Velocity3D = { "_p_AL__Math__Velocity3D", "AL::Math::Velocity3D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_AL__Math__Velocity6D = { "_p_AL__Math__Velocity6D", "AL::Math::Velocity6D *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_allocator_type = { "_p_allocator_type", "allocator_type *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_char = { "_p_char", "char *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_difference_type = { "_p_difference_type", "difference_type *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_float = { "_p_float", "float *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_p_PyObject = { "_p_p_PyObject", "PyObject **", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_size_type = { "_p_size_type", "size_type *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__allocatorT_AL__Math__Pose2D_t = { "_p_std__allocatorT_AL__Math__Pose2D_t", "std::vector< AL::Math::Pose2D >::allocator_type *|std::allocator< AL::Math::Pose2D > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__allocatorT_AL__Math__Position2D_t = { "_p_std__allocatorT_AL__Math__Position2D_t", "std::vector< AL::Math::Position2D >::allocator_type *|std::allocator< AL::Math::Position2D > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__allocatorT_AL__Math__Position6D_t = { "_p_std__allocatorT_AL__Math__Position6D_t", "std::vector< AL::Math::Position6D >::allocator_type *|std::allocator< AL::Math::Position6D > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__allocatorT_float_t = { "_p_std__allocatorT_float_t", "std::vector< float >::allocator_type *|std::allocator< float > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__bitsetT_6_t = { "_p_std__bitsetT_6_t", "std::bitset< 6 > *|AL::Math::AXIS_MASK *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__invalid_argument = { "_p_std__invalid_argument", "std::invalid_argument *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t = { "_p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t", "std::vector< AL::Math::Pose2D > *|AL::Math::Pose2DVect *|std::vector< AL::Math::Pose2D,std::allocator< AL::Math::Pose2D > > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t = { "_p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t", "std::vector< AL::Math::Pose2Di,std::allocator< AL::Math::Pose2Di > > *|AL::Math::Pose2DiVect *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t = { "_p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t", "std::vector< AL::Math::Position2D > *|std::vector< AL::Math::Position2D,std::allocator< AL::Math::Position2D > > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t = { "_p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t", "std::vector< AL::Math::Position6D > *|std::vector< AL::Math::Position6D,std::allocator< AL::Math::Position6D > > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t = { "_p_std__vectorT_float_std__allocatorT_float_t_t", "std::vector< float > *|std::vector< float,std::allocator< float > > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_float_std__allocatorT_float_t_t__iterator = { "_p_std__vectorT_float_std__allocatorT_float_t_t__iterator", "std::vector< float >::iterator *|std::vector< float,std::allocator< float > >::iterator *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t = { "_p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t", "std::vector< std::vector< float,std::allocator< float > >,std::allocator< std::vector< float,std::allocator< float > > > > *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_swig__SwigPyIterator = { "_p_swig__SwigPyIterator", "swig::SwigPyIterator *", 0, 0, (void*)0, 0 };
	static swig_type_info _swigt__p_value_type = { "_p_value_type", "value_type *", 0, 0, (void*)0, 0 };

	static swig_type_info *swig_type_initial[] = {
	  &_swigt__p_AL__Math__DSP__DigitalFilter,
	  &_swigt__p_AL__Math__DSP__PIDController,
	  &_swigt__p_AL__Math__Displacement,
	  &_swigt__p_AL__Math__HalfLine,
	  &_swigt__p_AL__Math__HalfSpace,
	  &_swigt__p_AL__Math__NotImplementedShape3DVisitor,
	  &_swigt__p_AL__Math__OccupancyMapParams,
	  &_swigt__p_AL__Math__Pill,
	  &_swigt__p_AL__Math__Plane,
	  &_swigt__p_AL__Math__Point2Di,
	  &_swigt__p_AL__Math__Pose2D,
	  &_swigt__p_AL__Math__Pose2Di,
	  &_swigt__p_AL__Math__Position2D,
	  &_swigt__p_AL__Math__Position3D,
	  &_swigt__p_AL__Math__Position6D,
	  &_swigt__p_AL__Math__PositionAndVelocity,
	  &_swigt__p_AL__Math__Quaternion,
	  &_swigt__p_AL__Math__Rectangle,
	  &_swigt__p_AL__Math__Rotation,
	  &_swigt__p_AL__Math__Rotation3D,
	  &_swigt__p_AL__Math__RoundedRectangle,
	  &_swigt__p_AL__Math__Shape3D,
	  &_swigt__p_AL__Math__Shape3DVisitor,
	  &_swigt__p_AL__Math__Sphere,
	  &_swigt__p_AL__Math__Transform,
	  &_swigt__p_AL__Math__TransformAndVelocity6D,
	  &_swigt__p_AL__Math__Velocity3D,
	  &_swigt__p_AL__Math__Velocity6D,
	  &_swigt__p_allocator_type,
	  &_swigt__p_char,
	  &_swigt__p_difference_type,
	  &_swigt__p_float,
	  &_swigt__p_p_PyObject,
	  &_swigt__p_size_type,
	  &_swigt__p_std__allocatorT_AL__Math__Pose2D_t,
	  &_swigt__p_std__allocatorT_AL__Math__Position2D_t,
	  &_swigt__p_std__allocatorT_AL__Math__Position6D_t,
	  &_swigt__p_std__allocatorT_float_t,
	  &_swigt__p_std__bitsetT_6_t,
	  &_swigt__p_std__invalid_argument,
	  &_swigt__p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t,
	  &_swigt__p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t,
	  &_swigt__p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t,
	  &_swigt__p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t,
	  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t,
	  &_swigt__p_std__vectorT_float_std__allocatorT_float_t_t__iterator,
	  &_swigt__p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t,
	  &_swigt__p_swig__SwigPyIterator,
	  &_swigt__p_value_type,
	};

	static swig_cast_info _swigc__p_AL__Math__DSP__DigitalFilter[] = { {&_swigt__p_AL__Math__DSP__DigitalFilter, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__DSP__PIDController[] = { {&_swigt__p_AL__Math__DSP__PIDController, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Displacement[] = { {&_swigt__p_AL__Math__Displacement, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__HalfLine[] = { {&_swigt__p_AL__Math__HalfLine, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__HalfSpace[] = { {&_swigt__p_AL__Math__HalfSpace, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__NotImplementedShape3DVisitor[] = { {&_swigt__p_AL__Math__NotImplementedShape3DVisitor, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__OccupancyMapParams[] = { {&_swigt__p_AL__Math__OccupancyMapParams, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Pill[] = { {&_swigt__p_AL__Math__Pill, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Plane[] = { {&_swigt__p_AL__Math__Plane, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Point2Di[] = { {&_swigt__p_AL__Math__Point2Di, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Pose2D[] = { {&_swigt__p_AL__Math__Pose2D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Pose2Di[] = { {&_swigt__p_AL__Math__Pose2Di, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Position2D[] = { {&_swigt__p_AL__Math__Position2D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Position3D[] = { {&_swigt__p_AL__Math__Position3D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Position6D[] = { {&_swigt__p_AL__Math__Position6D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__PositionAndVelocity[] = { {&_swigt__p_AL__Math__PositionAndVelocity, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Quaternion[] = { {&_swigt__p_AL__Math__Quaternion, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Rectangle[] = { {&_swigt__p_AL__Math__Rectangle, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Rotation[] = { {&_swigt__p_AL__Math__Rotation, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Rotation3D[] = { {&_swigt__p_AL__Math__Rotation3D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__RoundedRectangle[] = { {&_swigt__p_AL__Math__RoundedRectangle, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Shape3D[] = { {&_swigt__p_AL__Math__HalfSpace, _p_AL__Math__HalfSpaceTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__Shape3D, 0, 0, 0},  {&_swigt__p_AL__Math__RoundedRectangle, _p_AL__Math__RoundedRectangleTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__Rectangle, _p_AL__Math__RectangleTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__Pill, _p_AL__Math__PillTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__Sphere, _p_AL__Math__SphereTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__Plane, _p_AL__Math__PlaneTo_p_AL__Math__Shape3D, 0, 0},  {&_swigt__p_AL__Math__HalfLine, _p_AL__Math__HalfLineTo_p_AL__Math__Shape3D, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Shape3DVisitor[] = { {&_swigt__p_AL__Math__Shape3DVisitor, 0, 0, 0},  {&_swigt__p_AL__Math__NotImplementedShape3DVisitor, _p_AL__Math__NotImplementedShape3DVisitorTo_p_AL__Math__Shape3DVisitor, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Sphere[] = { {&_swigt__p_AL__Math__Sphere, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Transform[] = { {&_swigt__p_AL__Math__Transform, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__TransformAndVelocity6D[] = { {&_swigt__p_AL__Math__TransformAndVelocity6D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Velocity3D[] = { {&_swigt__p_AL__Math__Velocity3D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_AL__Math__Velocity6D[] = { {&_swigt__p_AL__Math__Velocity6D, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_allocator_type[] = { {&_swigt__p_allocator_type, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_char[] = { {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_difference_type[] = { {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_float[] = { {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_p_PyObject[] = { {&_swigt__p_p_PyObject, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_size_type[] = { {&_swigt__p_size_type, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__allocatorT_AL__Math__Pose2D_t[] = { {&_swigt__p_std__allocatorT_AL__Math__Pose2D_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__allocatorT_AL__Math__Position2D_t[] = { {&_swigt__p_std__allocatorT_AL__Math__Position2D_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__allocatorT_AL__Math__Position6D_t[] = { {&_swigt__p_std__allocatorT_AL__Math__Position6D_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__allocatorT_float_t[] = { {&_swigt__p_std__allocatorT_float_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__bitsetT_6_t[] = { {&_swigt__p_std__bitsetT_6_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__invalid_argument[] = { {&_swigt__p_std__invalid_argument, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t[] = { {&_swigt__p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t[] = { {&_swigt__p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t[] = { {&_swigt__p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t[] = { {&_swigt__p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t[] = { {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_float_std__allocatorT_float_t_t__iterator[] = { {&_swigt__p_std__vectorT_float_std__allocatorT_float_t_t__iterator, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t[] = { {&_swigt__p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_swig__SwigPyIterator[] = { {&_swigt__p_swig__SwigPyIterator, 0, 0, 0},{0, 0, 0, 0} };
	static swig_cast_info _swigc__p_value_type[] = { {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0} };

	static swig_cast_info *swig_cast_initial[] = {
	  _swigc__p_AL__Math__DSP__DigitalFilter,
	  _swigc__p_AL__Math__DSP__PIDController,
	  _swigc__p_AL__Math__Displacement,
	  _swigc__p_AL__Math__HalfLine,
	  _swigc__p_AL__Math__HalfSpace,
	  _swigc__p_AL__Math__NotImplementedShape3DVisitor,
	  _swigc__p_AL__Math__OccupancyMapParams,
	  _swigc__p_AL__Math__Pill,
	  _swigc__p_AL__Math__Plane,
	  _swigc__p_AL__Math__Point2Di,
	  _swigc__p_AL__Math__Pose2D,
	  _swigc__p_AL__Math__Pose2Di,
	  _swigc__p_AL__Math__Position2D,
	  _swigc__p_AL__Math__Position3D,
	  _swigc__p_AL__Math__Position6D,
	  _swigc__p_AL__Math__PositionAndVelocity,
	  _swigc__p_AL__Math__Quaternion,
	  _swigc__p_AL__Math__Rectangle,
	  _swigc__p_AL__Math__Rotation,
	  _swigc__p_AL__Math__Rotation3D,
	  _swigc__p_AL__Math__RoundedRectangle,
	  _swigc__p_AL__Math__Shape3D,
	  _swigc__p_AL__Math__Shape3DVisitor,
	  _swigc__p_AL__Math__Sphere,
	  _swigc__p_AL__Math__Transform,
	  _swigc__p_AL__Math__TransformAndVelocity6D,
	  _swigc__p_AL__Math__Velocity3D,
	  _swigc__p_AL__Math__Velocity6D,
	  _swigc__p_allocator_type,
	  _swigc__p_char,
	  _swigc__p_difference_type,
	  _swigc__p_float,
	  _swigc__p_p_PyObject,
	  _swigc__p_size_type,
	  _swigc__p_std__allocatorT_AL__Math__Pose2D_t,
	  _swigc__p_std__allocatorT_AL__Math__Position2D_t,
	  _swigc__p_std__allocatorT_AL__Math__Position6D_t,
	  _swigc__p_std__allocatorT_float_t,
	  _swigc__p_std__bitsetT_6_t,
	  _swigc__p_std__invalid_argument,
	  _swigc__p_std__vectorT_AL__Math__Pose2D_std__allocatorT_AL__Math__Pose2D_t_t,
	  _swigc__p_std__vectorT_AL__Math__Pose2Di_std__allocatorT_AL__Math__Pose2Di_t_t,
	  _swigc__p_std__vectorT_AL__Math__Position2D_std__allocatorT_AL__Math__Position2D_t_t,
	  _swigc__p_std__vectorT_AL__Math__Position6D_std__allocatorT_AL__Math__Position6D_t_t,
	  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t,
	  _swigc__p_std__vectorT_float_std__allocatorT_float_t_t__iterator,
	  _swigc__p_std__vectorT_std__vectorT_float_std__allocatorT_float_t_t_std__allocatorT_std__vectorT_float_std__allocatorT_float_t_t_t_t,
	  _swigc__p_swig__SwigPyIterator,
	  _swigc__p_value_type,
	};


	/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

	static swig_const_info swig_const_table[] = {
	{0, 0, 0, 0.0, 0, 0} };

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
	size_t i;
	swig_module_info *module_head, *iter;
	int init;

	/* check to see if the circular list has been setup, if not, set it up */
	if (swig_module.next == 0) {
		/* Initialize the swig_module */
		swig_module.type_initial = swig_type_initial;
		swig_module.cast_initial = swig_cast_initial;
		swig_module.next = &swig_module;
		init = 1;
	}
	else {
		init = 0;
	}

	/* Try and load any already created modules */
	module_head = SWIG_GetModule(clientdata);
	if (!module_head) {
		/* This is the first module loaded for this interpreter */
		/* so set the swig module into the interpreter */
		SWIG_SetModule(clientdata, &swig_module);
	}
	else {
		/* the interpreter has loaded a SWIG module, but has it loaded this one? */
		iter = module_head;
		do {
			if (iter == &swig_module) {
				/* Our module is already in the list, so there's nothing more to do. */
				return;
			}
			iter = iter->next;
		} while (iter != module_head);

		/* otherwise we must add our module into the list */
		swig_module.next = module_head->next;
		module_head->next = &swig_module;
	}

	/* When multiple interpreters are used, a module could have already been initialized in
		 a different interpreter, but not yet have a pointer in this interpreter.
		 In this case, we do not want to continue adding types... everything should be
		 set up already */
	if (init == 0) return;

	/* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: size %lu\n", (unsigned long)swig_module.size);
#endif
	for (i = 0; i < swig_module.size; ++i) {
		swig_type_info *type = 0;
		swig_type_info *ret;
		swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
		printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
#endif

		/* if there is another module already loaded */
		if (swig_module.next != &swig_module) {
			type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
		}
		if (type) {
			/* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
			printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
			if (swig_module.type_initial[i]->clientdata) {
				type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
				printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
			}
		}
		else {
			type = swig_module.type_initial[i];
		}

		/* Insert casting types */
		cast = swig_module.cast_initial[i];
		while (cast->type) {
			/* Don't need to add information already in the list */
			ret = 0;
#ifdef SWIGRUNTIME_DEBUG
			printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
			if (swig_module.next != &swig_module) {
				ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
				if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
			}
			if (ret) {
				if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
					printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
					cast->type = ret;
					ret = 0;
				}
				else {
					/* Check for casting already in the list */
					swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
					if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
					if (!ocast) ret = 0;
				}
			}

			if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
				printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
				if (type->cast) {
					type->cast->prev = cast;
					cast->next = type->cast;
				}
				type->cast = cast;
			}
			cast++;
		}
		/* Set entry in modules->types array equal to the type */
		swig_module.types[i] = type;
	}
	swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
	printf("**** SWIG_InitializeModule: Cast List ******\n");
	for (i = 0; i < swig_module.size; ++i) {
		int j = 0;
		swig_cast_info *cast = swig_module.cast_initial[i];
		printf("SWIG_InitializeModule: type %lu %s\n", (unsigned long)i, swig_module.type_initial[i]->name);
		while (cast->type) {
			printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
			cast++;
			++j;
		}
		printf("---- Total casts: %d\n", j);
	}
	printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
	size_t i;
	swig_cast_info *equiv;
	static int init_run = 0;

	if (init_run) return;
	init_run = 1;

	for (i = 0; i < swig_module.size; i++) {
		if (swig_module.types[i]->clientdata) {
			equiv = swig_module.types[i]->cast;
			while (equiv) {
				if (!equiv->converter) {
					if (equiv->type && !equiv->type->clientdata)
						SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
				}
				equiv = equiv->next;
			}
		}
	}
}

#ifdef __cplusplus
#if 0
{
	/* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif

	/* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)

  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */

	typedef struct swig_globalvar {
		char       *name;                  /* Name of global variable */
		PyObject *(*get_attr)(void);       /* Return the current value */
		int(*set_attr)(PyObject *); /* Set the value */
		struct swig_globalvar *next;
	} swig_globalvar;

	typedef struct swig_varlinkobject {
		PyObject_HEAD
			swig_globalvar *vars;
	} swig_varlinkobject;

	SWIGINTERN PyObject *
		swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
		return PyUnicode_InternFromString("<Swig global variables>");
#else
		return PyString_FromString("<Swig global variables>");
#endif
	}

	SWIGINTERN PyObject *
		swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
		PyObject *str = PyUnicode_InternFromString("(");
		PyObject *tail;
		PyObject *joined;
		swig_globalvar *var;
		for (var = v->vars; var; var = var->next) {
			tail = PyUnicode_FromString(var->name);
			joined = PyUnicode_Concat(str, tail);
			Py_DecRef(str);
			Py_DecRef(tail);
			str = joined;
			if (var->next) {
				tail = PyUnicode_InternFromString(", ");
				joined = PyUnicode_Concat(str, tail);
				Py_DecRef(str);
				Py_DecRef(tail);
				str = joined;
			}
		}
		tail = PyUnicode_InternFromString(")");
		joined = PyUnicode_Concat(str, tail);
		Py_DecRef(str);
		Py_DecRef(tail);
		str = joined;
#else
		PyObject *str = PyString_FromString("(");
		swig_globalvar *var;
		for (var = v->vars; var; var = var->next) {
			PyString_ConcatAndDel(&str, PyString_FromString(var->name));
			if (var->next) PyString_ConcatAndDel(&str, PyString_FromString(", "));
		}
		PyString_ConcatAndDel(&str, PyString_FromString(")"));
#endif
		return str;
	}

	SWIGINTERN void
		swig_varlink_dealloc(swig_varlinkobject *v) {
		swig_globalvar *var = v->vars;
		while (var) {
			swig_globalvar *n = var->next;
			free(var->name);
			free(var);
			var = n;
		}
	}

	SWIGINTERN PyObject *
		swig_varlink_getattr(swig_varlinkobject *v, char *n) {
		PyObject *res = NULL;
		swig_globalvar *var = v->vars;
		while (var) {
			if (strcmp(var->name, n) == 0) {
				res = (*var->get_attr)();
				break;
			}
			var = var->next;
		}
		if (res == NULL && !PyErr_Occurred()) {
			PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
		}
		return res;
	}

	SWIGINTERN int
		swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
		int res = 1;
		swig_globalvar *var = v->vars;
		while (var) {
			if (strcmp(var->name, n) == 0) {
				res = (*var->set_attr)(p);
				break;
			}
			var = var->next;
		}
		if (res == 1 && !PyErr_Occurred()) {
			PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
		}
		return res;
	}

	SWIGINTERN PyTypeObject*
		swig_varlink_type(void) {
		static char varlink__doc__[] = "Swig var link object";
		static PyTypeObject varlink_type;
		static int type_init = 0;
		if (!type_init) {
			const PyTypeObject tmp = {
	  #if PY_VERSION_HEX >= 0x03000000
			  PyVarObject_HEAD_INIT(NULL, 0)
	  #else
			  PyObject_HEAD_INIT(NULL)
			  0,                                  /* ob_size */
	  #endif
			  "swigvarlink",                      /* tp_name */
			  sizeof(swig_varlinkobject),         /* tp_basicsize */
			  0,                                  /* tp_itemsize */
			  (destructor)swig_varlink_dealloc,  /* tp_dealloc */
			  0,                                  /* tp_print */
			  (getattrfunc)swig_varlink_getattr, /* tp_getattr */
			  (setattrfunc)swig_varlink_setattr, /* tp_setattr */
			  0,                                  /* tp_compare */
			  (reprfunc)swig_varlink_repr,       /* tp_repr */
			  0,                                  /* tp_as_number */
			  0,                                  /* tp_as_sequence */
			  0,                                  /* tp_as_mapping */
			  0,                                  /* tp_hash */
			  0,                                  /* tp_call */
			  (reprfunc)swig_varlink_str,        /* tp_str */
			  0,                                  /* tp_getattro */
			  0,                                  /* tp_setattro */
			  0,                                  /* tp_as_buffer */
			  0,                                  /* tp_flags */
			  varlink__doc__,                     /* tp_doc */
			  0,                                  /* tp_traverse */
			  0,                                  /* tp_clear */
			  0,                                  /* tp_richcompare */
			  0,                                  /* tp_weaklistoffset */
			  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
			  0,                                  /* tp_del */
			  0,                                  /* tp_version_tag */
	  #if PY_VERSION_HEX >= 0x03040000
			  0,                                  /* tp_finalize */
	  #endif
	  #if PY_VERSION_HEX >= 0x03080000
			  0,                                  /* tp_vectorcall */
	  #endif
	  #if (PY_VERSION_HEX >= 0x03080000) && (PY_VERSION_HEX < 0x03090000)
			  0,                                  /* tp_print */
	  #endif
	  #ifdef COUNT_ALLOCS
			  0,                                  /* tp_allocs */
			  0,                                  /* tp_frees */
			  0,                                  /* tp_maxalloc */
			  0,                                  /* tp_prev */
			  0                                   /* tp_next */
	  #endif
			};
			varlink_type = tmp;
			type_init = 1;
			if (PyType_Ready(&varlink_type) < 0)
				return NULL;
		}
		return &varlink_type;
	}

	/* Create a variable linking object for use later */
	SWIGINTERN PyObject *
		SWIG_Python_newvarlink(void) {
		swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
		if (result) {
			result->vars = 0;
		}
		return ((PyObject*)result);
	}

	SWIGINTERN void
		SWIG_Python_addvarlink(PyObject *p, const char *name, PyObject *(*get_attr)(void), int(*set_attr)(PyObject *p)) {
		swig_varlinkobject *v = (swig_varlinkobject *)p;
		swig_globalvar *gv = (swig_globalvar *)malloc(sizeof(swig_globalvar));
		if (gv) {
			size_t size = strlen(name) + 1;
			gv->name = (char *)malloc(size);
			if (gv->name) {
				memcpy(gv->name, name, size);
				gv->get_attr = get_attr;
				gv->set_attr = set_attr;
				gv->next = v->vars;
			}
		}
		v->vars = gv;
	}

	SWIGINTERN PyObject *
		SWIG_globals(void) {
		static PyObject *globals = 0;
		if (!globals) {
			globals = SWIG_newvarlink();
		}
		return globals;
	}

	/* -----------------------------------------------------------------------------
	 * constants/methods manipulation
	 * ----------------------------------------------------------------------------- */

	 /* Install Constants */
	SWIGINTERN void
		SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
		PyObject *obj = 0;
		size_t i;
		for (i = 0; constants[i].type; ++i) {
			switch (constants[i].type) {
			case SWIG_PY_POINTER:
				obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype, 0);
				break;
			case SWIG_PY_BINARY:
				obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
				break;
			default:
				obj = 0;
				break;
			}
			if (obj) {
				PyDict_SetItemString(d, constants[i].name, obj);
				Py_DECREF(obj);
			}
		}
	}

	/* -----------------------------------------------------------------------------*/
	/* Fix SwigMethods to carry the callback ptrs when needed */
	/* -----------------------------------------------------------------------------*/

	SWIGINTERN void
		SWIG_Python_FixMethods(PyMethodDef *methods,
			swig_const_info *const_table,
			swig_type_info **types,
			swig_type_info **types_initial) {
		size_t i;
		for (i = 0; methods[i].ml_name; ++i) {
			const char *c = methods[i].ml_doc;
			if (!c) continue;
			c = strstr(c, "swig_ptr: ");
			if (c) {
				int j;
				swig_const_info *ci = 0;
				const char *name = c + 10;
				for (j = 0; const_table[j].type; ++j) {
					if (strncmp(const_table[j].name, name,
						strlen(const_table[j].name)) == 0) {
						ci = &(const_table[j]);
						break;
					}
				}
				if (ci) {
					void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
					if (ptr) {
						size_t shift = (ci->ptype) - types;
						swig_type_info *ty = types_initial[shift];
						size_t ldoc = (c - methods[i].ml_doc);
						size_t lptr = strlen(ty->name) + 2 * sizeof(void*) + 2;
						char *ndoc = (char*)malloc(ldoc + lptr + 10);
						if (ndoc) {
							char *buff = ndoc;
							memcpy(buff, methods[i].ml_doc, ldoc);
							buff += ldoc;
							memcpy(buff, "swig_ptr: ", 10);
							buff += 10;
							SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
							methods[i].ml_doc = ndoc;
						}
					}
				}
			}
		}
	}

	/* -----------------------------------------------------------------------------
	 * Method creation and docstring support functions
	 * ----------------------------------------------------------------------------- */

	 /* -----------------------------------------------------------------------------
	  * Function to find the method definition with the correct docstring for the
	  * proxy module as opposed to the low-level API
	  * ----------------------------------------------------------------------------- */

	SWIGINTERN PyMethodDef *SWIG_PythonGetProxyDoc(const char *name) {
		/* Find the function in the modified method table */
		size_t offset = 0;
		int found = 0;
		while (SwigMethods_proxydocs[offset].ml_meth != NULL) {
			if (strcmp(SwigMethods_proxydocs[offset].ml_name, name) == 0) {
				found = 1;
				break;
			}
			offset++;
		}
		/* Use the copy with the modified docstring if available */
		return found ? &SwigMethods_proxydocs[offset] : NULL;
	}

	/* -----------------------------------------------------------------------------
	 * Wrapper of PyInstanceMethod_New() used in Python 3
	 * It is exported to the generated module, used for -fastproxy
	 * ----------------------------------------------------------------------------- */

	SWIGINTERN PyObject *SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
		if (PyCFunction_Check(func)) {
			PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
			PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
			if (ml)
				func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
		}
#if PY_VERSION_HEX >= 0x03000000
		return PyInstanceMethod_New(func);
#else
		return PyMethod_New(func, NULL, NULL);
#endif
	}

	/* -----------------------------------------------------------------------------
	 * Wrapper of PyStaticMethod_New()
	 * It is exported to the generated module, used for -fastproxy
	 * ----------------------------------------------------------------------------- */

	SWIGINTERN PyObject *SWIG_PyStaticMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func) {
		if (PyCFunction_Check(func)) {
			PyCFunctionObject *funcobj = (PyCFunctionObject *)func;
			PyMethodDef *ml = SWIG_PythonGetProxyDoc(funcobj->m_ml->ml_name);
			if (ml)
				func = PyCFunction_NewEx(ml, funcobj->m_self, funcobj->m_module);
		}
		return PyStaticMethod_New(func);
	}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
	PyObject *m, *d, *md, *globals;

#if PY_VERSION_HEX >= 0x03000000
	static struct PyModuleDef SWIG_module = {
	  PyModuleDef_HEAD_INIT,
	  SWIG_name,
	  NULL,
	  -1,
	  SwigMethods,
	  NULL,
	  NULL,
	  NULL,
	  NULL
	};
#endif

#if defined(SWIGPYTHON_BUILTIN)
	static SwigPyClientData SwigPyObject_clientdata = {
	  0, 0, 0, 0, 0, 0, 0
	};
	static PyGetSetDef this_getset_def = {
	  (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
	};
	static SwigPyGetSet thisown_getset_closure = {
	  SwigPyObject_own,
	  SwigPyObject_own
	};
	static PyGetSetDef thisown_getset_def = {
	  (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
	};
	PyTypeObject *builtin_pytype;
	int builtin_base_count;
	swig_type_info *builtin_basetype;
	PyObject *tuple;
	PyGetSetDescrObject *static_getset;
	PyTypeObject *metatype;
	PyTypeObject *swigpyobject;
	SwigPyClientData *cd;
	PyObject *public_interface, *public_symbol;
	PyObject *this_descr;
	PyObject *thisown_descr;
	PyObject *self = 0;
	int i;

	(void)builtin_pytype;
	(void)builtin_base_count;
	(void)builtin_basetype;
	(void)tuple;
	(void)static_getset;
	(void)self;

	/* Metaclass is used to implement static member variables */
	metatype = SwigPyObjectType();
	assert(metatype);
#endif

	(void)globals;

	/* Create singletons now to avoid potential deadlocks with multi-threaded usage after module initialization */
	SWIG_This();
	SWIG_Python_TypeCache();
	SwigPyPacked_type();
#ifndef SWIGPYTHON_BUILTIN
	SwigPyObject_type();
#endif

	/* Fix SwigMethods to carry the callback ptrs when needed */
	SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);

#if PY_VERSION_HEX >= 0x03000000
	m = PyModule_Create(&SWIG_module);
#else
	m = Py_InitModule(SWIG_name, SwigMethods);
#endif

	md = d = PyModule_GetDict(m);
	(void)md;

	SWIG_InitializeModule(0);

#ifdef SWIGPYTHON_BUILTIN
	swigpyobject = SwigPyObject_TypeOnce();

	SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
	assert(SwigPyObject_stype);
	cd = (SwigPyClientData*)SwigPyObject_stype->clientdata;
	if (!cd) {
		SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
		SwigPyObject_clientdata.pytype = swigpyobject;
	}
	else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
		PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
		return NULL;
# else
		return;
# endif
	}

	/* All objects have a 'this' attribute */
	this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
	(void)this_descr;

	/* All objects have a 'thisown' attribute */
	thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
	(void)thisown_descr;

	public_interface = PyList_New(0);
	public_symbol = 0;
	(void)public_symbol;

	PyDict_SetItemString(md, "__all__", public_interface);
	Py_DECREF(public_interface);
	for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
		SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
	for (i = 0; swig_const_table[i].name != 0; ++i)
		SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif

	SWIG_InstallConstants(d, swig_const_table);


	// thread safe initialization
	swig::container_owner_attribute();

	globals = SWIG_globals();
	if (!globals) {
		PyErr_SetString(PyExc_TypeError, "Failure to create SWIG globals.");
#if PY_VERSION_HEX >= 0x03000000
		return NULL;
#else
		return;
#endif
	}
	PyDict_SetItemString(md, "cvar", globals);
	Py_DECREF(globals);
	SWIG_addvarlink(globals, "AXIS_MASK_X", Swig_var_AXIS_MASK_X_get, Swig_var_AXIS_MASK_X_set);
	SWIG_addvarlink(globals, "AXIS_MASK_Y", Swig_var_AXIS_MASK_Y_get, Swig_var_AXIS_MASK_Y_set);
	SWIG_addvarlink(globals, "AXIS_MASK_XY", Swig_var_AXIS_MASK_XY_get, Swig_var_AXIS_MASK_XY_set);
	SWIG_addvarlink(globals, "AXIS_MASK_Z", Swig_var_AXIS_MASK_Z_get, Swig_var_AXIS_MASK_Z_set);
	SWIG_addvarlink(globals, "AXIS_MASK_WX", Swig_var_AXIS_MASK_WX_get, Swig_var_AXIS_MASK_WX_set);
	SWIG_addvarlink(globals, "AXIS_MASK_WY", Swig_var_AXIS_MASK_WY_get, Swig_var_AXIS_MASK_WY_set);
	SWIG_addvarlink(globals, "AXIS_MASK_WZ", Swig_var_AXIS_MASK_WZ_get, Swig_var_AXIS_MASK_WZ_set);
	SWIG_addvarlink(globals, "AXIS_MASK_WYWZ", Swig_var_AXIS_MASK_WYWZ_get, Swig_var_AXIS_MASK_WYWZ_set);
	SWIG_addvarlink(globals, "AXIS_MASK_ALL", Swig_var_AXIS_MASK_ALL_get, Swig_var_AXIS_MASK_ALL_set);
	SWIG_addvarlink(globals, "AXIS_MASK_VEL", Swig_var_AXIS_MASK_VEL_get, Swig_var_AXIS_MASK_VEL_set);
	SWIG_addvarlink(globals, "AXIS_MASK_ROT", Swig_var_AXIS_MASK_ROT_get, Swig_var_AXIS_MASK_ROT_set);
	SWIG_addvarlink(globals, "AXIS_MASK_NONE", Swig_var_AXIS_MASK_NONE_get, Swig_var_AXIS_MASK_NONE_set);
	SWIG_addvarlink(globals, "AXIS_MASK_PLANEZ", Swig_var_AXIS_MASK_PLANEZ_get, Swig_var_AXIS_MASK_PLANEZ_set);
	SWIG_addvarlink(globals, "_4_PI_", Swig_var__4_PI__get, Swig_var__4_PI__set);
	SWIG_addvarlink(globals, "_2_PI_", Swig_var__2_PI__get, Swig_var__2_PI__set);
	SWIG_addvarlink(globals, "PI", Swig_var_PI_get, Swig_var_PI_set);
	SWIG_addvarlink(globals, "PI_2", Swig_var_PI_2_get, Swig_var_PI_2_set);
	SWIG_addvarlink(globals, "PI_4", Swig_var_PI_4_get, Swig_var_PI_4_set);
	SWIG_addvarlink(globals, "TO_RAD", Swig_var_TO_RAD_get, Swig_var_TO_RAD_set);
	SWIG_addvarlink(globals, "TO_DEG", Swig_var_TO_DEG_get, Swig_var_TO_DEG_set);
#if PY_VERSION_HEX >= 0x03000000
	return m;
#else
	return;
#endif
}

